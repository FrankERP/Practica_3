
Practica_3_1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005148  08005148  00015148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005170  08005170  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005170  08005170  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005170  08005170  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005170  08005170  00015170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005174  08005174  00015174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08005178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  24000010  08005188  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240004e0  08005188  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022a01  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000388e  00000000  00000000  00042a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  000462d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  000476c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a059  00000000  00000000  00048978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180c3  00000000  00000000  000829d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017e497  00000000  00000000  0009aa94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00218f2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005524  00000000  00000000  00218f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005130 	.word	0x08005130

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005130 	.word	0x08005130

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c4;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af02      	add	r7, sp, #8
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	f023 030f 	bic.w	r3, r3, #15
 800041c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	011b      	lsls	r3, r3, #4
 8000422:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	f043 030c 	orr.w	r3, r3, #12
 800042a:	b2db      	uxtb	r3, r3
 800042c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800042e:	7bfb      	ldrb	r3, [r7, #15]
 8000430:	f043 0308 	orr.w	r3, r3, #8
 8000434:	b2db      	uxtb	r3, r3
 8000436:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000438:	7bbb      	ldrb	r3, [r7, #14]
 800043a:	f043 030c 	orr.w	r3, r3, #12
 800043e:	b2db      	uxtb	r3, r3
 8000440:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000442:	7bbb      	ldrb	r3, [r7, #14]
 8000444:	f043 0308 	orr.w	r3, r3, #8
 8000448:	b2db      	uxtb	r3, r3
 800044a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800044c:	f107 0208 	add.w	r2, r7, #8
 8000450:	2364      	movs	r3, #100	; 0x64
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	2304      	movs	r3, #4
 8000456:	214e      	movs	r1, #78	; 0x4e
 8000458:	4803      	ldr	r0, [pc, #12]	; (8000468 <lcd_send_cmd+0x5c>)
 800045a:	f001 f907 	bl	800166c <HAL_I2C_Master_Transmit>
}
 800045e:	bf00      	nop
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	2400002c 	.word	0x2400002c

0800046c <lcd_send_data>:

void lcd_send_data (char data)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af02      	add	r7, sp, #8
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	f023 030f 	bic.w	r3, r3, #15
 800047c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	011b      	lsls	r3, r3, #4
 8000482:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	f043 030d 	orr.w	r3, r3, #13
 800048a:	b2db      	uxtb	r3, r3
 800048c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	f043 0309 	orr.w	r3, r3, #9
 8000494:	b2db      	uxtb	r3, r3
 8000496:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000498:	7bbb      	ldrb	r3, [r7, #14]
 800049a:	f043 030d 	orr.w	r3, r3, #13
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80004a2:	7bbb      	ldrb	r3, [r7, #14]
 80004a4:	f043 0309 	orr.w	r3, r3, #9
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004ac:	f107 0208 	add.w	r2, r7, #8
 80004b0:	2364      	movs	r3, #100	; 0x64
 80004b2:	9300      	str	r3, [sp, #0]
 80004b4:	2304      	movs	r3, #4
 80004b6:	214e      	movs	r1, #78	; 0x4e
 80004b8:	4803      	ldr	r0, [pc, #12]	; (80004c8 <lcd_send_data+0x5c>)
 80004ba:	f001 f8d7 	bl	800166c <HAL_I2C_Master_Transmit>
}
 80004be:	bf00      	nop
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	2400002c 	.word	0x2400002c

080004cc <lcd_clear>:

void lcd_clear (void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80004d2:	2080      	movs	r0, #128	; 0x80
 80004d4:	f7ff ff9a 	bl	800040c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80004d8:	2300      	movs	r3, #0
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	e005      	b.n	80004ea <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80004de:	2020      	movs	r0, #32
 80004e0:	f7ff ffc4 	bl	800046c <lcd_send_data>
	for (int i=0; i<70; i++)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	3301      	adds	r3, #1
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2b45      	cmp	r3, #69	; 0x45
 80004ee:	ddf6      	ble.n	80004de <lcd_clear+0x12>
	}
}
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	6039      	str	r1, [r7, #0]
    switch (row)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d003      	beq.n	8000512 <lcd_put_cur+0x18>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d005      	beq.n	800051c <lcd_put_cur+0x22>
 8000510:	e009      	b.n	8000526 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000518:	603b      	str	r3, [r7, #0]
            break;
 800051a:	e004      	b.n	8000526 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000522:	603b      	str	r3, [r7, #0]
            break;
 8000524:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff ff6e 	bl	800040c <lcd_send_cmd>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <lcd_init>:


void lcd_init (void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800053c:	2032      	movs	r0, #50	; 0x32
 800053e:	f000 fd13 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000542:	2030      	movs	r0, #48	; 0x30
 8000544:	f7ff ff62 	bl	800040c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000548:	2005      	movs	r0, #5
 800054a:	f000 fd0d 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x30);
 800054e:	2030      	movs	r0, #48	; 0x30
 8000550:	f7ff ff5c 	bl	800040c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000554:	2001      	movs	r0, #1
 8000556:	f000 fd07 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x30);
 800055a:	2030      	movs	r0, #48	; 0x30
 800055c:	f7ff ff56 	bl	800040c <lcd_send_cmd>
	HAL_Delay(10);
 8000560:	200a      	movs	r0, #10
 8000562:	f000 fd01 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000566:	2020      	movs	r0, #32
 8000568:	f7ff ff50 	bl	800040c <lcd_send_cmd>
	HAL_Delay(10);
 800056c:	200a      	movs	r0, #10
 800056e:	f000 fcfb 	bl	8000f68 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000572:	2028      	movs	r0, #40	; 0x28
 8000574:	f7ff ff4a 	bl	800040c <lcd_send_cmd>
	HAL_Delay(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f000 fcf5 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800057e:	2008      	movs	r0, #8
 8000580:	f7ff ff44 	bl	800040c <lcd_send_cmd>
	HAL_Delay(1);
 8000584:	2001      	movs	r0, #1
 8000586:	f000 fcef 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800058a:	2001      	movs	r0, #1
 800058c:	f7ff ff3e 	bl	800040c <lcd_send_cmd>
	HAL_Delay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f000 fce9 	bl	8000f68 <HAL_Delay>
	HAL_Delay(1);
 8000596:	2001      	movs	r0, #1
 8000598:	f000 fce6 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800059c:	2006      	movs	r0, #6
 800059e:	f7ff ff35 	bl	800040c <lcd_send_cmd>
	HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f000 fce0 	bl	8000f68 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80005a8:	200c      	movs	r0, #12
 80005aa:	f7ff ff2f 	bl	800040c <lcd_send_cmd>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80005ba:	e006      	b.n	80005ca <lcd_send_string+0x18>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	607a      	str	r2, [r7, #4]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ff51 	bl	800046c <lcd_send_data>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f4      	bne.n	80005bc <lcd_send_string+0xa>
}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80005e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80005e8:	bf00      	nop
 80005ea:	4b3a      	ldr	r3, [pc, #232]	; (80006d4 <main+0xf8>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d004      	beq.n	8000600 <main+0x24>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	1e5a      	subs	r2, r3, #1
 80005fa:	607a      	str	r2, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	dcf4      	bgt.n	80005ea <main+0xe>
  if ( timeout < 0 )
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	da01      	bge.n	800060a <main+0x2e>
  {
  Error_Handler();
 8000606:	f000 fa99 	bl	8000b3c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fc1b 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f867 	bl	80006e0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <main+0xf8>)
 8000614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000618:	4a2e      	ldr	r2, [pc, #184]	; (80006d4 <main+0xf8>)
 800061a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000622:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <main+0xf8>)
 8000624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000630:	2000      	movs	r0, #0
 8000632:	f000 ff5d 	bl	80014f0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000636:	2100      	movs	r1, #0
 8000638:	2000      	movs	r0, #0
 800063a:	f000 ff73 	bl	8001524 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800063e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000642:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000644:	bf00      	nop
 8000646:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <main+0xf8>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800064e:	2b00      	cmp	r3, #0
 8000650:	d104      	bne.n	800065c <main+0x80>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	1e5a      	subs	r2, r3, #1
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	dcf4      	bgt.n	8000646 <main+0x6a>
if ( timeout < 0 )
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	da01      	bge.n	8000666 <main+0x8a>
{
Error_Handler();
 8000662:	f000 fa6b 	bl	8000b3c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f000 f981 	bl	800096c <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 800066a:	f000 f94d 	bl	8000908 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 800066e:	f000 f8bb 	bl	80007e8 <MX_I2C4_Init>
  MX_TIM5_Init();
 8000672:	f000 f8f9 	bl	8000868 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000676:	f7ff ff5f 	bl	8000538 <lcd_init>
  MPU6050_init();
 800067a:	f000 f9bf 	bl	80009fc <MPU6050_init>
  MPU6050_READ_TEMP();
 800067e:	f000 fa13 	bl	8000aa8 <MPU6050_READ_TEMP>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_put_cur(0,0);
 8000682:	2100      	movs	r1, #0
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff ff38 	bl	80004fa <lcd_put_cur>
	  lcd_send_string("Te quiero, Gabby");
 800068a:	4813      	ldr	r0, [pc, #76]	; (80006d8 <main+0xfc>)
 800068c:	f7ff ff91 	bl	80005b2 <lcd_send_string>
	  HAL_Delay(1000);
 8000690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000694:	f000 fc68 	bl	8000f68 <HAL_Delay>
	  lcd_put_cur(0,5);
 8000698:	2105      	movs	r1, #5
 800069a:	2000      	movs	r0, #0
 800069c:	f7ff ff2d 	bl	80004fa <lcd_put_cur>
	  lcd_send_string("");
 80006a0:	480e      	ldr	r0, [pc, #56]	; (80006dc <main+0x100>)
 80006a2:	f7ff ff86 	bl	80005b2 <lcd_send_string>
	  lcd_put_cur(1,0);
 80006a6:	2100      	movs	r1, #0
 80006a8:	2001      	movs	r0, #1
 80006aa:	f7ff ff26 	bl	80004fa <lcd_put_cur>
	  HAL_Delay(1000);
 80006ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b2:	f000 fc59 	bl	8000f68 <HAL_Delay>
	  lcd_send_string("");
 80006b6:	4809      	ldr	r0, [pc, #36]	; (80006dc <main+0x100>)
 80006b8:	f7ff ff7b 	bl	80005b2 <lcd_send_string>
	  HAL_Delay(1000);
 80006bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c0:	f000 fc52 	bl	8000f68 <HAL_Delay>
	  lcd_clear();
 80006c4:	f7ff ff02 	bl	80004cc <lcd_clear>
	  HAL_Delay(1000);
 80006c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006cc:	f000 fc4c 	bl	8000f68 <HAL_Delay>
	  lcd_put_cur(0,0);
 80006d0:	e7d7      	b.n	8000682 <main+0xa6>
 80006d2:	bf00      	nop
 80006d4:	58024400 	.word	0x58024400
 80006d8:	08005148 	.word	0x08005148
 80006dc:	0800515c 	.word	0x0800515c

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b09c      	sub	sp, #112	; 0x70
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ea:	224c      	movs	r2, #76	; 0x4c
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 fd16 	bl	8005120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	2220      	movs	r2, #32
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 fd10 	bl	8005120 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000700:	2004      	movs	r0, #4
 8000702:	f001 fed1 	bl	80024a8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000706:	2300      	movs	r3, #0
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	4b34      	ldr	r3, [pc, #208]	; (80007dc <SystemClock_Config+0xfc>)
 800070c:	699b      	ldr	r3, [r3, #24]
 800070e:	4a33      	ldr	r2, [pc, #204]	; (80007dc <SystemClock_Config+0xfc>)
 8000710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000714:	6193      	str	r3, [r2, #24]
 8000716:	4b31      	ldr	r3, [pc, #196]	; (80007dc <SystemClock_Config+0xfc>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	4b2f      	ldr	r3, [pc, #188]	; (80007e0 <SystemClock_Config+0x100>)
 8000722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000724:	4a2e      	ldr	r2, [pc, #184]	; (80007e0 <SystemClock_Config+0x100>)
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800072c:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <SystemClock_Config+0x100>)
 800072e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000730:	f003 0301 	and.w	r3, r3, #1
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000738:	bf00      	nop
 800073a:	4b28      	ldr	r3, [pc, #160]	; (80007dc <SystemClock_Config+0xfc>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000746:	d1f8      	bne.n	800073a <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000748:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <SystemClock_Config+0x104>)
 800074a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800074c:	f023 0303 	bic.w	r3, r3, #3
 8000750:	4a24      	ldr	r2, [pc, #144]	; (80007e4 <SystemClock_Config+0x104>)
 8000752:	f043 0302 	orr.w	r3, r3, #2
 8000756:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000758:	2301      	movs	r3, #1
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800075c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2302      	movs	r3, #2
 8000764:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000766:	2302      	movs	r3, #2
 8000768:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800076a:	2301      	movs	r3, #1
 800076c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800076e:	2378      	movs	r3, #120	; 0x78
 8000770:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800077e:	230c      	movs	r3, #12
 8000780:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000782:	2300      	movs	r3, #0
 8000784:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fef4 	bl	800257c <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800079a:	f000 f9cf 	bl	8000b3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	233f      	movs	r3, #63	; 0x3f
 80007a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2303      	movs	r3, #3
 80007a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007aa:	2308      	movs	r3, #8
 80007ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ae:	2340      	movs	r3, #64	; 0x40
 80007b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007b2:	2340      	movs	r3, #64	; 0x40
 80007b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ba:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007bc:	2340      	movs	r3, #64	; 0x40
 80007be:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2104      	movs	r1, #4
 80007c4:	4618      	mov	r0, r3
 80007c6:	f002 fae9 	bl	8002d9c <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80007d0:	f000 f9b4 	bl	8000b3c <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3770      	adds	r7, #112	; 0x70
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	58024800 	.word	0x58024800
 80007e0:	58000400 	.word	0x58000400
 80007e4:	58024400 	.word	0x58024400

080007e8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_I2C4_Init+0x74>)
 80007ee:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <MX_I2C4_Init+0x78>)
 80007f0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_I2C4_Init+0x74>)
 80007f4:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <MX_I2C4_Init+0x7c>)
 80007f6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_I2C4_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_I2C4_Init+0x74>)
 8000800:	2201      	movs	r2, #1
 8000802:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_I2C4_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_I2C4_Init+0x74>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_I2C4_Init+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_I2C4_Init+0x74>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_I2C4_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000822:	480e      	ldr	r0, [pc, #56]	; (800085c <MX_I2C4_Init+0x74>)
 8000824:	f000 fe92 	bl	800154c <HAL_I2C_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800082e:	f000 f985 	bl	8000b3c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000832:	2100      	movs	r1, #0
 8000834:	4809      	ldr	r0, [pc, #36]	; (800085c <MX_I2C4_Init+0x74>)
 8000836:	f001 fc57 	bl	80020e8 <HAL_I2CEx_ConfigAnalogFilter>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000840:	f000 f97c 	bl	8000b3c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000844:	2100      	movs	r1, #0
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_I2C4_Init+0x74>)
 8000848:	f001 fc99 	bl	800217e <HAL_I2CEx_ConfigDigitalFilter>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000852:	f000 f973 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2400002c 	.word	0x2400002c
 8000860:	58001c00 	.word	0x58001c00
 8000864:	307075b1 	.word	0x307075b1

08000868 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000886:	4b1e      	ldr	r3, [pc, #120]	; (8000900 <MX_TIM5_Init+0x98>)
 8000888:	4a1e      	ldr	r2, [pc, #120]	; (8000904 <MX_TIM5_Init+0x9c>)
 800088a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47999;
 800088c:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_TIM5_Init+0x98>)
 800088e:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000892:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_TIM5_Init+0x98>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_TIM5_Init+0x98>)
 800089c:	f241 3288 	movw	r2, #5000	; 0x1388
 80008a0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a2:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_TIM5_Init+0x98>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <MX_TIM5_Init+0x98>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80008ae:	4814      	ldr	r0, [pc, #80]	; (8000900 <MX_TIM5_Init+0x98>)
 80008b0:	f003 fe48 	bl	8004544 <HAL_TIM_Base_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80008ba:	f000 f93f 	bl	8000b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_TIM5_Init+0x98>)
 80008cc:	f003 fe92 	bl	80045f4 <HAL_TIM_ConfigClockSource>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80008d6:	f000 f931 	bl	8000b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4806      	ldr	r0, [pc, #24]	; (8000900 <MX_TIM5_Init+0x98>)
 80008e8:	f004 f8b0 	bl	8004a4c <HAL_TIMEx_MasterConfigSynchronization>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80008f2:	f000 f923 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	3720      	adds	r7, #32
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	24000480 	.word	0x24000480
 8000904:	40000c00 	.word	0x40000c00

08000908 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090e:	4a16      	ldr	r2, [pc, #88]	; (8000968 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000910:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000914:	2209      	movs	r2, #9
 8000916:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091a:	2202      	movs	r2, #2
 800091c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000926:	2202      	movs	r2, #2
 8000928:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092c:	2200      	movs	r2, #0
 800092e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000932:	2200      	movs	r2, #0
 8000934:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000938:	2200      	movs	r2, #0
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800093e:	2201      	movs	r2, #1
 8000940:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000944:	2201      	movs	r2, #1
 8000946:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800094a:	2200      	movs	r2, #0
 800094c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000950:	f001 fc61 	bl	8002216 <HAL_PCD_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800095a:	f000 f8ef 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	24000078 	.word	0x24000078
 8000968:	40080000 	.word	0x40080000

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_GPIO_Init+0x8c>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000978:	4a1f      	ldr	r2, [pc, #124]	; (80009f8 <MX_GPIO_Init+0x8c>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_GPIO_Init+0x8c>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	f003 0304 	and.w	r3, r3, #4
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_GPIO_Init+0x8c>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000996:	4a18      	ldr	r2, [pc, #96]	; (80009f8 <MX_GPIO_Init+0x8c>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800099c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_GPIO_Init+0x8c>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_GPIO_Init+0x8c>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	4a10      	ldr	r2, [pc, #64]	; (80009f8 <MX_GPIO_Init+0x8c>)
 80009b6:	f043 0320 	orr.w	r3, r3, #32
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_GPIO_Init+0x8c>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	f003 0320 	and.w	r3, r3, #32
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_GPIO_Init+0x8c>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	4a09      	ldr	r2, [pc, #36]	; (80009f8 <MX_GPIO_Init+0x8c>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_GPIO_Init+0x8c>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	683b      	ldr	r3, [r7, #0]

}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	58024400 	.word	0x58024400

080009fc <MPU6050_init>:

/* USER CODE BEGIN 4 */
void MPU6050_init(void){ /*CONFIGURA LOS VALORES DEL ACELERÓMETRO*/
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af04      	add	r7, sp, #16
	uint8_t check;     //almacenará valores provenientes del MPU6050.
	uint8_t data;      // enviará datos al MPU6050.
	HAL_I2C_Mem_Read(&hi2c4,MPU6050_ADDR,WHO_AM_I,1,&check,1,1000); //Lee la dirección del acelerómetro
 8000a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a06:	9302      	str	r3, [sp, #8]
 8000a08:	2301      	movs	r3, #1
 8000a0a:	9301      	str	r3, [sp, #4]
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	9300      	str	r3, [sp, #0]
 8000a10:	2301      	movs	r3, #1
 8000a12:	2275      	movs	r2, #117	; 0x75
 8000a14:	21d0      	movs	r1, #208	; 0xd0
 8000a16:	4823      	ldr	r0, [pc, #140]	; (8000aa4 <MPU6050_init+0xa8>)
 8000a18:	f001 f830 	bl	8001a7c <HAL_I2C_Mem_Read>
	if(check == 0x68){
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	2b68      	cmp	r3, #104	; 0x68
 8000a20:	d13b      	bne.n	8000a9a <MPU6050_init+0x9e>
		data = 0; //ASIGNA EL VALOR DE PWR_MGMT_1
 8000a22:	2300      	movs	r3, #0
 8000a24:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c4,MPU6050_ADDR,PWR_MGMT_1,1,&data,1,1000); //ENVIA PWR_MGMT_1
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	9302      	str	r3, [sp, #8]
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	9301      	str	r3, [sp, #4]
 8000a30:	1dbb      	adds	r3, r7, #6
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2301      	movs	r3, #1
 8000a36:	226b      	movs	r2, #107	; 0x6b
 8000a38:	21d0      	movs	r1, #208	; 0xd0
 8000a3a:	481a      	ldr	r0, [pc, #104]	; (8000aa4 <MPU6050_init+0xa8>)
 8000a3c:	f000 ff0a 	bl	8001854 <HAL_I2C_Mem_Write>
		data = 0b00000111; //ASIGNA EL VALOR DE SMPLRT_DIV
 8000a40:	2307      	movs	r3, #7
 8000a42:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c4,MPU6050_ADDR,SMPLRT_DIV,1,&data,1,1000); //ENVIA SMPLRT_DIV
 8000a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	9301      	str	r3, [sp, #4]
 8000a4e:	1dbb      	adds	r3, r7, #6
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2301      	movs	r3, #1
 8000a54:	2219      	movs	r2, #25
 8000a56:	21d0      	movs	r1, #208	; 0xd0
 8000a58:	4812      	ldr	r0, [pc, #72]	; (8000aa4 <MPU6050_init+0xa8>)
 8000a5a:	f000 fefb 	bl	8001854 <HAL_I2C_Mem_Write>
		data = 0; //ASIGNA EL VALOR DE  GYRO_CONFIG
 8000a5e:	2300      	movs	r3, #0
 8000a60:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c4,MPU6050_ADDR,GYRO_CONFIG,1,&data,1,1000); //ENVIA GYRO_CONFIG
 8000a62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a66:	9302      	str	r3, [sp, #8]
 8000a68:	2301      	movs	r3, #1
 8000a6a:	9301      	str	r3, [sp, #4]
 8000a6c:	1dbb      	adds	r3, r7, #6
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	2301      	movs	r3, #1
 8000a72:	221b      	movs	r2, #27
 8000a74:	21d0      	movs	r1, #208	; 0xd0
 8000a76:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <MPU6050_init+0xa8>)
 8000a78:	f000 feec 	bl	8001854 <HAL_I2C_Mem_Write>
		data = 0; //ASIGNA EL VALOR DE ACCEL_CONFIG
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c4,MPU6050_ADDR,ACCEL_CONFIG,1,&data,1,1000); //ENVIA ACCEL_CONFIG
 8000a80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a84:	9302      	str	r3, [sp, #8]
 8000a86:	2301      	movs	r3, #1
 8000a88:	9301      	str	r3, [sp, #4]
 8000a8a:	1dbb      	adds	r3, r7, #6
 8000a8c:	9300      	str	r3, [sp, #0]
 8000a8e:	2301      	movs	r3, #1
 8000a90:	221c      	movs	r2, #28
 8000a92:	21d0      	movs	r1, #208	; 0xd0
 8000a94:	4803      	ldr	r0, [pc, #12]	; (8000aa4 <MPU6050_init+0xa8>)
 8000a96:	f000 fedd 	bl	8001854 <HAL_I2C_Mem_Write>
	}
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	2400002c 	.word	0x2400002c

08000aa8 <MPU6050_READ_TEMP>:

float MPU6050_READ_TEMP(void){ /*LEE EL VALOR DE LA TEMPERATURA*/
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af04      	add	r7, sp, #16
	/*Temperature in degrees C = (TEMP_OUT Register Value as a signed quantity)/340 + 36.53*/
	uint8_t MEASURE_TEMP[2];  /* VECTOR DE VALORES MEDIDOS |TEMP_H|TEMP_L|*/
	HAL_I2C_Mem_Read(&hi2c4,MPU6050_ADDR,TEMP_OUT_H,1,&MEASURE_TEMP[0],1,1000); //GUARDA LA MEDDIDA EN M[0]
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	9302      	str	r3, [sp, #8]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	9301      	str	r3, [sp, #4]
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	9300      	str	r3, [sp, #0]
 8000abc:	2301      	movs	r3, #1
 8000abe:	2241      	movs	r2, #65	; 0x41
 8000ac0:	21d0      	movs	r1, #208	; 0xd0
 8000ac2:	481d      	ldr	r0, [pc, #116]	; (8000b38 <MPU6050_READ_TEMP+0x90>)
 8000ac4:	f000 ffda 	bl	8001a7c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c4,MPU6050_ADDR,TEMP_OUT_L,1,&MEASURE_TEMP[1],1,1000); //GUARDA LA MEDDIDA EN M[1]
 8000ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000acc:	9302      	str	r3, [sp, #8]
 8000ace:	2301      	movs	r3, #1
 8000ad0:	9301      	str	r3, [sp, #4]
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	2242      	movs	r2, #66	; 0x42
 8000adc:	21d0      	movs	r1, #208	; 0xd0
 8000ade:	4816      	ldr	r0, [pc, #88]	; (8000b38 <MPU6050_READ_TEMP+0x90>)
 8000ae0:	f000 ffcc 	bl	8001a7c <HAL_I2C_Mem_Read>

	int16_t TEMP_RAW = (int16_t)(MEASURE_TEMP[0] << 8 | MEASURE_TEMP[1]); /*JUNTA LOS DATOS EN UN ESPACIO DE MEMORIA DE 16 BITS (TEMP_RAW)*/
 8000ae4:	793b      	ldrb	r3, [r7, #4]
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	797b      	ldrb	r3, [r7, #5]
 8000aec:	b21b      	sxth	r3, r3
 8000aee:	4313      	orrs	r3, r2
 8000af0:	81fb      	strh	r3, [r7, #14]
	float TEMP = (TEMP_RAW/340.0) +36.53; /*TEMPERATURA EN C*/
 8000af2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000af6:	ee07 3a90 	vmov	s15, r3
 8000afa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000afe:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 8000b28 <MPU6050_READ_TEMP+0x80>
 8000b02:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b06:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8000b30 <MPU6050_READ_TEMP+0x88>
 8000b0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000b0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b12:	edc7 7a02 	vstr	s15, [r7, #8]
	return TEMP;
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	ee07 3a90 	vmov	s15, r3
}
 8000b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	00000000 	.word	0x00000000
 8000b2c:	40754000 	.word	0x40754000
 8000b30:	0a3d70a4 	.word	0x0a3d70a4
 8000b34:	404243d7 	.word	0x404243d7
 8000b38:	2400002c 	.word	0x2400002c

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <HAL_MspInit+0x30>)
 8000b50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b54:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x30>)
 8000b56:	f043 0302 	orr.w	r3, r3, #2
 8000b5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x30>)
 8000b60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	58024400 	.word	0x58024400

08000b7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b0b8      	sub	sp, #224	; 0xe0
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	22bc      	movs	r2, #188	; 0xbc
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f004 fabf 	bl	8005120 <memset>
  if(hi2c->Instance==I2C4)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a25      	ldr	r2, [pc, #148]	; (8000c3c <HAL_I2C_MspInit+0xc0>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d142      	bne.n	8000c32 <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000bac:	2310      	movs	r3, #16
 8000bae:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fc1e 	bl	80033fc <HAL_RCCEx_PeriphCLKConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bc6:	f7ff ffb9 	bl	8000b3c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bca:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <HAL_I2C_MspInit+0xc4>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <HAL_I2C_MspInit+0xc4>)
 8000bd2:	f043 0320 	orr.w	r3, r3, #32
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_I2C_MspInit+0xc4>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be0:	f003 0320 	and.w	r3, r3, #32
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000be8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000bec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf0:	2312      	movs	r3, #18
 8000bf2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000c02:	2304      	movs	r3, #4
 8000c04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480d      	ldr	r0, [pc, #52]	; (8000c44 <HAL_I2C_MspInit+0xc8>)
 8000c10:	f000 fabe 	bl	8001190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_I2C_MspInit+0xc4>)
 8000c16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c1a:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <HAL_I2C_MspInit+0xc4>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_I2C_MspInit+0xc4>)
 8000c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2e:	60bb      	str	r3, [r7, #8]
 8000c30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	37e0      	adds	r7, #224	; 0xe0
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	58001c00 	.word	0x58001c00
 8000c40:	58024400 	.word	0x58024400
 8000c44:	58021400 	.word	0x58021400

08000c48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <HAL_TIM_Base_MspInit+0x3c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d10e      	bne.n	8000c78 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <HAL_TIM_Base_MspInit+0x40>)
 8000c5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c60:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <HAL_TIM_Base_MspInit+0x40>)
 8000c62:	f043 0308 	orr.w	r3, r3, #8
 8000c66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <HAL_TIM_Base_MspInit+0x40>)
 8000c6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c70:	f003 0308 	and.w	r3, r3, #8
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	40000c00 	.word	0x40000c00
 8000c88:	58024400 	.word	0x58024400

08000c8c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0b8      	sub	sp, #224	; 0xe0
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	22bc      	movs	r2, #188	; 0xbc
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f004 fa37 	bl	8005120 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a36      	ldr	r2, [pc, #216]	; (8000d90 <HAL_PCD_MspInit+0x104>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d165      	bne.n	8000d88 <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000cbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000cc0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000cc6:	2318      	movs	r3, #24
 8000cc8:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000cd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cda:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000ce0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ce4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 fb85 	bl	80033fc <HAL_RCCEx_PeriphCLKConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000cf8:	f7ff ff20 	bl	8000b3c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000cfc:	f001 fc2e 	bl	800255c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <HAL_PCD_MspInit+0x108>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	4a23      	ldr	r2, [pc, #140]	; (8000d94 <HAL_PCD_MspInit+0x108>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d10:	4b20      	ldr	r3, [pc, #128]	; (8000d94 <HAL_PCD_MspInit+0x108>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d1e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d22:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d38:	230a      	movs	r3, #10
 8000d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d42:	4619      	mov	r1, r3
 8000d44:	4814      	ldr	r0, [pc, #80]	; (8000d98 <HAL_PCD_MspInit+0x10c>)
 8000d46:	f000 fa23 	bl	8001190 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d62:	4619      	mov	r1, r3
 8000d64:	480c      	ldr	r0, [pc, #48]	; (8000d98 <HAL_PCD_MspInit+0x10c>)
 8000d66:	f000 fa13 	bl	8001190 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_PCD_MspInit+0x108>)
 8000d6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d70:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_PCD_MspInit+0x108>)
 8000d72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_PCD_MspInit+0x108>)
 8000d7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000d88:	bf00      	nop
 8000d8a:	37e0      	adds	r7, #224	; 0xe0
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40080000 	.word	0x40080000
 8000d94:	58024400 	.word	0x58024400
 8000d98:	58020000 	.word	0x58020000

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <NMI_Handler+0x4>

08000da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>

08000dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 f89e 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000df4:	f7ff fa70 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dfa:	490d      	ldr	r1, [pc, #52]	; (8000e30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dfc:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e00:	e002      	b.n	8000e08 <LoopCopyDataInit>

08000e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e06:	3304      	adds	r3, #4

08000e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e0c:	d3f9      	bcc.n	8000e02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e10:	4c0a      	ldr	r4, [pc, #40]	; (8000e3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e14:	e001      	b.n	8000e1a <LoopFillZerobss>

08000e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e18:	3204      	adds	r2, #4

08000e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e1c:	d3fb      	bcc.n	8000e16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f004 f95b 	bl	80050d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fbdb 	bl	80005dc <main>
  bx  lr
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e30:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000e34:	08005178 	.word	0x08005178
  ldr r2, =_sbss
 8000e38:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000e3c:	240004e0 	.word	0x240004e0

08000e40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC3_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4a:	2003      	movs	r0, #3
 8000e4c:	f000 f96e 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e50:	f002 f95a 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 8000e54:	4602      	mov	r2, r0
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_Init+0x68>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	0a1b      	lsrs	r3, r3, #8
 8000e5c:	f003 030f 	and.w	r3, r3, #15
 8000e60:	4913      	ldr	r1, [pc, #76]	; (8000eb0 <HAL_Init+0x6c>)
 8000e62:	5ccb      	ldrb	r3, [r1, r3]
 8000e64:	f003 031f 	and.w	r3, r3, #31
 8000e68:	fa22 f303 	lsr.w	r3, r2, r3
 8000e6c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_Init+0x68>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	4a0e      	ldr	r2, [pc, #56]	; (8000eb0 <HAL_Init+0x6c>)
 8000e78:	5cd3      	ldrb	r3, [r2, r3]
 8000e7a:	f003 031f 	and.w	r3, r3, #31
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	fa22 f303 	lsr.w	r3, r2, r3
 8000e84:	4a0b      	ldr	r2, [pc, #44]	; (8000eb4 <HAL_Init+0x70>)
 8000e86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e88:	4a0b      	ldr	r2, [pc, #44]	; (8000eb8 <HAL_Init+0x74>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8e:	2000      	movs	r0, #0
 8000e90:	f000 f814 	bl	8000ebc <HAL_InitTick>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e002      	b.n	8000ea4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9e:	f7ff fe53 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	58024400 	.word	0x58024400
 8000eb0:	08005160 	.word	0x08005160
 8000eb4:	24000004 	.word	0x24000004
 8000eb8:	24000000 	.word	0x24000000

08000ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <HAL_InitTick+0x60>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e021      	b.n	8000f14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <HAL_InitTick+0x64>)
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <HAL_InitTick+0x60>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f945 	bl	8001176 <HAL_SYSTICK_Config>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e00e      	b.n	8000f14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2b0f      	cmp	r3, #15
 8000efa:	d80a      	bhi.n	8000f12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efc:	2200      	movs	r2, #0
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	f04f 30ff 	mov.w	r0, #4294967295
 8000f04:	f000 f91d 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_InitTick+0x68>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	e000      	b.n	8000f14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2400000c 	.word	0x2400000c
 8000f20:	24000000 	.word	0x24000000
 8000f24:	24000008 	.word	0x24000008

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	2400000c 	.word	0x2400000c
 8000f4c:	240004dc 	.word	0x240004dc

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	240004dc 	.word	0x240004dc

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f70:	f7ff ffee 	bl	8000f50 <HAL_GetTick>
 8000f74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f80:	d005      	beq.n	8000f8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_Delay+0x44>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f8e:	bf00      	nop
 8000f90:	f7ff ffde 	bl	8000f50 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	68fa      	ldr	r2, [r7, #12]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d8f7      	bhi.n	8000f90 <HAL_Delay+0x28>
  {
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	2400000c 	.word	0x2400000c

08000fb0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fb4:	4b03      	ldr	r3, [pc, #12]	; (8000fc4 <HAL_GetREVID+0x14>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	0c1b      	lsrs	r3, r3, #16
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	5c001000 	.word	0x5c001000

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <__NVIC_SetPriorityGrouping+0x40>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00
 800100c:	05fa0000 	.word	0x05fa0000

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db0a      	blt.n	8001056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	490c      	ldr	r1, [pc, #48]	; (8001078 <__NVIC_SetPriority+0x4c>)
 8001046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104a:	0112      	lsls	r2, r2, #4
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	440b      	add	r3, r1
 8001050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001054:	e00a      	b.n	800106c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4908      	ldr	r1, [pc, #32]	; (800107c <__NVIC_SetPriority+0x50>)
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	f003 030f 	and.w	r3, r3, #15
 8001062:	3b04      	subs	r3, #4
 8001064:	0112      	lsls	r2, r2, #4
 8001066:	b2d2      	uxtb	r2, r2
 8001068:	440b      	add	r3, r1
 800106a:	761a      	strb	r2, [r3, #24]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	e000e100 	.word	0xe000e100
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001080:	b480      	push	{r7}
 8001082:	b089      	sub	sp, #36	; 0x24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f1c3 0307 	rsb	r3, r3, #7
 800109a:	2b04      	cmp	r3, #4
 800109c:	bf28      	it	cs
 800109e:	2304      	movcs	r3, #4
 80010a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	3304      	adds	r3, #4
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d902      	bls.n	80010b0 <NVIC_EncodePriority+0x30>
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	3b03      	subs	r3, #3
 80010ae:	e000      	b.n	80010b2 <NVIC_EncodePriority+0x32>
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	401a      	ands	r2, r3
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010c8:	f04f 31ff 	mov.w	r1, #4294967295
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa01 f303 	lsl.w	r3, r1, r3
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d8:	4313      	orrs	r3, r2
         );
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
	...

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	; (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff8e 	bl	800102c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff47 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001150:	f7ff ff5e 	bl	8001010 <__NVIC_GetPriorityGrouping>
 8001154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	68b9      	ldr	r1, [r7, #8]
 800115a:	6978      	ldr	r0, [r7, #20]
 800115c:	f7ff ff90 	bl	8001080 <NVIC_EncodePriority>
 8001160:	4602      	mov	r2, r0
 8001162:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff5f 	bl	800102c <__NVIC_SetPriority>
}
 800116e:	bf00      	nop
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ffb2 	bl	80010e8 <SysTick_Config>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800119e:	4b89      	ldr	r3, [pc, #548]	; (80013c4 <HAL_GPIO_Init+0x234>)
 80011a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011a2:	e194      	b.n	80014ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa01 f303 	lsl.w	r3, r1, r3
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	f000 8186 	beq.w	80014c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d00b      	beq.n	80011dc <HAL_GPIO_Init+0x4c>
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d007      	beq.n	80011dc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d0:	2b11      	cmp	r3, #17
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b12      	cmp	r3, #18
 80011da:	d130      	bne.n	800123e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68da      	ldr	r2, [r3, #12]
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001212:	2201      	movs	r2, #1
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	091b      	lsrs	r3, r3, #4
 8001228:	f003 0201 	and.w	r2, r3, #1
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4313      	orrs	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	689a      	ldr	r2, [r3, #8]
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4313      	orrs	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0xee>
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b12      	cmp	r3, #18
 800127c:	d123      	bne.n	80012c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	08da      	lsrs	r2, r3, #3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3208      	adds	r2, #8
 8001286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0307 	and.w	r3, r3, #7
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	220f      	movs	r2, #15
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	691a      	ldr	r2, [r3, #16]
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f003 0307 	and.w	r3, r3, #7
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	08da      	lsrs	r2, r3, #3
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3208      	adds	r2, #8
 80012c0:	69b9      	ldr	r1, [r7, #24]
 80012c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	2203      	movs	r2, #3
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0203 	and.w	r2, r3, #3
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 80e0 	beq.w	80014c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001308:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <HAL_GPIO_Init+0x238>)
 800130a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800130e:	4a2e      	ldr	r2, [pc, #184]	; (80013c8 <HAL_GPIO_Init+0x238>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <HAL_GPIO_Init+0x238>)
 800131a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001326:	4a29      	ldr	r2, [pc, #164]	; (80013cc <HAL_GPIO_Init+0x23c>)
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	089b      	lsrs	r3, r3, #2
 800132c:	3302      	adds	r3, #2
 800132e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	220f      	movs	r2, #15
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a20      	ldr	r2, [pc, #128]	; (80013d0 <HAL_GPIO_Init+0x240>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d052      	beq.n	80013f8 <HAL_GPIO_Init+0x268>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a1f      	ldr	r2, [pc, #124]	; (80013d4 <HAL_GPIO_Init+0x244>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d031      	beq.n	80013be <HAL_GPIO_Init+0x22e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a1e      	ldr	r2, [pc, #120]	; (80013d8 <HAL_GPIO_Init+0x248>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d02b      	beq.n	80013ba <HAL_GPIO_Init+0x22a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_GPIO_Init+0x24c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d025      	beq.n	80013b6 <HAL_GPIO_Init+0x226>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a1c      	ldr	r2, [pc, #112]	; (80013e0 <HAL_GPIO_Init+0x250>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d01f      	beq.n	80013b2 <HAL_GPIO_Init+0x222>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a1b      	ldr	r2, [pc, #108]	; (80013e4 <HAL_GPIO_Init+0x254>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d019      	beq.n	80013ae <HAL_GPIO_Init+0x21e>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a1a      	ldr	r2, [pc, #104]	; (80013e8 <HAL_GPIO_Init+0x258>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d013      	beq.n	80013aa <HAL_GPIO_Init+0x21a>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a19      	ldr	r2, [pc, #100]	; (80013ec <HAL_GPIO_Init+0x25c>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d00d      	beq.n	80013a6 <HAL_GPIO_Init+0x216>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <HAL_GPIO_Init+0x260>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d007      	beq.n	80013a2 <HAL_GPIO_Init+0x212>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a17      	ldr	r2, [pc, #92]	; (80013f4 <HAL_GPIO_Init+0x264>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d101      	bne.n	800139e <HAL_GPIO_Init+0x20e>
 800139a:	2309      	movs	r3, #9
 800139c:	e02d      	b.n	80013fa <HAL_GPIO_Init+0x26a>
 800139e:	230a      	movs	r3, #10
 80013a0:	e02b      	b.n	80013fa <HAL_GPIO_Init+0x26a>
 80013a2:	2308      	movs	r3, #8
 80013a4:	e029      	b.n	80013fa <HAL_GPIO_Init+0x26a>
 80013a6:	2307      	movs	r3, #7
 80013a8:	e027      	b.n	80013fa <HAL_GPIO_Init+0x26a>
 80013aa:	2306      	movs	r3, #6
 80013ac:	e025      	b.n	80013fa <HAL_GPIO_Init+0x26a>
 80013ae:	2305      	movs	r3, #5
 80013b0:	e023      	b.n	80013fa <HAL_GPIO_Init+0x26a>
 80013b2:	2304      	movs	r3, #4
 80013b4:	e021      	b.n	80013fa <HAL_GPIO_Init+0x26a>
 80013b6:	2303      	movs	r3, #3
 80013b8:	e01f      	b.n	80013fa <HAL_GPIO_Init+0x26a>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e01d      	b.n	80013fa <HAL_GPIO_Init+0x26a>
 80013be:	2301      	movs	r3, #1
 80013c0:	e01b      	b.n	80013fa <HAL_GPIO_Init+0x26a>
 80013c2:	bf00      	nop
 80013c4:	58000080 	.word	0x58000080
 80013c8:	58024400 	.word	0x58024400
 80013cc:	58000400 	.word	0x58000400
 80013d0:	58020000 	.word	0x58020000
 80013d4:	58020400 	.word	0x58020400
 80013d8:	58020800 	.word	0x58020800
 80013dc:	58020c00 	.word	0x58020c00
 80013e0:	58021000 	.word	0x58021000
 80013e4:	58021400 	.word	0x58021400
 80013e8:	58021800 	.word	0x58021800
 80013ec:	58021c00 	.word	0x58021c00
 80013f0:	58022000 	.word	0x58022000
 80013f4:	58022400 	.word	0x58022400
 80013f8:	2300      	movs	r3, #0
 80013fa:	69fa      	ldr	r2, [r7, #28]
 80013fc:	f002 0203 	and.w	r2, r2, #3
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	4093      	lsls	r3, r2
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140a:	4938      	ldr	r1, [pc, #224]	; (80014ec <HAL_GPIO_Init+0x35c>)
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	3302      	adds	r3, #2
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800146c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001492:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800149a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	4313      	orrs	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80014c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	3301      	adds	r3, #1
 80014cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa22 f303 	lsr.w	r3, r2, r3
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f47f ae63 	bne.w	80011a4 <HAL_GPIO_Init+0x14>
  }
}
 80014de:	bf00      	nop
 80014e0:	bf00      	nop
 80014e2:	3724      	adds	r7, #36	; 0x24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	58000400 	.word	0x58000400

080014f0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80014f8:	4a08      	ldr	r2, [pc, #32]	; (800151c <HAL_HSEM_FastTake+0x2c>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3320      	adds	r3, #32
 80014fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001502:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_HSEM_FastTake+0x30>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d101      	bne.n	800150c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001508:	2300      	movs	r3, #0
 800150a:	e000      	b.n	800150e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	58026400 	.word	0x58026400
 8001520:	80000300 	.word	0x80000300

08001524 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800152e:	4906      	ldr	r1, [pc, #24]	; (8001548 <HAL_HSEM_Release+0x24>)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	58026400 	.word	0x58026400

0800154c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e07f      	b.n	800165e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001564:	b2db      	uxtb	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d106      	bne.n	8001578 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff fb02 	bl	8000b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2224      	movs	r2, #36	; 0x24
 800157c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0201 	bic.w	r2, r2, #1
 800158e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800159c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d107      	bne.n	80015c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	e006      	b.n	80015d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689a      	ldr	r2, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d104      	bne.n	80015e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6859      	ldr	r1, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <HAL_I2C_Init+0x11c>)
 80015f2:	430b      	orrs	r3, r1
 80015f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001604:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691a      	ldr	r2, [r3, #16]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	ea42 0103 	orr.w	r1, r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	021a      	lsls	r2, r3, #8
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	69d9      	ldr	r1, [r3, #28]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1a      	ldr	r2, [r3, #32]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0201 	orr.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2220      	movs	r2, #32
 800164a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800165c:	2300      	movs	r3, #0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	02008000 	.word	0x02008000

0800166c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af02      	add	r7, sp, #8
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	461a      	mov	r2, r3
 8001678:	460b      	mov	r3, r1
 800167a:	817b      	strh	r3, [r7, #10]
 800167c:	4613      	mov	r3, r2
 800167e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b20      	cmp	r3, #32
 800168a:	f040 80da 	bne.w	8001842 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001694:	2b01      	cmp	r3, #1
 8001696:	d101      	bne.n	800169c <HAL_I2C_Master_Transmit+0x30>
 8001698:	2302      	movs	r3, #2
 800169a:	e0d3      	b.n	8001844 <HAL_I2C_Master_Transmit+0x1d8>
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016a4:	f7ff fc54 	bl	8000f50 <HAL_GetTick>
 80016a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2319      	movs	r3, #25
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fbc6 	bl	8001e48 <I2C_WaitOnFlagUntilTimeout>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e0be      	b.n	8001844 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2221      	movs	r2, #33	; 0x21
 80016ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2210      	movs	r2, #16
 80016d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	893a      	ldrh	r2, [r7, #8]
 80016e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	2bff      	cmp	r3, #255	; 0xff
 80016f6:	d90e      	bls.n	8001716 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	22ff      	movs	r2, #255	; 0xff
 80016fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001702:	b2da      	uxtb	r2, r3
 8001704:	8979      	ldrh	r1, [r7, #10]
 8001706:	4b51      	ldr	r3, [pc, #324]	; (800184c <HAL_I2C_Master_Transmit+0x1e0>)
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 fcbc 	bl	800208c <I2C_TransferConfig>
 8001714:	e06c      	b.n	80017f0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800171a:	b29a      	uxth	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001724:	b2da      	uxtb	r2, r3
 8001726:	8979      	ldrh	r1, [r7, #10]
 8001728:	4b48      	ldr	r3, [pc, #288]	; (800184c <HAL_I2C_Master_Transmit+0x1e0>)
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 fcab 	bl	800208c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001736:	e05b      	b.n	80017f0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	6a39      	ldr	r1, [r7, #32]
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f000 fbc3 	bl	8001ec8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e07b      	b.n	8001844 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001766:	b29b      	uxth	r3, r3
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001774:	3b01      	subs	r3, #1
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001780:	b29b      	uxth	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d034      	beq.n	80017f0 <HAL_I2C_Master_Transmit+0x184>
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178a:	2b00      	cmp	r3, #0
 800178c:	d130      	bne.n	80017f0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	6a3b      	ldr	r3, [r7, #32]
 8001794:	2200      	movs	r2, #0
 8001796:	2180      	movs	r1, #128	; 0x80
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f000 fb55 	bl	8001e48 <I2C_WaitOnFlagUntilTimeout>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e04d      	b.n	8001844 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	2bff      	cmp	r3, #255	; 0xff
 80017b0:	d90e      	bls.n	80017d0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	22ff      	movs	r2, #255	; 0xff
 80017b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	8979      	ldrh	r1, [r7, #10]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f000 fc5f 	bl	800208c <I2C_TransferConfig>
 80017ce:	e00f      	b.n	80017f0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	8979      	ldrh	r1, [r7, #10]
 80017e2:	2300      	movs	r3, #0
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 fc4e 	bl	800208c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d19e      	bne.n	8001738 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	6a39      	ldr	r1, [r7, #32]
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 fba2 	bl	8001f48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e01a      	b.n	8001844 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2220      	movs	r2, #32
 8001814:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6859      	ldr	r1, [r3, #4]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <HAL_I2C_Master_Transmit+0x1e4>)
 8001822:	400b      	ands	r3, r1
 8001824:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2220      	movs	r2, #32
 800182a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2200      	movs	r2, #0
 800183a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001842:	2302      	movs	r3, #2
  }
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	80002000 	.word	0x80002000
 8001850:	fe00e800 	.word	0xfe00e800

08001854 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af02      	add	r7, sp, #8
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	4608      	mov	r0, r1
 800185e:	4611      	mov	r1, r2
 8001860:	461a      	mov	r2, r3
 8001862:	4603      	mov	r3, r0
 8001864:	817b      	strh	r3, [r7, #10]
 8001866:	460b      	mov	r3, r1
 8001868:	813b      	strh	r3, [r7, #8]
 800186a:	4613      	mov	r3, r2
 800186c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b20      	cmp	r3, #32
 8001878:	f040 80f9 	bne.w	8001a6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800187c:	6a3b      	ldr	r3, [r7, #32]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <HAL_I2C_Mem_Write+0x34>
 8001882:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800188e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e0ed      	b.n	8001a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_I2C_Mem_Write+0x4e>
 800189e:	2302      	movs	r3, #2
 80018a0:	e0e6      	b.n	8001a70 <HAL_I2C_Mem_Write+0x21c>
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018aa:	f7ff fb51 	bl	8000f50 <HAL_GetTick>
 80018ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2319      	movs	r3, #25
 80018b6:	2201      	movs	r2, #1
 80018b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f000 fac3 	bl	8001e48 <I2C_WaitOnFlagUntilTimeout>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0d1      	b.n	8001a70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2221      	movs	r2, #33	; 0x21
 80018d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2240      	movs	r2, #64	; 0x40
 80018d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6a3a      	ldr	r2, [r7, #32]
 80018e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018f4:	88f8      	ldrh	r0, [r7, #6]
 80018f6:	893a      	ldrh	r2, [r7, #8]
 80018f8:	8979      	ldrh	r1, [r7, #10]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	4603      	mov	r3, r0
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 f9d3 	bl	8001cb0 <I2C_RequestMemoryWrite>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0a9      	b.n	8001a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001920:	b29b      	uxth	r3, r3
 8001922:	2bff      	cmp	r3, #255	; 0xff
 8001924:	d90e      	bls.n	8001944 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	22ff      	movs	r2, #255	; 0xff
 800192a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001930:	b2da      	uxtb	r2, r3
 8001932:	8979      	ldrh	r1, [r7, #10]
 8001934:	2300      	movs	r3, #0
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 fba5 	bl	800208c <I2C_TransferConfig>
 8001942:	e00f      	b.n	8001964 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001948:	b29a      	uxth	r2, r3
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001952:	b2da      	uxtb	r2, r3
 8001954:	8979      	ldrh	r1, [r7, #10]
 8001956:	2300      	movs	r3, #0
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 fb94 	bl	800208c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001964:	697a      	ldr	r2, [r7, #20]
 8001966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	f000 faad 	bl	8001ec8 <I2C_WaitOnTXISFlagUntilTimeout>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e07b      	b.n	8001a70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001992:	b29b      	uxth	r3, r3
 8001994:	3b01      	subs	r3, #1
 8001996:	b29a      	uxth	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d034      	beq.n	8001a1c <HAL_I2C_Mem_Write+0x1c8>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d130      	bne.n	8001a1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019c0:	2200      	movs	r2, #0
 80019c2:	2180      	movs	r1, #128	; 0x80
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 fa3f 	bl	8001e48 <I2C_WaitOnFlagUntilTimeout>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e04d      	b.n	8001a70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d8:	b29b      	uxth	r3, r3
 80019da:	2bff      	cmp	r3, #255	; 0xff
 80019dc:	d90e      	bls.n	80019fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	22ff      	movs	r2, #255	; 0xff
 80019e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	8979      	ldrh	r1, [r7, #10]
 80019ec:	2300      	movs	r3, #0
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 fb49 	bl	800208c <I2C_TransferConfig>
 80019fa:	e00f      	b.n	8001a1c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	8979      	ldrh	r1, [r7, #10]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 fb38 	bl	800208c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d19e      	bne.n	8001964 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 fa8c 	bl	8001f48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e01a      	b.n	8001a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_I2C_Mem_Write+0x224>)
 8001a4e:	400b      	ands	r3, r1
 8001a50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2220      	movs	r2, #32
 8001a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001a6e:	2302      	movs	r3, #2
  }
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	fe00e800 	.word	0xfe00e800

08001a7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af02      	add	r7, sp, #8
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	4608      	mov	r0, r1
 8001a86:	4611      	mov	r1, r2
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	817b      	strh	r3, [r7, #10]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	813b      	strh	r3, [r7, #8]
 8001a92:	4613      	mov	r3, r2
 8001a94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	f040 80fd 	bne.w	8001c9e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <HAL_I2C_Mem_Read+0x34>
 8001aaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d105      	bne.n	8001abc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0f1      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_I2C_Mem_Read+0x4e>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e0ea      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x224>
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ad2:	f7ff fa3d 	bl	8000f50 <HAL_GetTick>
 8001ad6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2319      	movs	r3, #25
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f9af 	bl	8001e48 <I2C_WaitOnFlagUntilTimeout>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e0d5      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2222      	movs	r2, #34	; 0x22
 8001af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2240      	movs	r2, #64	; 0x40
 8001b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b1c:	88f8      	ldrh	r0, [r7, #6]
 8001b1e:	893a      	ldrh	r2, [r7, #8]
 8001b20:	8979      	ldrh	r1, [r7, #10]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 f913 	bl	8001d58 <I2C_RequestMemoryRead>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0ad      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2bff      	cmp	r3, #255	; 0xff
 8001b4c:	d90e      	bls.n	8001b6c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	22ff      	movs	r2, #255	; 0xff
 8001b52:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	8979      	ldrh	r1, [r7, #10]
 8001b5c:	4b52      	ldr	r3, [pc, #328]	; (8001ca8 <HAL_I2C_Mem_Read+0x22c>)
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 fa91 	bl	800208c <I2C_TransferConfig>
 8001b6a:	e00f      	b.n	8001b8c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	8979      	ldrh	r1, [r7, #10]
 8001b7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ca8 <HAL_I2C_Mem_Read+0x22c>)
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f000 fa80 	bl	800208c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b92:	2200      	movs	r2, #0
 8001b94:	2104      	movs	r1, #4
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 f956 	bl	8001e48 <I2C_WaitOnFlagUntilTimeout>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e07c      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d034      	beq.n	8001c4c <HAL_I2C_Mem_Read+0x1d0>
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d130      	bne.n	8001c4c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2180      	movs	r1, #128	; 0x80
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f927 	bl	8001e48 <I2C_WaitOnFlagUntilTimeout>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e04d      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2bff      	cmp	r3, #255	; 0xff
 8001c0c:	d90e      	bls.n	8001c2c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	22ff      	movs	r2, #255	; 0xff
 8001c12:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	8979      	ldrh	r1, [r7, #10]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f000 fa31 	bl	800208c <I2C_TransferConfig>
 8001c2a:	e00f      	b.n	8001c4c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	8979      	ldrh	r1, [r7, #10]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	f000 fa20 	bl	800208c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d19a      	bne.n	8001b8c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c5a:	68f8      	ldr	r0, [r7, #12]
 8001c5c:	f000 f974 	bl	8001f48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e01a      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6859      	ldr	r1, [r3, #4]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <HAL_I2C_Mem_Read+0x230>)
 8001c7e:	400b      	ands	r3, r1
 8001c80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2220      	movs	r2, #32
 8001c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e000      	b.n	8001ca0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001c9e:	2302      	movs	r3, #2
  }
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	80002400 	.word	0x80002400
 8001cac:	fe00e800 	.word	0xfe00e800

08001cb0 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	4608      	mov	r0, r1
 8001cba:	4611      	mov	r1, r2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	817b      	strh	r3, [r7, #10]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	813b      	strh	r3, [r7, #8]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	8979      	ldrh	r1, [r7, #10]
 8001cd0:	4b20      	ldr	r3, [pc, #128]	; (8001d54 <I2C_RequestMemoryWrite+0xa4>)
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 f9d7 	bl	800208c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cde:	69fa      	ldr	r2, [r7, #28]
 8001ce0:	69b9      	ldr	r1, [r7, #24]
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 f8f0 	bl	8001ec8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e02c      	b.n	8001d4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d105      	bne.n	8001d04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cf8:	893b      	ldrh	r3, [r7, #8]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	629a      	str	r2, [r3, #40]	; 0x28
 8001d02:	e015      	b.n	8001d30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d04:	893b      	ldrh	r3, [r7, #8]
 8001d06:	0a1b      	lsrs	r3, r3, #8
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	69b9      	ldr	r1, [r7, #24]
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f8d6 	bl	8001ec8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e012      	b.n	8001d4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d26:	893b      	ldrh	r3, [r7, #8]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	2200      	movs	r2, #0
 8001d38:	2180      	movs	r1, #128	; 0x80
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f000 f884 	bl	8001e48 <I2C_WaitOnFlagUntilTimeout>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e000      	b.n	8001d4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	80002000 	.word	0x80002000

08001d58 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	4608      	mov	r0, r1
 8001d62:	4611      	mov	r1, r2
 8001d64:	461a      	mov	r2, r3
 8001d66:	4603      	mov	r3, r0
 8001d68:	817b      	strh	r3, [r7, #10]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	813b      	strh	r3, [r7, #8]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	8979      	ldrh	r1, [r7, #10]
 8001d78:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <I2C_RequestMemoryRead+0xa4>)
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 f984 	bl	800208c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	69b9      	ldr	r1, [r7, #24]
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 f89d 	bl	8001ec8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e02c      	b.n	8001df2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d105      	bne.n	8001daa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d9e:	893b      	ldrh	r3, [r7, #8]
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	629a      	str	r2, [r3, #40]	; 0x28
 8001da8:	e015      	b.n	8001dd6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001daa:	893b      	ldrh	r3, [r7, #8]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	69b9      	ldr	r1, [r7, #24]
 8001dbc:	68f8      	ldr	r0, [r7, #12]
 8001dbe:	f000 f883 	bl	8001ec8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e012      	b.n	8001df2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dcc:	893b      	ldrh	r3, [r7, #8]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2140      	movs	r1, #64	; 0x40
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f000 f831 	bl	8001e48 <I2C_WaitOnFlagUntilTimeout>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e000      	b.n	8001df2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	80002000 	.word	0x80002000

08001e00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d103      	bne.n	8001e1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d007      	beq.n	8001e3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	619a      	str	r2, [r3, #24]
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	4613      	mov	r3, r2
 8001e56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e58:	e022      	b.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e60:	d01e      	beq.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e62:	f7ff f875 	bl	8000f50 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d302      	bcc.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d113      	bne.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7c:	f043 0220 	orr.w	r2, r3, #32
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e00f      	b.n	8001ec0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d0cd      	beq.n	8001e5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ed4:	e02c      	b.n	8001f30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	68b9      	ldr	r1, [r7, #8]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f870 	bl	8001fc0 <I2C_IsAcknowledgeFailed>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e02a      	b.n	8001f40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d01e      	beq.n	8001f30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef2:	f7ff f82d 	bl	8000f50 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d302      	bcc.n	8001f08 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d113      	bne.n	8001f30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0c:	f043 0220 	orr.w	r2, r3, #32
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2220      	movs	r2, #32
 8001f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e007      	b.n	8001f40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d1cb      	bne.n	8001ed6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f3e:	2300      	movs	r3, #0
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f54:	e028      	b.n	8001fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f000 f830 	bl	8001fc0 <I2C_IsAcknowledgeFailed>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e026      	b.n	8001fb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6a:	f7fe fff1 	bl	8000f50 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d302      	bcc.n	8001f80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d113      	bne.n	8001fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f84:	f043 0220 	orr.w	r2, r3, #32
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e007      	b.n	8001fb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d1cf      	bne.n	8001f56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b10      	cmp	r3, #16
 8001fd8:	d151      	bne.n	800207e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fda:	e022      	b.n	8002022 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe2:	d01e      	beq.n	8002022 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe4:	f7fe ffb4 	bl	8000f50 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	68ba      	ldr	r2, [r7, #8]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d302      	bcc.n	8001ffa <I2C_IsAcknowledgeFailed+0x3a>
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d113      	bne.n	8002022 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f043 0220 	orr.w	r2, r3, #32
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e02e      	b.n	8002080 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	f003 0320 	and.w	r3, r3, #32
 800202c:	2b20      	cmp	r3, #32
 800202e:	d1d5      	bne.n	8001fdc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2210      	movs	r2, #16
 8002036:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2220      	movs	r2, #32
 800203e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f7ff fedd 	bl	8001e00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6859      	ldr	r1, [r3, #4]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <I2C_IsAcknowledgeFailed+0xc8>)
 8002052:	400b      	ands	r3, r1
 8002054:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f043 0204 	orr.w	r2, r3, #4
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2220      	movs	r2, #32
 8002066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3710      	adds	r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	fe00e800 	.word	0xfe00e800

0800208c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	460b      	mov	r3, r1
 8002098:	817b      	strh	r3, [r7, #10]
 800209a:	4613      	mov	r3, r2
 800209c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	0d5b      	lsrs	r3, r3, #21
 80020a8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80020ac:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <I2C_TransferConfig+0x58>)
 80020ae:	430b      	orrs	r3, r1
 80020b0:	43db      	mvns	r3, r3
 80020b2:	ea02 0103 	and.w	r1, r2, r3
 80020b6:	897b      	ldrh	r3, [r7, #10]
 80020b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020bc:	7a7b      	ldrb	r3, [r7, #9]
 80020be:	041b      	lsls	r3, r3, #16
 80020c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	431a      	orrs	r2, r3
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	431a      	orrs	r2, r3
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80020d6:	bf00      	nop
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	03ff63ff 	.word	0x03ff63ff

080020e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b20      	cmp	r3, #32
 80020fc:	d138      	bne.n	8002170 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002108:	2302      	movs	r3, #2
 800210a:	e032      	b.n	8002172 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2224      	movs	r2, #36	; 0x24
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f022 0201 	bic.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800213a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6819      	ldr	r1, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800216c:	2300      	movs	r3, #0
 800216e:	e000      	b.n	8002172 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002170:	2302      	movs	r3, #2
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b20      	cmp	r3, #32
 8002192:	d139      	bne.n	8002208 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800219e:	2302      	movs	r3, #2
 80021a0:	e033      	b.n	800220a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2224      	movs	r2, #36	; 0x24
 80021ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0201 	bic.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80021d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4313      	orrs	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2220      	movs	r2, #32
 80021f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002204:	2300      	movs	r3, #0
 8002206:	e000      	b.n	800220a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002208:	2302      	movs	r3, #2
  }
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002216:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002218:	b08f      	sub	sp, #60	; 0x3c
 800221a:	af0a      	add	r7, sp, #40	; 0x28
 800221c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e116      	b.n	8002456 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe fd22 	bl	8000c8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2203      	movs	r2, #3
 800224c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d102      	bne.n	8002262 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f002 fce6 	bl	8004c38 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	687e      	ldr	r6, [r7, #4]
 8002274:	466d      	mov	r5, sp
 8002276:	f106 0410 	add.w	r4, r6, #16
 800227a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800227c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800227e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002282:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002286:	e885 0003 	stmia.w	r5, {r0, r1}
 800228a:	1d33      	adds	r3, r6, #4
 800228c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800228e:	6838      	ldr	r0, [r7, #0]
 8002290:	f002 fc64 	bl	8004b5c <USB_CoreInit>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0d7      	b.n	8002456 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2100      	movs	r1, #0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f002 fcd4 	bl	8004c5a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	73fb      	strb	r3, [r7, #15]
 80022b6:	e04a      	b.n	800234e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022b8:	7bfa      	ldrb	r2, [r7, #15]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	333d      	adds	r3, #61	; 0x3d
 80022c8:	2201      	movs	r2, #1
 80022ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022cc:	7bfa      	ldrb	r2, [r7, #15]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	333c      	adds	r3, #60	; 0x3c
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
 80022e4:	b298      	uxth	r0, r3
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	3342      	adds	r3, #66	; 0x42
 80022f4:	4602      	mov	r2, r0
 80022f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022f8:	7bfa      	ldrb	r2, [r7, #15]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	333f      	adds	r3, #63	; 0x3f
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	3344      	adds	r3, #68	; 0x44
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002320:	7bfa      	ldrb	r2, [r7, #15]
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	4613      	mov	r3, r2
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	1a9b      	subs	r3, r3, r2
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	3348      	adds	r3, #72	; 0x48
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002334:	7bfa      	ldrb	r2, [r7, #15]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	3350      	adds	r3, #80	; 0x50
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	3301      	adds	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3af      	bcc.n	80022b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
 800235c:	e044      	b.n	80023e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	3301      	adds	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d3b5      	bcc.n	800235e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	687e      	ldr	r6, [r7, #4]
 80023fa:	466d      	mov	r5, sp
 80023fc:	f106 0410 	add.w	r4, r6, #16
 8002400:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002402:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002408:	e894 0003 	ldmia.w	r4, {r0, r1}
 800240c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002410:	1d33      	adds	r3, r6, #4
 8002412:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002414:	6838      	ldr	r0, [r7, #0]
 8002416:	f002 fc4b 	bl	8004cb0 <USB_DevInit>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2202      	movs	r2, #2
 8002424:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e014      	b.n	8002456 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	2b01      	cmp	r3, #1
 8002442:	d102      	bne.n	800244a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f80b 	bl	8002460 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f002 fded 	bl	800502e <USB_DevDisconnect>

  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002460 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002490:	4313      	orrs	r3, r2
 8002492:	68fa      	ldr	r2, [r7, #12]
 8002494:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	10000003 	.word	0x10000003

080024a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80024b0:	4b29      	ldr	r3, [pc, #164]	; (8002558 <HAL_PWREx_ConfigSupply+0xb0>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	2b06      	cmp	r3, #6
 80024ba:	d00a      	beq.n	80024d2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024bc:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_PWREx_ConfigSupply+0xb0>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d001      	beq.n	80024ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e040      	b.n	8002550 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e03e      	b.n	8002550 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024d2:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_PWREx_ConfigSupply+0xb0>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80024da:	491f      	ldr	r1, [pc, #124]	; (8002558 <HAL_PWREx_ConfigSupply+0xb0>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4313      	orrs	r3, r2
 80024e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024e2:	f7fe fd35 	bl	8000f50 <HAL_GetTick>
 80024e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024e8:	e009      	b.n	80024fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024ea:	f7fe fd31 	bl	8000f50 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024f8:	d901      	bls.n	80024fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e028      	b.n	8002550 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024fe:	4b16      	ldr	r3, [pc, #88]	; (8002558 <HAL_PWREx_ConfigSupply+0xb0>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250a:	d1ee      	bne.n	80024ea <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b1e      	cmp	r3, #30
 8002510:	d008      	beq.n	8002524 <HAL_PWREx_ConfigSupply+0x7c>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b2e      	cmp	r3, #46	; 0x2e
 8002516:	d005      	beq.n	8002524 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b1d      	cmp	r3, #29
 800251c:	d002      	beq.n	8002524 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2b2d      	cmp	r3, #45	; 0x2d
 8002522:	d114      	bne.n	800254e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002524:	f7fe fd14 	bl	8000f50 <HAL_GetTick>
 8002528:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800252a:	e009      	b.n	8002540 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800252c:	f7fe fd10 	bl	8000f50 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800253a:	d901      	bls.n	8002540 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e007      	b.n	8002550 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <HAL_PWREx_ConfigSupply+0xb0>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800254c:	d1ee      	bne.n	800252c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	58024800 	.word	0x58024800

0800255c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	58024800 	.word	0x58024800

0800257c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b08c      	sub	sp, #48	; 0x30
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e3ff      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8087 	beq.w	80026aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259c:	4b99      	ldr	r3, [pc, #612]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025a6:	4b97      	ldr	r3, [pc, #604]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ae:	2b10      	cmp	r3, #16
 80025b0:	d007      	beq.n	80025c2 <HAL_RCC_OscConfig+0x46>
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	2b18      	cmp	r3, #24
 80025b6:	d110      	bne.n	80025da <HAL_RCC_OscConfig+0x5e>
 80025b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d10b      	bne.n	80025da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025c2:	4b90      	ldr	r3, [pc, #576]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d06c      	beq.n	80026a8 <HAL_RCC_OscConfig+0x12c>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d168      	bne.n	80026a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e3d9      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e2:	d106      	bne.n	80025f2 <HAL_RCC_OscConfig+0x76>
 80025e4:	4b87      	ldr	r3, [pc, #540]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a86      	ldr	r2, [pc, #536]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80025ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	e02e      	b.n	8002650 <HAL_RCC_OscConfig+0xd4>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10c      	bne.n	8002614 <HAL_RCC_OscConfig+0x98>
 80025fa:	4b82      	ldr	r3, [pc, #520]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a81      	ldr	r2, [pc, #516]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b7f      	ldr	r3, [pc, #508]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a7e      	ldr	r2, [pc, #504]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800260c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e01d      	b.n	8002650 <HAL_RCC_OscConfig+0xd4>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800261c:	d10c      	bne.n	8002638 <HAL_RCC_OscConfig+0xbc>
 800261e:	4b79      	ldr	r3, [pc, #484]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a78      	ldr	r2, [pc, #480]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	4b76      	ldr	r3, [pc, #472]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a75      	ldr	r2, [pc, #468]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e00b      	b.n	8002650 <HAL_RCC_OscConfig+0xd4>
 8002638:	4b72      	ldr	r3, [pc, #456]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a71      	ldr	r2, [pc, #452]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800263e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	4b6f      	ldr	r3, [pc, #444]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a6e      	ldr	r2, [pc, #440]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800264a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800264e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d013      	beq.n	8002680 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fc7a 	bl	8000f50 <HAL_GetTick>
 800265c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002660:	f7fe fc76 	bl	8000f50 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	; 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e38d      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002672:	4b64      	ldr	r3, [pc, #400]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0xe4>
 800267e:	e014      	b.n	80026aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fc66 	bl	8000f50 <HAL_GetTick>
 8002684:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002688:	f7fe fc62 	bl	8000f50 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	; 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e379      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800269a:	4b5a      	ldr	r3, [pc, #360]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1f0      	bne.n	8002688 <HAL_RCC_OscConfig+0x10c>
 80026a6:	e000      	b.n	80026aa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f000 80ae 	beq.w	8002814 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026b8:	4b52      	ldr	r3, [pc, #328]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026c0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026c2:	4b50      	ldr	r3, [pc, #320]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d007      	beq.n	80026de <HAL_RCC_OscConfig+0x162>
 80026ce:	6a3b      	ldr	r3, [r7, #32]
 80026d0:	2b18      	cmp	r3, #24
 80026d2:	d13a      	bne.n	800274a <HAL_RCC_OscConfig+0x1ce>
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d135      	bne.n	800274a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026de:	4b49      	ldr	r3, [pc, #292]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d005      	beq.n	80026f6 <HAL_RCC_OscConfig+0x17a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e34b      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	f7fe fc5b 	bl	8000fb0 <HAL_GetREVID>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002700:	4293      	cmp	r3, r2
 8002702:	d817      	bhi.n	8002734 <HAL_RCC_OscConfig+0x1b8>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b40      	cmp	r3, #64	; 0x40
 800270a:	d108      	bne.n	800271e <HAL_RCC_OscConfig+0x1a2>
 800270c:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002714:	4a3b      	ldr	r2, [pc, #236]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800271c:	e07a      	b.n	8002814 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b39      	ldr	r3, [pc, #228]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	031b      	lsls	r3, r3, #12
 800272c:	4935      	ldr	r1, [pc, #212]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002732:	e06f      	b.n	8002814 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002734:	4b33      	ldr	r3, [pc, #204]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	4930      	ldr	r1, [pc, #192]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002748:	e064      	b.n	8002814 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d045      	beq.n	80027de <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002752:	4b2c      	ldr	r3, [pc, #176]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 0219 	bic.w	r2, r3, #25
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	4929      	ldr	r1, [pc, #164]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002760:	4313      	orrs	r3, r2
 8002762:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7fe fbf4 	bl	8000f50 <HAL_GetTick>
 8002768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276c:	f7fe fbf0 	bl	8000f50 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e307      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800277e:	4b21      	ldr	r3, [pc, #132]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278a:	f7fe fc11 	bl	8000fb0 <HAL_GetREVID>
 800278e:	4603      	mov	r3, r0
 8002790:	f241 0203 	movw	r2, #4099	; 0x1003
 8002794:	4293      	cmp	r3, r2
 8002796:	d817      	bhi.n	80027c8 <HAL_RCC_OscConfig+0x24c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	2b40      	cmp	r3, #64	; 0x40
 800279e:	d108      	bne.n	80027b2 <HAL_RCC_OscConfig+0x236>
 80027a0:	4b18      	ldr	r3, [pc, #96]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027a8:	4a16      	ldr	r2, [pc, #88]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80027aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ae:	6053      	str	r3, [r2, #4]
 80027b0:	e030      	b.n	8002814 <HAL_RCC_OscConfig+0x298>
 80027b2:	4b14      	ldr	r3, [pc, #80]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	031b      	lsls	r3, r3, #12
 80027c0:	4910      	ldr	r1, [pc, #64]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]
 80027c6:	e025      	b.n	8002814 <HAL_RCC_OscConfig+0x298>
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	490b      	ldr	r1, [pc, #44]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
 80027dc:	e01a      	b.n	8002814 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027de:	4b09      	ldr	r3, [pc, #36]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a08      	ldr	r2, [pc, #32]	; (8002804 <HAL_RCC_OscConfig+0x288>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ea:	f7fe fbb1 	bl	8000f50 <HAL_GetTick>
 80027ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027f0:	e00a      	b.n	8002808 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f2:	f7fe fbad 	bl	8000f50 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d903      	bls.n	8002808 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e2c4      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
 8002804:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002808:	4ba4      	ldr	r3, [pc, #656]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1ee      	bne.n	80027f2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0310 	and.w	r3, r3, #16
 800281c:	2b00      	cmp	r3, #0
 800281e:	f000 80a9 	beq.w	8002974 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002822:	4b9e      	ldr	r3, [pc, #632]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800282a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800282c:	4b9b      	ldr	r3, [pc, #620]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d007      	beq.n	8002848 <HAL_RCC_OscConfig+0x2cc>
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2b18      	cmp	r3, #24
 800283c:	d13a      	bne.n	80028b4 <HAL_RCC_OscConfig+0x338>
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d135      	bne.n	80028b4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002848:	4b94      	ldr	r3, [pc, #592]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_OscConfig+0x2e4>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	2b80      	cmp	r3, #128	; 0x80
 800285a:	d001      	beq.n	8002860 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e296      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002860:	f7fe fba6 	bl	8000fb0 <HAL_GetREVID>
 8002864:	4603      	mov	r3, r0
 8002866:	f241 0203 	movw	r2, #4099	; 0x1003
 800286a:	4293      	cmp	r3, r2
 800286c:	d817      	bhi.n	800289e <HAL_RCC_OscConfig+0x322>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	2b20      	cmp	r3, #32
 8002874:	d108      	bne.n	8002888 <HAL_RCC_OscConfig+0x30c>
 8002876:	4b89      	ldr	r3, [pc, #548]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800287e:	4a87      	ldr	r2, [pc, #540]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 8002880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002884:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002886:	e075      	b.n	8002974 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002888:	4b84      	ldr	r3, [pc, #528]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	069b      	lsls	r3, r3, #26
 8002896:	4981      	ldr	r1, [pc, #516]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800289c:	e06a      	b.n	8002974 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800289e:	4b7f      	ldr	r3, [pc, #508]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	061b      	lsls	r3, r3, #24
 80028ac:	497b      	ldr	r1, [pc, #492]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028b2:	e05f      	b.n	8002974 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d042      	beq.n	8002942 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028bc:	4b77      	ldr	r3, [pc, #476]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a76      	ldr	r2, [pc, #472]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 80028c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7fe fb42 	bl	8000f50 <HAL_GetTick>
 80028cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028d0:	f7fe fb3e 	bl	8000f50 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e255      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028e2:	4b6e      	ldr	r3, [pc, #440]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0f0      	beq.n	80028d0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ee:	f7fe fb5f 	bl	8000fb0 <HAL_GetREVID>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d817      	bhi.n	800292c <HAL_RCC_OscConfig+0x3b0>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	2b20      	cmp	r3, #32
 8002902:	d108      	bne.n	8002916 <HAL_RCC_OscConfig+0x39a>
 8002904:	4b65      	ldr	r3, [pc, #404]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800290c:	4a63      	ldr	r2, [pc, #396]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 800290e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002912:	6053      	str	r3, [r2, #4]
 8002914:	e02e      	b.n	8002974 <HAL_RCC_OscConfig+0x3f8>
 8002916:	4b61      	ldr	r3, [pc, #388]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	069b      	lsls	r3, r3, #26
 8002924:	495d      	ldr	r1, [pc, #372]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]
 800292a:	e023      	b.n	8002974 <HAL_RCC_OscConfig+0x3f8>
 800292c:	4b5b      	ldr	r3, [pc, #364]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	4958      	ldr	r1, [pc, #352]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 800293c:	4313      	orrs	r3, r2
 800293e:	60cb      	str	r3, [r1, #12]
 8002940:	e018      	b.n	8002974 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002942:	4b56      	ldr	r3, [pc, #344]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a55      	ldr	r2, [pc, #340]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 8002948:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800294c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7fe faff 	bl	8000f50 <HAL_GetTick>
 8002952:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002956:	f7fe fafb 	bl	8000f50 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e212      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002968:	4b4c      	ldr	r3, [pc, #304]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f0      	bne.n	8002956 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d036      	beq.n	80029ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d019      	beq.n	80029bc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002988:	4b44      	ldr	r3, [pc, #272]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 800298a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800298c:	4a43      	ldr	r2, [pc, #268]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002994:	f7fe fadc 	bl	8000f50 <HAL_GetTick>
 8002998:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800299c:	f7fe fad8 	bl	8000f50 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e1ef      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029ae:	4b3b      	ldr	r3, [pc, #236]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 80029b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x420>
 80029ba:	e018      	b.n	80029ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029bc:	4b37      	ldr	r3, [pc, #220]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 80029be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029c0:	4a36      	ldr	r2, [pc, #216]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 80029c2:	f023 0301 	bic.w	r3, r3, #1
 80029c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c8:	f7fe fac2 	bl	8000f50 <HAL_GetTick>
 80029cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d0:	f7fe fabe 	bl	8000f50 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e1d5      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029e2:	4b2e      	ldr	r3, [pc, #184]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 80029e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1f0      	bne.n	80029d0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d036      	beq.n	8002a68 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d019      	beq.n	8002a36 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a02:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a25      	ldr	r2, [pc, #148]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 8002a08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a0e:	f7fe fa9f 	bl	8000f50 <HAL_GetTick>
 8002a12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a16:	f7fe fa9b 	bl	8000f50 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e1b2      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a28:	4b1c      	ldr	r3, [pc, #112]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCC_OscConfig+0x49a>
 8002a34:	e018      	b.n	8002a68 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a36:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a18      	ldr	r2, [pc, #96]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 8002a3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a42:	f7fe fa85 	bl	8000f50 <HAL_GetTick>
 8002a46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002a4a:	f7fe fa81 	bl	8000f50 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e198      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_RCC_OscConfig+0x520>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f0      	bne.n	8002a4a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 8085 	beq.w	8002b80 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <HAL_RCC_OscConfig+0x524>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_RCC_OscConfig+0x524>)
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a82:	f7fe fa65 	bl	8000f50 <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a88:	e00c      	b.n	8002aa4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a8a:	f7fe fa61 	bl	8000f50 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b64      	cmp	r3, #100	; 0x64
 8002a96:	d905      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e178      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
 8002a9c:	58024400 	.word	0x58024400
 8002aa0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aa4:	4b96      	ldr	r3, [pc, #600]	; (8002d00 <HAL_RCC_OscConfig+0x784>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0ec      	beq.n	8002a8a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d106      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x54a>
 8002ab8:	4b92      	ldr	r3, [pc, #584]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	4a91      	ldr	r2, [pc, #580]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac4:	e02d      	b.n	8002b22 <HAL_RCC_OscConfig+0x5a6>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x56c>
 8002ace:	4b8d      	ldr	r3, [pc, #564]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	4a8c      	ldr	r2, [pc, #560]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002ad4:	f023 0301 	bic.w	r3, r3, #1
 8002ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ada:	4b8a      	ldr	r3, [pc, #552]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	4a89      	ldr	r2, [pc, #548]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002ae0:	f023 0304 	bic.w	r3, r3, #4
 8002ae4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae6:	e01c      	b.n	8002b22 <HAL_RCC_OscConfig+0x5a6>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b05      	cmp	r3, #5
 8002aee:	d10c      	bne.n	8002b0a <HAL_RCC_OscConfig+0x58e>
 8002af0:	4b84      	ldr	r3, [pc, #528]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4a83      	ldr	r2, [pc, #524]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002af6:	f043 0304 	orr.w	r3, r3, #4
 8002afa:	6713      	str	r3, [r2, #112]	; 0x70
 8002afc:	4b81      	ldr	r3, [pc, #516]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b00:	4a80      	ldr	r2, [pc, #512]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6713      	str	r3, [r2, #112]	; 0x70
 8002b08:	e00b      	b.n	8002b22 <HAL_RCC_OscConfig+0x5a6>
 8002b0a:	4b7e      	ldr	r3, [pc, #504]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0e:	4a7d      	ldr	r2, [pc, #500]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002b10:	f023 0301 	bic.w	r3, r3, #1
 8002b14:	6713      	str	r3, [r2, #112]	; 0x70
 8002b16:	4b7b      	ldr	r3, [pc, #492]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	4a7a      	ldr	r2, [pc, #488]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002b1c:	f023 0304 	bic.w	r3, r3, #4
 8002b20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d015      	beq.n	8002b56 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2a:	f7fe fa11 	bl	8000f50 <HAL_GetTick>
 8002b2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b32:	f7fe fa0d 	bl	8000f50 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e122      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b48:	4b6e      	ldr	r3, [pc, #440]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0ee      	beq.n	8002b32 <HAL_RCC_OscConfig+0x5b6>
 8002b54:	e014      	b.n	8002b80 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b56:	f7fe f9fb 	bl	8000f50 <HAL_GetTick>
 8002b5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b5c:	e00a      	b.n	8002b74 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5e:	f7fe f9f7 	bl	8000f50 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e10c      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b74:	4b63      	ldr	r3, [pc, #396]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1ee      	bne.n	8002b5e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 8101 	beq.w	8002d8c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b8a:	4b5e      	ldr	r3, [pc, #376]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b92:	2b18      	cmp	r3, #24
 8002b94:	f000 80bc 	beq.w	8002d10 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	f040 8095 	bne.w	8002ccc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba2:	4b58      	ldr	r3, [pc, #352]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a57      	ldr	r2, [pc, #348]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002ba8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bae:	f7fe f9cf 	bl	8000f50 <HAL_GetTick>
 8002bb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7fe f9cb 	bl	8000f50 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e0e2      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bc8:	4b4e      	ldr	r3, [pc, #312]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1f0      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bd4:	4b4b      	ldr	r3, [pc, #300]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002bd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd8:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <HAL_RCC_OscConfig+0x78c>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002be4:	0112      	lsls	r2, r2, #4
 8002be6:	430a      	orrs	r2, r1
 8002be8:	4946      	ldr	r1, [pc, #280]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	628b      	str	r3, [r1, #40]	; 0x28
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	025b      	lsls	r3, r3, #9
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	041b      	lsls	r3, r3, #16
 8002c0c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	3b01      	subs	r3, #1
 8002c18:	061b      	lsls	r3, r3, #24
 8002c1a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c1e:	4939      	ldr	r1, [pc, #228]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002c24:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c28:	4a36      	ldr	r2, [pc, #216]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c2a:	f023 0301 	bic.w	r3, r3, #1
 8002c2e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c30:	4b34      	ldr	r3, [pc, #208]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c34:	4b35      	ldr	r3, [pc, #212]	; (8002d0c <HAL_RCC_OscConfig+0x790>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c3c:	00d2      	lsls	r2, r2, #3
 8002c3e:	4931      	ldr	r1, [pc, #196]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c44:	4b2f      	ldr	r3, [pc, #188]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	f023 020c 	bic.w	r2, r3, #12
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	492c      	ldr	r1, [pc, #176]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c56:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	f023 0202 	bic.w	r2, r3, #2
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c62:	4928      	ldr	r1, [pc, #160]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c68:	4b26      	ldr	r3, [pc, #152]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	4a25      	ldr	r2, [pc, #148]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c74:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c78:	4a22      	ldr	r2, [pc, #136]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c80:	4b20      	ldr	r3, [pc, #128]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c84:	4a1f      	ldr	r2, [pc, #124]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	4a1c      	ldr	r2, [pc, #112]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c98:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002c9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe f954 	bl	8000f50 <HAL_GetTick>
 8002ca8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe f950 	bl	8000f50 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e067      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cbe:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x730>
 8002cca:	e05f      	b.n	8002d8c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ccc:	4b0d      	ldr	r3, [pc, #52]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002cd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fe f93a 	bl	8000f50 <HAL_GetTick>
 8002cdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe f936 	bl	8000f50 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e04d      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cf2:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <HAL_RCC_OscConfig+0x788>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x764>
 8002cfe:	e045      	b.n	8002d8c <HAL_RCC_OscConfig+0x810>
 8002d00:	58024800 	.word	0x58024800
 8002d04:	58024400 	.word	0x58024400
 8002d08:	fffffc0c 	.word	0xfffffc0c
 8002d0c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d10:	4b21      	ldr	r3, [pc, #132]	; (8002d98 <HAL_RCC_OscConfig+0x81c>)
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <HAL_RCC_OscConfig+0x81c>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d031      	beq.n	8002d88 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	f003 0203 	and.w	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d12a      	bne.n	8002d88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d122      	bne.n	8002d88 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d11a      	bne.n	8002d88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	0a5b      	lsrs	r3, r3, #9
 8002d56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d5e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d111      	bne.n	8002d88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	0c1b      	lsrs	r3, r3, #16
 8002d68:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d108      	bne.n	8002d88 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	0e1b      	lsrs	r3, r3, #24
 8002d7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d82:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3730      	adds	r7, #48	; 0x30
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	58024400 	.word	0x58024400

08002d9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e19c      	b.n	80030ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002db0:	4b8a      	ldr	r3, [pc, #552]	; (8002fdc <HAL_RCC_ClockConfig+0x240>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d910      	bls.n	8002de0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbe:	4b87      	ldr	r3, [pc, #540]	; (8002fdc <HAL_RCC_ClockConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 020f 	bic.w	r2, r3, #15
 8002dc6:	4985      	ldr	r1, [pc, #532]	; (8002fdc <HAL_RCC_ClockConfig+0x240>)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b83      	ldr	r3, [pc, #524]	; (8002fdc <HAL_RCC_ClockConfig+0x240>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e184      	b.n	80030ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d010      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	4b7b      	ldr	r3, [pc, #492]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d908      	bls.n	8002e0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dfc:	4b78      	ldr	r3, [pc, #480]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	699b      	ldr	r3, [r3, #24]
 8002e00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	4975      	ldr	r1, [pc, #468]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d010      	beq.n	8002e3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	4b70      	ldr	r3, [pc, #448]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d908      	bls.n	8002e3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e2a:	4b6d      	ldr	r3, [pc, #436]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	496a      	ldr	r1, [pc, #424]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0310 	and.w	r3, r3, #16
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d010      	beq.n	8002e6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699a      	ldr	r2, [r3, #24]
 8002e4c:	4b64      	ldr	r3, [pc, #400]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d908      	bls.n	8002e6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e58:	4b61      	ldr	r3, [pc, #388]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	495e      	ldr	r1, [pc, #376]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0320 	and.w	r3, r3, #32
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d010      	beq.n	8002e98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69da      	ldr	r2, [r3, #28]
 8002e7a:	4b59      	ldr	r3, [pc, #356]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d908      	bls.n	8002e98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002e86:	4b56      	ldr	r3, [pc, #344]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69db      	ldr	r3, [r3, #28]
 8002e92:	4953      	ldr	r1, [pc, #332]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d010      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	4b4d      	ldr	r3, [pc, #308]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d908      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb4:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f023 020f 	bic.w	r2, r3, #15
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4947      	ldr	r1, [pc, #284]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d055      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ed2:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	4940      	ldr	r1, [pc, #256]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d107      	bne.n	8002efc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eec:	4b3c      	ldr	r3, [pc, #240]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d121      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0f6      	b.n	80030ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d107      	bne.n	8002f14 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f04:	4b36      	ldr	r3, [pc, #216]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d115      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e0ea      	b.n	80030ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f1c:	4b30      	ldr	r3, [pc, #192]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0de      	b.n	80030ea <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f2c:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0d6      	b.n	80030ea <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f3c:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f023 0207 	bic.w	r2, r3, #7
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	4925      	ldr	r1, [pc, #148]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4e:	f7fd ffff 	bl	8000f50 <HAL_GetTick>
 8002f52:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f54:	e00a      	b.n	8002f6c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f56:	f7fd fffb 	bl	8000f50 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e0be      	b.n	80030ea <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6c:	4b1c      	ldr	r3, [pc, #112]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d1eb      	bne.n	8002f56 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d010      	beq.n	8002fac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d208      	bcs.n	8002fac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f023 020f 	bic.w	r2, r3, #15
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	490e      	ldr	r1, [pc, #56]	; (8002fe0 <HAL_RCC_ClockConfig+0x244>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fac:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCC_ClockConfig+0x240>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d214      	bcs.n	8002fe4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fba:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <HAL_RCC_ClockConfig+0x240>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 020f 	bic.w	r2, r3, #15
 8002fc2:	4906      	ldr	r1, [pc, #24]	; (8002fdc <HAL_RCC_ClockConfig+0x240>)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fca:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <HAL_RCC_ClockConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e086      	b.n	80030ea <HAL_RCC_ClockConfig+0x34e>
 8002fdc:	52002000 	.word	0x52002000
 8002fe0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0304 	and.w	r3, r3, #4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d010      	beq.n	8003012 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691a      	ldr	r2, [r3, #16]
 8002ff4:	4b3f      	ldr	r3, [pc, #252]	; (80030f4 <HAL_RCC_ClockConfig+0x358>)
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d208      	bcs.n	8003012 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003000:	4b3c      	ldr	r3, [pc, #240]	; (80030f4 <HAL_RCC_ClockConfig+0x358>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	4939      	ldr	r1, [pc, #228]	; (80030f4 <HAL_RCC_ClockConfig+0x358>)
 800300e:	4313      	orrs	r3, r2
 8003010:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d010      	beq.n	8003040 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695a      	ldr	r2, [r3, #20]
 8003022:	4b34      	ldr	r3, [pc, #208]	; (80030f4 <HAL_RCC_ClockConfig+0x358>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800302a:	429a      	cmp	r2, r3
 800302c:	d208      	bcs.n	8003040 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800302e:	4b31      	ldr	r3, [pc, #196]	; (80030f4 <HAL_RCC_ClockConfig+0x358>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	492e      	ldr	r1, [pc, #184]	; (80030f4 <HAL_RCC_ClockConfig+0x358>)
 800303c:	4313      	orrs	r3, r2
 800303e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	2b00      	cmp	r3, #0
 800304a:	d010      	beq.n	800306e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699a      	ldr	r2, [r3, #24]
 8003050:	4b28      	ldr	r3, [pc, #160]	; (80030f4 <HAL_RCC_ClockConfig+0x358>)
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003058:	429a      	cmp	r2, r3
 800305a:	d208      	bcs.n	800306e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800305c:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <HAL_RCC_ClockConfig+0x358>)
 800305e:	69db      	ldr	r3, [r3, #28]
 8003060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	699b      	ldr	r3, [r3, #24]
 8003068:	4922      	ldr	r1, [pc, #136]	; (80030f4 <HAL_RCC_ClockConfig+0x358>)
 800306a:	4313      	orrs	r3, r2
 800306c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d010      	beq.n	800309c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	4b1d      	ldr	r3, [pc, #116]	; (80030f4 <HAL_RCC_ClockConfig+0x358>)
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003086:	429a      	cmp	r2, r3
 8003088:	d208      	bcs.n	800309c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_RCC_ClockConfig+0x358>)
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	4917      	ldr	r1, [pc, #92]	; (80030f4 <HAL_RCC_ClockConfig+0x358>)
 8003098:	4313      	orrs	r3, r2
 800309a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800309c:	f000 f834 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b14      	ldr	r3, [pc, #80]	; (80030f4 <HAL_RCC_ClockConfig+0x358>)
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	4912      	ldr	r1, [pc, #72]	; (80030f8 <HAL_RCC_ClockConfig+0x35c>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
 80030b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030ba:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <HAL_RCC_ClockConfig+0x358>)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	4a0d      	ldr	r2, [pc, #52]	; (80030f8 <HAL_RCC_ClockConfig+0x35c>)
 80030c4:	5cd3      	ldrb	r3, [r2, r3]
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
 80030d0:	4a0a      	ldr	r2, [pc, #40]	; (80030fc <HAL_RCC_ClockConfig+0x360>)
 80030d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030d4:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x364>)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_RCC_ClockConfig+0x368>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd feec 	bl	8000ebc <HAL_InitTick>
 80030e4:	4603      	mov	r3, r0
 80030e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	58024400 	.word	0x58024400
 80030f8:	08005160 	.word	0x08005160
 80030fc:	24000004 	.word	0x24000004
 8003100:	24000000 	.word	0x24000000
 8003104:	24000008 	.word	0x24000008

08003108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	b480      	push	{r7}
 800310a:	b089      	sub	sp, #36	; 0x24
 800310c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800310e:	4bb3      	ldr	r3, [pc, #716]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003116:	2b18      	cmp	r3, #24
 8003118:	f200 8155 	bhi.w	80033c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800311c:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <HAL_RCC_GetSysClockFreq+0x1c>)
 800311e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003122:	bf00      	nop
 8003124:	08003189 	.word	0x08003189
 8003128:	080033c7 	.word	0x080033c7
 800312c:	080033c7 	.word	0x080033c7
 8003130:	080033c7 	.word	0x080033c7
 8003134:	080033c7 	.word	0x080033c7
 8003138:	080033c7 	.word	0x080033c7
 800313c:	080033c7 	.word	0x080033c7
 8003140:	080033c7 	.word	0x080033c7
 8003144:	080031af 	.word	0x080031af
 8003148:	080033c7 	.word	0x080033c7
 800314c:	080033c7 	.word	0x080033c7
 8003150:	080033c7 	.word	0x080033c7
 8003154:	080033c7 	.word	0x080033c7
 8003158:	080033c7 	.word	0x080033c7
 800315c:	080033c7 	.word	0x080033c7
 8003160:	080033c7 	.word	0x080033c7
 8003164:	080031b5 	.word	0x080031b5
 8003168:	080033c7 	.word	0x080033c7
 800316c:	080033c7 	.word	0x080033c7
 8003170:	080033c7 	.word	0x080033c7
 8003174:	080033c7 	.word	0x080033c7
 8003178:	080033c7 	.word	0x080033c7
 800317c:	080033c7 	.word	0x080033c7
 8003180:	080033c7 	.word	0x080033c7
 8003184:	080031bb 	.word	0x080031bb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003188:	4b94      	ldr	r3, [pc, #592]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0320 	and.w	r3, r3, #32
 8003190:	2b00      	cmp	r3, #0
 8003192:	d009      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003194:	4b91      	ldr	r3, [pc, #580]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	08db      	lsrs	r3, r3, #3
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	4a90      	ldr	r2, [pc, #576]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
 80031a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80031a6:	e111      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031a8:	4b8d      	ldr	r3, [pc, #564]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031aa:	61bb      	str	r3, [r7, #24]
    break;
 80031ac:	e10e      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80031ae:	4b8d      	ldr	r3, [pc, #564]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031b0:	61bb      	str	r3, [r7, #24]
    break;
 80031b2:	e10b      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80031b4:	4b8c      	ldr	r3, [pc, #560]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031b6:	61bb      	str	r3, [r7, #24]
    break;
 80031b8:	e108      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031ba:	4b88      	ldr	r3, [pc, #544]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	f003 0303 	and.w	r3, r3, #3
 80031c2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80031c4:	4b85      	ldr	r3, [pc, #532]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	091b      	lsrs	r3, r3, #4
 80031ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031ce:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031d0:	4b82      	ldr	r3, [pc, #520]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80031da:	4b80      	ldr	r3, [pc, #512]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031de:	08db      	lsrs	r3, r3, #3
 80031e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	fb02 f303 	mul.w	r3, r2, r3
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80e1 	beq.w	80033c0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b02      	cmp	r3, #2
 8003202:	f000 8083 	beq.w	800330c <HAL_RCC_GetSysClockFreq+0x204>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2b02      	cmp	r3, #2
 800320a:	f200 80a1 	bhi.w	8003350 <HAL_RCC_GetSysClockFreq+0x248>
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d003      	beq.n	800321c <HAL_RCC_GetSysClockFreq+0x114>
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d056      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800321a:	e099      	b.n	8003350 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800321c:	4b6f      	ldr	r3, [pc, #444]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d02d      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003228:	4b6c      	ldr	r3, [pc, #432]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	08db      	lsrs	r3, r3, #3
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	4a6b      	ldr	r2, [pc, #428]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
 8003238:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	ee07 3a90 	vmov	s15, r3
 8003240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	ee07 3a90 	vmov	s15, r3
 800324a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003252:	4b62      	ldr	r3, [pc, #392]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003262:	ed97 6a02 	vldr	s12, [r7, #8]
 8003266:	eddf 5a61 	vldr	s11, [pc, #388]	; 80033ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800326a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800326e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800327a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003282:	e087      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80033f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003296:	4b51      	ldr	r3, [pc, #324]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329e:	ee07 3a90 	vmov	s15, r3
 80032a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032aa:	eddf 5a50 	vldr	s11, [pc, #320]	; 80033ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032c6:	e065      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80033f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032da:	4b40      	ldr	r3, [pc, #256]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e2:	ee07 3a90 	vmov	s15, r3
 80032e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ee:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80033ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80032f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800330a:	e043      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003316:	eddf 6a38 	vldr	s13, [pc, #224]	; 80033f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800331a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800331e:	4b2f      	ldr	r3, [pc, #188]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003326:	ee07 3a90 	vmov	s15, r3
 800332a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800332e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003332:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80033ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8003336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800333a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800333e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800334e:	e021      	b.n	8003394 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800335a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80033f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800335e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003362:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003372:	ed97 6a02 	vldr	s12, [r7, #8]
 8003376:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80033ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800337a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800337e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800338a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800338e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003392:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003394:	4b11      	ldr	r3, [pc, #68]	; (80033dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	0a5b      	lsrs	r3, r3, #9
 800339a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800339e:	3301      	adds	r3, #1
 80033a0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	ee07 3a90 	vmov	s15, r3
 80033a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80033b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033b8:	ee17 3a90 	vmov	r3, s15
 80033bc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80033be:	e005      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	61bb      	str	r3, [r7, #24]
    break;
 80033c4:	e002      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033c8:	61bb      	str	r3, [r7, #24]
    break;
 80033ca:	bf00      	nop
  }

  return sysclockfreq;
 80033cc:	69bb      	ldr	r3, [r7, #24]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3724      	adds	r7, #36	; 0x24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	58024400 	.word	0x58024400
 80033e0:	03d09000 	.word	0x03d09000
 80033e4:	003d0900 	.word	0x003d0900
 80033e8:	007a1200 	.word	0x007a1200
 80033ec:	46000000 	.word	0x46000000
 80033f0:	4c742400 	.word	0x4c742400
 80033f4:	4a742400 	.word	0x4a742400
 80033f8:	4af42400 	.word	0x4af42400

080033fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003404:	2300      	movs	r3, #0
 8003406:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003408:	2300      	movs	r3, #0
 800340a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d03f      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800341c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003420:	d02a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003422:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003426:	d824      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003428:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800342c:	d018      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800342e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003432:	d81e      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800343c:	d007      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800343e:	e018      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003440:	4bab      	ldr	r3, [pc, #684]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	4aaa      	ldr	r2, [pc, #680]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800344c:	e015      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	2102      	movs	r1, #2
 8003454:	4618      	mov	r0, r3
 8003456:	f000 ff11 	bl	800427c <RCCEx_PLL2_Config>
 800345a:	4603      	mov	r3, r0
 800345c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800345e:	e00c      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3324      	adds	r3, #36	; 0x24
 8003464:	2102      	movs	r1, #2
 8003466:	4618      	mov	r0, r3
 8003468:	f000 ffba 	bl	80043e0 <RCCEx_PLL3_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003470:	e003      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
      break;
 8003476:	e000      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800347a:	7dfb      	ldrb	r3, [r7, #23]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d109      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003480:	4b9b      	ldr	r3, [pc, #620]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800348c:	4998      	ldr	r1, [pc, #608]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800348e:	4313      	orrs	r3, r2
 8003490:	650b      	str	r3, [r1, #80]	; 0x50
 8003492:	e001      	b.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003494:	7dfb      	ldrb	r3, [r7, #23]
 8003496:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d03d      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d826      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034c9 	.word	0x080034c9
 80034b8:	080034d7 	.word	0x080034d7
 80034bc:	080034e9 	.word	0x080034e9
 80034c0:	08003501 	.word	0x08003501
 80034c4:	08003501 	.word	0x08003501
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034c8:	4b89      	ldr	r3, [pc, #548]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	4a88      	ldr	r2, [pc, #544]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80034ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034d4:	e015      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	3304      	adds	r3, #4
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 fecd 	bl	800427c <RCCEx_PLL2_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034e6:	e00c      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3324      	adds	r3, #36	; 0x24
 80034ec:	2100      	movs	r1, #0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 ff76 	bl	80043e0 <RCCEx_PLL3_Config>
 80034f4:	4603      	mov	r3, r0
 80034f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80034f8:	e003      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	75fb      	strb	r3, [r7, #23]
      break;
 80034fe:	e000      	b.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003502:	7dfb      	ldrb	r3, [r7, #23]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003508:	4b79      	ldr	r3, [pc, #484]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800350a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800350c:	f023 0207 	bic.w	r2, r3, #7
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003514:	4976      	ldr	r1, [pc, #472]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003516:	4313      	orrs	r3, r2
 8003518:	650b      	str	r3, [r1, #80]	; 0x50
 800351a:	e001      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	7dfb      	ldrb	r3, [r7, #23]
 800351e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003528:	2b00      	cmp	r3, #0
 800352a:	d042      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003534:	d02b      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353a:	d825      	bhi.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800353c:	2bc0      	cmp	r3, #192	; 0xc0
 800353e:	d028      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003540:	2bc0      	cmp	r3, #192	; 0xc0
 8003542:	d821      	bhi.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003544:	2b80      	cmp	r3, #128	; 0x80
 8003546:	d016      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003548:	2b80      	cmp	r3, #128	; 0x80
 800354a:	d81d      	bhi.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003550:	2b40      	cmp	r3, #64	; 0x40
 8003552:	d007      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003554:	e018      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003556:	4b66      	ldr	r3, [pc, #408]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	4a65      	ldr	r2, [pc, #404]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800355c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003560:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003562:	e017      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3304      	adds	r3, #4
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fe86 	bl	800427c <RCCEx_PLL2_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003574:	e00e      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3324      	adds	r3, #36	; 0x24
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f000 ff2f 	bl	80043e0 <RCCEx_PLL3_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003586:	e005      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	75fb      	strb	r3, [r7, #23]
      break;
 800358c:	e002      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800358e:	bf00      	nop
 8003590:	e000      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003592:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003594:	7dfb      	ldrb	r3, [r7, #23]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800359a:	4b55      	ldr	r3, [pc, #340]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800359c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a6:	4952      	ldr	r1, [pc, #328]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	650b      	str	r3, [r1, #80]	; 0x50
 80035ac:	e001      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ae:	7dfb      	ldrb	r3, [r7, #23]
 80035b0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d049      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035c8:	d030      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80035ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ce:	d82a      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035d0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035d4:	d02c      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80035d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035da:	d824      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e0:	d018      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80035e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e6:	d81e      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80035ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035f0:	d007      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80035f2:	e018      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f4:	4b3e      	ldr	r3, [pc, #248]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	4a3d      	ldr	r2, [pc, #244]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80035fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003600:	e017      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3304      	adds	r3, #4
 8003606:	2100      	movs	r1, #0
 8003608:	4618      	mov	r0, r3
 800360a:	f000 fe37 	bl	800427c <RCCEx_PLL2_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003612:	e00e      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3324      	adds	r3, #36	; 0x24
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f000 fee0 	bl	80043e0 <RCCEx_PLL3_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003624:	e005      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	75fb      	strb	r3, [r7, #23]
      break;
 800362a:	e002      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800362c:	bf00      	nop
 800362e:	e000      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003632:	7dfb      	ldrb	r3, [r7, #23]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10a      	bne.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003638:	4b2d      	ldr	r3, [pc, #180]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800363a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003646:	492a      	ldr	r1, [pc, #168]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003648:	4313      	orrs	r3, r2
 800364a:	658b      	str	r3, [r1, #88]	; 0x58
 800364c:	e001      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800364e:	7dfb      	ldrb	r3, [r7, #23]
 8003650:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365a:	2b00      	cmp	r3, #0
 800365c:	d04c      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003664:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003668:	d030      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800366a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800366e:	d82a      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003670:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003674:	d02c      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8003676:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800367a:	d824      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800367c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003680:	d018      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003682:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003686:	d81e      	bhi.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800368c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003690:	d007      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8003692:	e018      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003694:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	4a15      	ldr	r2, [pc, #84]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800369a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800369e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036a0:	e017      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3304      	adds	r3, #4
 80036a6:	2100      	movs	r1, #0
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fde7 	bl	800427c <RCCEx_PLL2_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036b2:	e00e      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3324      	adds	r3, #36	; 0x24
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fe90 	bl	80043e0 <RCCEx_PLL3_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036c4:	e005      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	75fb      	strb	r3, [r7, #23]
      break;
 80036ca:	e002      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80036cc:	bf00      	nop
 80036ce:	e000      	b.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80036d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d2:	7dfb      	ldrb	r3, [r7, #23]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10d      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036d8:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036e6:	4902      	ldr	r1, [pc, #8]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	658b      	str	r3, [r1, #88]	; 0x58
 80036ec:	e004      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80036ee:	bf00      	nop
 80036f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d032      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003708:	2b30      	cmp	r3, #48	; 0x30
 800370a:	d01c      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800370c:	2b30      	cmp	r3, #48	; 0x30
 800370e:	d817      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003710:	2b20      	cmp	r3, #32
 8003712:	d00c      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003714:	2b20      	cmp	r3, #32
 8003716:	d813      	bhi.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d016      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800371c:	2b10      	cmp	r3, #16
 800371e:	d10f      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003720:	4baf      	ldr	r3, [pc, #700]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	4aae      	ldr	r2, [pc, #696]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800372c:	e00e      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3304      	adds	r3, #4
 8003732:	2102      	movs	r1, #2
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fda1 	bl	800427c <RCCEx_PLL2_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800373e:	e005      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	75fb      	strb	r3, [r7, #23]
      break;
 8003744:	e002      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003746:	bf00      	nop
 8003748:	e000      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800374a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003752:	4ba3      	ldr	r3, [pc, #652]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003756:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375e:	49a0      	ldr	r1, [pc, #640]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003760:	4313      	orrs	r3, r2
 8003762:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003764:	e001      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d047      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800377a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800377e:	d030      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003784:	d82a      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003786:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800378a:	d02c      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800378c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003790:	d824      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003796:	d018      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8003798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800379c:	d81e      	bhi.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80037a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a6:	d007      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80037a8:	e018      	b.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037aa:	4b8d      	ldr	r3, [pc, #564]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	4a8c      	ldr	r2, [pc, #560]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037b6:	e017      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3304      	adds	r3, #4
 80037bc:	2100      	movs	r1, #0
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fd5c 	bl	800427c <RCCEx_PLL2_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037c8:	e00e      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3324      	adds	r3, #36	; 0x24
 80037ce:	2100      	movs	r1, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 fe05 	bl	80043e0 <RCCEx_PLL3_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037da:	e005      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	75fb      	strb	r3, [r7, #23]
      break;
 80037e0:	e002      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80037e2:	bf00      	nop
 80037e4:	e000      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80037e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037e8:	7dfb      	ldrb	r3, [r7, #23]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037ee:	4b7c      	ldr	r3, [pc, #496]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037f2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fa:	4979      	ldr	r1, [pc, #484]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	650b      	str	r3, [r1, #80]	; 0x50
 8003800:	e001      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003802:	7dfb      	ldrb	r3, [r7, #23]
 8003804:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d049      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003816:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800381a:	d02e      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800381c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003820:	d828      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003822:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003826:	d02a      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003828:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800382c:	d822      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800382e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003832:	d026      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003834:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003838:	d81c      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800383a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800383e:	d010      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003844:	d816      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01d      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800384a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800384e:	d111      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3304      	adds	r3, #4
 8003854:	2101      	movs	r1, #1
 8003856:	4618      	mov	r0, r3
 8003858:	f000 fd10 	bl	800427c <RCCEx_PLL2_Config>
 800385c:	4603      	mov	r3, r0
 800385e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003860:	e012      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3324      	adds	r3, #36	; 0x24
 8003866:	2101      	movs	r1, #1
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fdb9 	bl	80043e0 <RCCEx_PLL3_Config>
 800386e:	4603      	mov	r3, r0
 8003870:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003872:	e009      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	75fb      	strb	r3, [r7, #23]
      break;
 8003878:	e006      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800387a:	bf00      	nop
 800387c:	e004      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800387e:	bf00      	nop
 8003880:	e002      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003882:	bf00      	nop
 8003884:	e000      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003886:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003888:	7dfb      	ldrb	r3, [r7, #23]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800388e:	4b54      	ldr	r3, [pc, #336]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003892:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800389a:	4951      	ldr	r1, [pc, #324]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800389c:	4313      	orrs	r3, r2
 800389e:	650b      	str	r3, [r1, #80]	; 0x50
 80038a0:	e001      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a2:	7dfb      	ldrb	r3, [r7, #23]
 80038a4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d04b      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038bc:	d02e      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80038be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038c2:	d828      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c8:	d02a      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80038ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038ce:	d822      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038d4:	d026      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80038d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038da:	d81c      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e0:	d010      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80038e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038e6:	d816      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d01d      	beq.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80038ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038f0:	d111      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3304      	adds	r3, #4
 80038f6:	2101      	movs	r1, #1
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fcbf 	bl	800427c <RCCEx_PLL2_Config>
 80038fe:	4603      	mov	r3, r0
 8003900:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003902:	e012      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3324      	adds	r3, #36	; 0x24
 8003908:	2101      	movs	r1, #1
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fd68 	bl	80043e0 <RCCEx_PLL3_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003914:	e009      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	75fb      	strb	r3, [r7, #23]
      break;
 800391a:	e006      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800391c:	bf00      	nop
 800391e:	e004      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003920:	bf00      	nop
 8003922:	e002      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003924:	bf00      	nop
 8003926:	e000      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800392a:	7dfb      	ldrb	r3, [r7, #23]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10a      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003930:	4b2b      	ldr	r3, [pc, #172]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003934:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800393e:	4928      	ldr	r1, [pc, #160]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003940:	4313      	orrs	r3, r2
 8003942:	658b      	str	r3, [r1, #88]	; 0x58
 8003944:	e001      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d02f      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800395e:	d00e      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003964:	d814      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003966:	2b00      	cmp	r3, #0
 8003968:	d015      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800396a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800396e:	d10f      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	4a1a      	ldr	r2, [pc, #104]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800397a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800397c:	e00c      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3304      	adds	r3, #4
 8003982:	2101      	movs	r1, #1
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fc79 	bl	800427c <RCCEx_PLL2_Config>
 800398a:	4603      	mov	r3, r0
 800398c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800398e:	e003      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
      break;
 8003994:	e000      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8003996:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003998:	7dfb      	ldrb	r3, [r7, #23]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039aa:	490d      	ldr	r1, [pc, #52]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	650b      	str	r3, [r1, #80]	; 0x50
 80039b0:	e001      	b.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
 80039b4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d033      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d81c      	bhi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80039ca:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80039cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d0:	08003a0b 	.word	0x08003a0b
 80039d4:	080039e5 	.word	0x080039e5
 80039d8:	080039f3 	.word	0x080039f3
 80039dc:	08003a0b 	.word	0x08003a0b
 80039e0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e4:	4bb8      	ldr	r3, [pc, #736]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e8:	4ab7      	ldr	r2, [pc, #732]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039f0:	e00c      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	2102      	movs	r1, #2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f000 fc3f 	bl	800427c <RCCEx_PLL2_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003a02:	e003      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	75fb      	strb	r3, [r7, #23]
      break;
 8003a08:	e000      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003a0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d109      	bne.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a12:	4bad      	ldr	r3, [pc, #692]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a16:	f023 0203 	bic.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	49aa      	ldr	r1, [pc, #680]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a24:	e001      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a26:	7dfb      	ldrb	r3, [r7, #23]
 8003a28:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	f000 8086 	beq.w	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a38:	4ba4      	ldr	r3, [pc, #656]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4aa3      	ldr	r2, [pc, #652]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a42:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a44:	f7fd fa84 	bl	8000f50 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a4a:	e009      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4c:	f7fd fa80 	bl	8000f50 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	; 0x64
 8003a58:	d902      	bls.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	75fb      	strb	r3, [r7, #23]
        break;
 8003a5e:	e005      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a60:	4b9a      	ldr	r3, [pc, #616]	; (8003ccc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0ef      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003a6c:	7dfb      	ldrb	r3, [r7, #23]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d166      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a72:	4b95      	ldr	r3, [pc, #596]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a7c:	4053      	eors	r3, r2
 8003a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d013      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a86:	4b90      	ldr	r3, [pc, #576]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a90:	4b8d      	ldr	r3, [pc, #564]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	4a8c      	ldr	r2, [pc, #560]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a9c:	4b8a      	ldr	r3, [pc, #552]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	4a89      	ldr	r2, [pc, #548]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003aa8:	4a87      	ldr	r2, [pc, #540]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ab8:	d115      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aba:	f7fd fa49 	bl	8000f50 <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ac0:	e00b      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac2:	f7fd fa45 	bl	8000f50 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d902      	bls.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	75fb      	strb	r3, [r7, #23]
            break;
 8003ad8:	e005      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ada:	4b7b      	ldr	r3, [pc, #492]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0ed      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d126      	bne.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003afa:	d10d      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003afc:	4b72      	ldr	r3, [pc, #456]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b0a:	0919      	lsrs	r1, r3, #4
 8003b0c:	4b70      	ldr	r3, [pc, #448]	; (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003b0e:	400b      	ands	r3, r1
 8003b10:	496d      	ldr	r1, [pc, #436]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	610b      	str	r3, [r1, #16]
 8003b16:	e005      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003b18:	4b6b      	ldr	r3, [pc, #428]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	4a6a      	ldr	r2, [pc, #424]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b22:	6113      	str	r3, [r2, #16]
 8003b24:	4b68      	ldr	r3, [pc, #416]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b32:	4965      	ldr	r1, [pc, #404]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	670b      	str	r3, [r1, #112]	; 0x70
 8003b38:	e004      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b3a:	7dfb      	ldrb	r3, [r7, #23]
 8003b3c:	75bb      	strb	r3, [r7, #22]
 8003b3e:	e001      	b.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
 8003b42:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d07e      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b54:	2b28      	cmp	r3, #40	; 0x28
 8003b56:	d867      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003b58:	a201      	add	r2, pc, #4	; (adr r2, 8003b60 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5e:	bf00      	nop
 8003b60:	08003c2f 	.word	0x08003c2f
 8003b64:	08003c29 	.word	0x08003c29
 8003b68:	08003c29 	.word	0x08003c29
 8003b6c:	08003c29 	.word	0x08003c29
 8003b70:	08003c29 	.word	0x08003c29
 8003b74:	08003c29 	.word	0x08003c29
 8003b78:	08003c29 	.word	0x08003c29
 8003b7c:	08003c29 	.word	0x08003c29
 8003b80:	08003c05 	.word	0x08003c05
 8003b84:	08003c29 	.word	0x08003c29
 8003b88:	08003c29 	.word	0x08003c29
 8003b8c:	08003c29 	.word	0x08003c29
 8003b90:	08003c29 	.word	0x08003c29
 8003b94:	08003c29 	.word	0x08003c29
 8003b98:	08003c29 	.word	0x08003c29
 8003b9c:	08003c29 	.word	0x08003c29
 8003ba0:	08003c17 	.word	0x08003c17
 8003ba4:	08003c29 	.word	0x08003c29
 8003ba8:	08003c29 	.word	0x08003c29
 8003bac:	08003c29 	.word	0x08003c29
 8003bb0:	08003c29 	.word	0x08003c29
 8003bb4:	08003c29 	.word	0x08003c29
 8003bb8:	08003c29 	.word	0x08003c29
 8003bbc:	08003c29 	.word	0x08003c29
 8003bc0:	08003c2f 	.word	0x08003c2f
 8003bc4:	08003c29 	.word	0x08003c29
 8003bc8:	08003c29 	.word	0x08003c29
 8003bcc:	08003c29 	.word	0x08003c29
 8003bd0:	08003c29 	.word	0x08003c29
 8003bd4:	08003c29 	.word	0x08003c29
 8003bd8:	08003c29 	.word	0x08003c29
 8003bdc:	08003c29 	.word	0x08003c29
 8003be0:	08003c2f 	.word	0x08003c2f
 8003be4:	08003c29 	.word	0x08003c29
 8003be8:	08003c29 	.word	0x08003c29
 8003bec:	08003c29 	.word	0x08003c29
 8003bf0:	08003c29 	.word	0x08003c29
 8003bf4:	08003c29 	.word	0x08003c29
 8003bf8:	08003c29 	.word	0x08003c29
 8003bfc:	08003c29 	.word	0x08003c29
 8003c00:	08003c2f 	.word	0x08003c2f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	2101      	movs	r1, #1
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fb36 	bl	800427c <RCCEx_PLL2_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c14:	e00c      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3324      	adds	r3, #36	; 0x24
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fbdf 	bl	80043e0 <RCCEx_PLL3_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003c26:	e003      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c2c:	e000      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003c2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c30:	7dfb      	ldrb	r3, [r7, #23]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c36:	4b24      	ldr	r3, [pc, #144]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c42:	4921      	ldr	r1, [pc, #132]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	654b      	str	r3, [r1, #84]	; 0x54
 8003c48:	e001      	b.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c4a:	7dfb      	ldrb	r3, [r7, #23]
 8003c4c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d03e      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c5e:	2b05      	cmp	r3, #5
 8003c60:	d820      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003c62:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003cab 	.word	0x08003cab
 8003c6c:	08003c81 	.word	0x08003c81
 8003c70:	08003c93 	.word	0x08003c93
 8003c74:	08003cab 	.word	0x08003cab
 8003c78:	08003cab 	.word	0x08003cab
 8003c7c:	08003cab 	.word	0x08003cab
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3304      	adds	r3, #4
 8003c84:	2101      	movs	r1, #1
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 faf8 	bl	800427c <RCCEx_PLL2_Config>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003c90:	e00c      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3324      	adds	r3, #36	; 0x24
 8003c96:	2101      	movs	r1, #1
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fba1 	bl	80043e0 <RCCEx_PLL3_Config>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ca2:	e003      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca8:	e000      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8003caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cac:	7dfb      	ldrb	r3, [r7, #23]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d110      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	f023 0207 	bic.w	r2, r3, #7
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cbe:	4902      	ldr	r1, [pc, #8]	; (8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	654b      	str	r3, [r1, #84]	; 0x54
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003cc6:	bf00      	nop
 8003cc8:	58024400 	.word	0x58024400
 8003ccc:	58024800 	.word	0x58024800
 8003cd0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd4:	7dfb      	ldrb	r3, [r7, #23]
 8003cd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0304 	and.w	r3, r3, #4
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d039      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	2b05      	cmp	r3, #5
 8003cec:	d820      	bhi.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003cee:	a201      	add	r2, pc, #4	; (adr r2, 8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf4:	08003d37 	.word	0x08003d37
 8003cf8:	08003d0d 	.word	0x08003d0d
 8003cfc:	08003d1f 	.word	0x08003d1f
 8003d00:	08003d37 	.word	0x08003d37
 8003d04:	08003d37 	.word	0x08003d37
 8003d08:	08003d37 	.word	0x08003d37
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	2101      	movs	r1, #1
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fab2 	bl	800427c <RCCEx_PLL2_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d1c:	e00c      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3324      	adds	r3, #36	; 0x24
 8003d22:	2101      	movs	r1, #1
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fb5b 	bl	80043e0 <RCCEx_PLL3_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003d2e:	e003      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	75fb      	strb	r3, [r7, #23]
      break;
 8003d34:	e000      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003d36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10a      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d3e:	4bb7      	ldr	r3, [pc, #732]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d42:	f023 0207 	bic.w	r2, r3, #7
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4c:	49b3      	ldr	r1, [pc, #716]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	658b      	str	r3, [r1, #88]	; 0x58
 8003d52:	e001      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0320 	and.w	r3, r3, #32
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d04b      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d6e:	d02e      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003d70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d74:	d828      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7a:	d02a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d80:	d822      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003d82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d86:	d026      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003d88:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003d8c:	d81c      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d92:	d010      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d98:	d816      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d01d      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003da2:	d111      	bne.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3304      	adds	r3, #4
 8003da8:	2100      	movs	r1, #0
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fa66 	bl	800427c <RCCEx_PLL2_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003db4:	e012      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3324      	adds	r3, #36	; 0x24
 8003dba:	2102      	movs	r1, #2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f000 fb0f 	bl	80043e0 <RCCEx_PLL3_Config>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003dc6:	e009      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	75fb      	strb	r3, [r7, #23]
      break;
 8003dcc:	e006      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003dce:	bf00      	nop
 8003dd0:	e004      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003dd2:	bf00      	nop
 8003dd4:	e002      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e000      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003dda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10a      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003de2:	4b8e      	ldr	r3, [pc, #568]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003df0:	498a      	ldr	r1, [pc, #552]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	654b      	str	r3, [r1, #84]	; 0x54
 8003df6:	e001      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df8:	7dfb      	ldrb	r3, [r7, #23]
 8003dfa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d04b      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e0e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e12:	d02e      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003e14:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e18:	d828      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e1e:	d02a      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e24:	d822      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e2a:	d026      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003e2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e30:	d81c      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e36:	d010      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e3c:	d816      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d01d      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e46:	d111      	bne.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3304      	adds	r3, #4
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fa14 	bl	800427c <RCCEx_PLL2_Config>
 8003e54:	4603      	mov	r3, r0
 8003e56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e58:	e012      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	3324      	adds	r3, #36	; 0x24
 8003e5e:	2102      	movs	r1, #2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fabd 	bl	80043e0 <RCCEx_PLL3_Config>
 8003e66:	4603      	mov	r3, r0
 8003e68:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003e6a:	e009      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e70:	e006      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003e72:	bf00      	nop
 8003e74:	e004      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003e76:	bf00      	nop
 8003e78:	e002      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e000      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e80:	7dfb      	ldrb	r3, [r7, #23]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e86:	4b65      	ldr	r3, [pc, #404]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e94:	4961      	ldr	r1, [pc, #388]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	658b      	str	r3, [r1, #88]	; 0x58
 8003e9a:	e001      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d04b      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003eb2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003eb6:	d02e      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003eb8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ebc:	d828      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec2:	d02a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec8:	d822      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003eca:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ece:	d026      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003ed0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ed4:	d81c      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003ed6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eda:	d010      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003edc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ee0:	d816      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d01d      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eea:	d111      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 f9c2 	bl	800427c <RCCEx_PLL2_Config>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003efc:	e012      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3324      	adds	r3, #36	; 0x24
 8003f02:	2102      	movs	r1, #2
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fa6b 	bl	80043e0 <RCCEx_PLL3_Config>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003f0e:	e009      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	75fb      	strb	r3, [r7, #23]
      break;
 8003f14:	e006      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f16:	bf00      	nop
 8003f18:	e004      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f1a:	bf00      	nop
 8003f1c:	e002      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f1e:	bf00      	nop
 8003f20:	e000      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003f22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003f2a:	4b3c      	ldr	r3, [pc, #240]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f38:	4938      	ldr	r1, [pc, #224]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	658b      	str	r3, [r1, #88]	; 0x58
 8003f3e:	e001      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f40:	7dfb      	ldrb	r3, [r7, #23]
 8003f42:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f5a:	d10a      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3324      	adds	r3, #36	; 0x24
 8003f60:	2102      	movs	r1, #2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fa3c 	bl	80043e0 <RCCEx_PLL3_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f72:	4b2a      	ldr	r3, [pc, #168]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f80:	4926      	ldr	r1, [pc, #152]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d01a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9c:	d10a      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3324      	adds	r3, #36	; 0x24
 8003fa2:	2102      	movs	r1, #2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fa1b 	bl	80043e0 <RCCEx_PLL3_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fb4:	4b19      	ldr	r3, [pc, #100]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc2:	4916      	ldr	r1, [pc, #88]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d036      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fde:	d01f      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003fe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fe4:	d817      	bhi.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fee:	d009      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003ff0:	e011      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 f93f 	bl	800427c <RCCEx_PLL2_Config>
 8003ffe:	4603      	mov	r3, r0
 8004000:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004002:	e00e      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3324      	adds	r3, #36	; 0x24
 8004008:	2102      	movs	r1, #2
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f9e8 	bl	80043e0 <RCCEx_PLL3_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004014:	e005      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	75fb      	strb	r3, [r7, #23]
      break;
 800401a:	e002      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800401c:	58024400 	.word	0x58024400
      break;
 8004020:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004022:	7dfb      	ldrb	r3, [r7, #23]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10a      	bne.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004028:	4b93      	ldr	r3, [pc, #588]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800402a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004036:	4990      	ldr	r1, [pc, #576]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004038:	4313      	orrs	r3, r2
 800403a:	658b      	str	r3, [r1, #88]	; 0x58
 800403c:	e001      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403e:	7dfb      	ldrb	r3, [r7, #23]
 8004040:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d033      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004054:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004058:	d01c      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800405a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800405e:	d816      	bhi.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004060:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004064:	d003      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800406a:	d007      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800406c:	e00f      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406e:	4b82      	ldr	r3, [pc, #520]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	4a81      	ldr	r2, [pc, #516]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004078:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800407a:	e00c      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3324      	adds	r3, #36	; 0x24
 8004080:	2101      	movs	r1, #1
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f9ac 	bl	80043e0 <RCCEx_PLL3_Config>
 8004088:	4603      	mov	r3, r0
 800408a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800408c:	e003      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	75fb      	strb	r3, [r7, #23]
      break;
 8004092:	e000      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004096:	7dfb      	ldrb	r3, [r7, #23]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d10a      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800409c:	4b76      	ldr	r3, [pc, #472]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800409e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040aa:	4973      	ldr	r1, [pc, #460]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	654b      	str	r3, [r1, #84]	; 0x54
 80040b0:	e001      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b2:	7dfb      	ldrb	r3, [r7, #23]
 80040b4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d029      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80040ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ce:	d007      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80040d0:	e00f      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d2:	4b69      	ldr	r3, [pc, #420]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d6:	4a68      	ldr	r2, [pc, #416]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80040d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040de:	e00b      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	2102      	movs	r1, #2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f8c8 	bl	800427c <RCCEx_PLL2_Config>
 80040ec:	4603      	mov	r3, r0
 80040ee:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80040f0:	e002      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	75fb      	strb	r3, [r7, #23]
      break;
 80040f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040f8:	7dfb      	ldrb	r3, [r7, #23]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d109      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040fe:	4b5e      	ldr	r3, [pc, #376]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004102:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800410a:	495b      	ldr	r1, [pc, #364]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800410c:	4313      	orrs	r3, r2
 800410e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004110:	e001      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004112:	7dfb      	ldrb	r3, [r7, #23]
 8004114:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	3324      	adds	r3, #36	; 0x24
 8004126:	2102      	movs	r1, #2
 8004128:	4618      	mov	r0, r3
 800412a:	f000 f959 	bl	80043e0 <RCCEx_PLL3_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d030      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004148:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800414c:	d017      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800414e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004152:	d811      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004158:	d013      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800415a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415e:	d80b      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004160:	2b00      	cmp	r3, #0
 8004162:	d010      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004168:	d106      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800416a:	4b43      	ldr	r3, [pc, #268]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	4a42      	ldr	r2, [pc, #264]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004174:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004176:	e007      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	75fb      	strb	r3, [r7, #23]
      break;
 800417c:	e004      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800417e:	bf00      	nop
 8004180:	e002      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004182:	bf00      	nop
 8004184:	e000      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004186:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004188:	7dfb      	ldrb	r3, [r7, #23]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d109      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800418e:	4b3a      	ldr	r3, [pc, #232]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800419a:	4937      	ldr	r1, [pc, #220]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800419c:	4313      	orrs	r3, r2
 800419e:	654b      	str	r3, [r1, #84]	; 0x54
 80041a0:	e001      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
 80041a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d008      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041b2:	4b31      	ldr	r3, [pc, #196]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041be:	492e      	ldr	r1, [pc, #184]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d009      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80041d0:	4b29      	ldr	r3, [pc, #164]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041d2:	691b      	ldr	r3, [r3, #16]
 80041d4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041de:	4926      	ldr	r1, [pc, #152]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041f0:	4b21      	ldr	r3, [pc, #132]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041fc:	491e      	ldr	r1, [pc, #120]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	4a19      	ldr	r2, [pc, #100]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004214:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004218:	6113      	str	r3, [r2, #16]
 800421a:	4b17      	ldr	r3, [pc, #92]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800421c:	691a      	ldr	r2, [r3, #16]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004224:	4914      	ldr	r1, [pc, #80]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004226:	4313      	orrs	r3, r2
 8004228:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	da08      	bge.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004232:	4b11      	ldr	r3, [pc, #68]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004236:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423e:	490e      	ldr	r1, [pc, #56]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004240:	4313      	orrs	r3, r2
 8004242:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d009      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004254:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	4906      	ldr	r1, [pc, #24]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004260:	4313      	orrs	r3, r2
 8004262:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004264:	7dbb      	ldrb	r3, [r7, #22]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e000      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	58024400 	.word	0x58024400

0800427c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004286:	2300      	movs	r3, #0
 8004288:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800428a:	4b53      	ldr	r3, [pc, #332]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 800428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428e:	f003 0303 	and.w	r3, r3, #3
 8004292:	2b03      	cmp	r3, #3
 8004294:	d101      	bne.n	800429a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e099      	b.n	80043ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800429a:	4b4f      	ldr	r3, [pc, #316]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a4e      	ldr	r2, [pc, #312]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 80042a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80042a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a6:	f7fc fe53 	bl	8000f50 <HAL_GetTick>
 80042aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042ac:	e008      	b.n	80042c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80042ae:	f7fc fe4f 	bl	8000f50 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d901      	bls.n	80042c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e086      	b.n	80043ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042c0:	4b45      	ldr	r3, [pc, #276]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f0      	bne.n	80042ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042cc:	4b42      	ldr	r3, [pc, #264]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 80042ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	031b      	lsls	r3, r3, #12
 80042da:	493f      	ldr	r1, [pc, #252]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	628b      	str	r3, [r1, #40]	; 0x28
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	3b01      	subs	r3, #1
 80042e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	025b      	lsls	r3, r3, #9
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	041b      	lsls	r3, r3, #16
 80042fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004302:	431a      	orrs	r2, r3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	3b01      	subs	r3, #1
 800430a:	061b      	lsls	r3, r3, #24
 800430c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004310:	4931      	ldr	r1, [pc, #196]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004312:	4313      	orrs	r3, r2
 8004314:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004316:	4b30      	ldr	r3, [pc, #192]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	492d      	ldr	r1, [pc, #180]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004324:	4313      	orrs	r3, r2
 8004326:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004328:	4b2b      	ldr	r3, [pc, #172]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	f023 0220 	bic.w	r2, r3, #32
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	4928      	ldr	r1, [pc, #160]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004336:	4313      	orrs	r3, r2
 8004338:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800433a:	4b27      	ldr	r3, [pc, #156]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	4a26      	ldr	r2, [pc, #152]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004340:	f023 0310 	bic.w	r3, r3, #16
 8004344:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004346:	4b24      	ldr	r3, [pc, #144]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800434a:	4b24      	ldr	r3, [pc, #144]	; (80043dc <RCCEx_PLL2_Config+0x160>)
 800434c:	4013      	ands	r3, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	69d2      	ldr	r2, [r2, #28]
 8004352:	00d2      	lsls	r2, r2, #3
 8004354:	4920      	ldr	r1, [pc, #128]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004356:	4313      	orrs	r3, r2
 8004358:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800435a:	4b1f      	ldr	r3, [pc, #124]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	4a1e      	ldr	r2, [pc, #120]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004360:	f043 0310 	orr.w	r3, r3, #16
 8004364:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 800436e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004370:	4a19      	ldr	r2, [pc, #100]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004376:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004378:	e00f      	b.n	800439a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d106      	bne.n	800438e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004380:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800438a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800438c:	e005      	b.n	800439a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800438e:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004392:	4a11      	ldr	r2, [pc, #68]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 8004394:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004398:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800439a:	4b0f      	ldr	r3, [pc, #60]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a0e      	ldr	r2, [pc, #56]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 80043a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a6:	f7fc fdd3 	bl	8000f50 <HAL_GetTick>
 80043aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043ac:	e008      	b.n	80043c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80043ae:	f7fc fdcf 	bl	8000f50 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e006      	b.n	80043ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <RCCEx_PLL2_Config+0x15c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	58024400 	.word	0x58024400
 80043dc:	ffff0007 	.word	0xffff0007

080043e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043ee:	4b53      	ldr	r3, [pc, #332]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b03      	cmp	r3, #3
 80043f8:	d101      	bne.n	80043fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e099      	b.n	8004532 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80043fe:	4b4f      	ldr	r3, [pc, #316]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a4e      	ldr	r2, [pc, #312]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004408:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800440a:	f7fc fda1 	bl	8000f50 <HAL_GetTick>
 800440e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004410:	e008      	b.n	8004424 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004412:	f7fc fd9d 	bl	8000f50 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e086      	b.n	8004532 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004424:	4b45      	ldr	r3, [pc, #276]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1f0      	bne.n	8004412 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004430:	4b42      	ldr	r3, [pc, #264]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	051b      	lsls	r3, r3, #20
 800443e:	493f      	ldr	r1, [pc, #252]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004440:	4313      	orrs	r3, r2
 8004442:	628b      	str	r3, [r1, #40]	; 0x28
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	3b01      	subs	r3, #1
 800444a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	3b01      	subs	r3, #1
 8004454:	025b      	lsls	r3, r3, #9
 8004456:	b29b      	uxth	r3, r3
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	3b01      	subs	r3, #1
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	691b      	ldr	r3, [r3, #16]
 800446c:	3b01      	subs	r3, #1
 800446e:	061b      	lsls	r3, r3, #24
 8004470:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004474:	4931      	ldr	r1, [pc, #196]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004476:	4313      	orrs	r3, r2
 8004478:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800447a:	4b30      	ldr	r3, [pc, #192]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	492d      	ldr	r1, [pc, #180]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004488:	4313      	orrs	r3, r2
 800448a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800448c:	4b2b      	ldr	r3, [pc, #172]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	4928      	ldr	r1, [pc, #160]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 800449a:	4313      	orrs	r3, r2
 800449c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800449e:	4b27      	ldr	r3, [pc, #156]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	4a26      	ldr	r2, [pc, #152]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80044aa:	4b24      	ldr	r3, [pc, #144]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ae:	4b24      	ldr	r3, [pc, #144]	; (8004540 <RCCEx_PLL3_Config+0x160>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	69d2      	ldr	r2, [r2, #28]
 80044b6:	00d2      	lsls	r2, r2, #3
 80044b8:	4920      	ldr	r1, [pc, #128]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80044be:	4b1f      	ldr	r3, [pc, #124]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	4a1e      	ldr	r2, [pc, #120]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d106      	bne.n	80044de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	4a19      	ldr	r2, [pc, #100]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044dc:	e00f      	b.n	80044fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d106      	bne.n	80044f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80044e4:	4b15      	ldr	r3, [pc, #84]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e8:	4a14      	ldr	r2, [pc, #80]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80044f0:	e005      	b.n	80044fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80044f2:	4b12      	ldr	r3, [pc, #72]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f6:	4a11      	ldr	r2, [pc, #68]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 80044f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80044fe:	4b0f      	ldr	r3, [pc, #60]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a0e      	ldr	r2, [pc, #56]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450a:	f7fc fd21 	bl	8000f50 <HAL_GetTick>
 800450e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004510:	e008      	b.n	8004524 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004512:	f7fc fd1d 	bl	8000f50 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e006      	b.n	8004532 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <RCCEx_PLL3_Config+0x15c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	58024400 	.word	0x58024400
 8004540:	ffff0007 	.word	0xffff0007

08004544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e049      	b.n	80045ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fc fb6c 	bl	8000c48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f000 f92a 	bl	80047dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
	...

080045f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_TIM_ConfigClockSource+0x18>
 8004608:	2302      	movs	r3, #2
 800460a:	e0db      	b.n	80047c4 <HAL_TIM_ConfigClockSource+0x1d0>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4b69      	ldr	r3, [pc, #420]	; (80047cc <HAL_TIM_ConfigClockSource+0x1d8>)
 8004628:	4013      	ands	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004632:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a63      	ldr	r2, [pc, #396]	; (80047d0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8004642:	4293      	cmp	r3, r2
 8004644:	f000 80a9 	beq.w	800479a <HAL_TIM_ConfigClockSource+0x1a6>
 8004648:	4a61      	ldr	r2, [pc, #388]	; (80047d0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	f200 80ae 	bhi.w	80047ac <HAL_TIM_ConfigClockSource+0x1b8>
 8004650:	4a60      	ldr	r2, [pc, #384]	; (80047d4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8004652:	4293      	cmp	r3, r2
 8004654:	f000 80a1 	beq.w	800479a <HAL_TIM_ConfigClockSource+0x1a6>
 8004658:	4a5e      	ldr	r2, [pc, #376]	; (80047d4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	f200 80a6 	bhi.w	80047ac <HAL_TIM_ConfigClockSource+0x1b8>
 8004660:	4a5d      	ldr	r2, [pc, #372]	; (80047d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	f000 8099 	beq.w	800479a <HAL_TIM_ConfigClockSource+0x1a6>
 8004668:	4a5b      	ldr	r2, [pc, #364]	; (80047d8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800466a:	4293      	cmp	r3, r2
 800466c:	f200 809e 	bhi.w	80047ac <HAL_TIM_ConfigClockSource+0x1b8>
 8004670:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004674:	f000 8091 	beq.w	800479a <HAL_TIM_ConfigClockSource+0x1a6>
 8004678:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800467c:	f200 8096 	bhi.w	80047ac <HAL_TIM_ConfigClockSource+0x1b8>
 8004680:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004684:	f000 8089 	beq.w	800479a <HAL_TIM_ConfigClockSource+0x1a6>
 8004688:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800468c:	f200 808e 	bhi.w	80047ac <HAL_TIM_ConfigClockSource+0x1b8>
 8004690:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004694:	d03e      	beq.n	8004714 <HAL_TIM_ConfigClockSource+0x120>
 8004696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800469a:	f200 8087 	bhi.w	80047ac <HAL_TIM_ConfigClockSource+0x1b8>
 800469e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046a2:	f000 8085 	beq.w	80047b0 <HAL_TIM_ConfigClockSource+0x1bc>
 80046a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046aa:	d87f      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x1b8>
 80046ac:	2b70      	cmp	r3, #112	; 0x70
 80046ae:	d01a      	beq.n	80046e6 <HAL_TIM_ConfigClockSource+0xf2>
 80046b0:	2b70      	cmp	r3, #112	; 0x70
 80046b2:	d87b      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x1b8>
 80046b4:	2b60      	cmp	r3, #96	; 0x60
 80046b6:	d050      	beq.n	800475a <HAL_TIM_ConfigClockSource+0x166>
 80046b8:	2b60      	cmp	r3, #96	; 0x60
 80046ba:	d877      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x1b8>
 80046bc:	2b50      	cmp	r3, #80	; 0x50
 80046be:	d03c      	beq.n	800473a <HAL_TIM_ConfigClockSource+0x146>
 80046c0:	2b50      	cmp	r3, #80	; 0x50
 80046c2:	d873      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x1b8>
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d058      	beq.n	800477a <HAL_TIM_ConfigClockSource+0x186>
 80046c8:	2b40      	cmp	r3, #64	; 0x40
 80046ca:	d86f      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x1b8>
 80046cc:	2b30      	cmp	r3, #48	; 0x30
 80046ce:	d064      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x1a6>
 80046d0:	2b30      	cmp	r3, #48	; 0x30
 80046d2:	d86b      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x1b8>
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d060      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x1a6>
 80046d8:	2b20      	cmp	r3, #32
 80046da:	d867      	bhi.n	80047ac <HAL_TIM_ConfigClockSource+0x1b8>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d05c      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x1a6>
 80046e0:	2b10      	cmp	r3, #16
 80046e2:	d05a      	beq.n	800479a <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80046e4:	e062      	b.n	80047ac <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	6899      	ldr	r1, [r3, #8]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f000 f989 	bl	8004a0c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004708:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	609a      	str	r2, [r3, #8]
      break;
 8004712:	e04e      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	6899      	ldr	r1, [r3, #8]
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f000 f972 	bl	8004a0c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004736:	609a      	str	r2, [r3, #8]
      break;
 8004738:	e03b      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6859      	ldr	r1, [r3, #4]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	461a      	mov	r2, r3
 8004748:	f000 f8e2 	bl	8004910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2150      	movs	r1, #80	; 0x50
 8004752:	4618      	mov	r0, r3
 8004754:	f000 f93c 	bl	80049d0 <TIM_ITRx_SetConfig>
      break;
 8004758:	e02b      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6859      	ldr	r1, [r3, #4]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	461a      	mov	r2, r3
 8004768:	f000 f901 	bl	800496e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2160      	movs	r1, #96	; 0x60
 8004772:	4618      	mov	r0, r3
 8004774:	f000 f92c 	bl	80049d0 <TIM_ITRx_SetConfig>
      break;
 8004778:	e01b      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	6859      	ldr	r1, [r3, #4]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	461a      	mov	r2, r3
 8004788:	f000 f8c2 	bl	8004910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2140      	movs	r1, #64	; 0x40
 8004792:	4618      	mov	r0, r3
 8004794:	f000 f91c 	bl	80049d0 <TIM_ITRx_SetConfig>
      break;
 8004798:	e00b      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f000 f913 	bl	80049d0 <TIM_ITRx_SetConfig>
        break;
 80047aa:	e002      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80047ac:	bf00      	nop
 80047ae:	e000      	b.n	80047b2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80047b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	ffceff88 	.word	0xffceff88
 80047d0:	00100040 	.word	0x00100040
 80047d4:	00100030 	.word	0x00100030
 80047d8:	00100020 	.word	0x00100020

080047dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a40      	ldr	r2, [pc, #256]	; (80048f0 <TIM_Base_SetConfig+0x114>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d013      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fa:	d00f      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a3d      	ldr	r2, [pc, #244]	; (80048f4 <TIM_Base_SetConfig+0x118>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d00b      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a3c      	ldr	r2, [pc, #240]	; (80048f8 <TIM_Base_SetConfig+0x11c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d007      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a3b      	ldr	r2, [pc, #236]	; (80048fc <TIM_Base_SetConfig+0x120>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d003      	beq.n	800481c <TIM_Base_SetConfig+0x40>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a3a      	ldr	r2, [pc, #232]	; (8004900 <TIM_Base_SetConfig+0x124>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d108      	bne.n	800482e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2f      	ldr	r2, [pc, #188]	; (80048f0 <TIM_Base_SetConfig+0x114>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01f      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800483c:	d01b      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a2c      	ldr	r2, [pc, #176]	; (80048f4 <TIM_Base_SetConfig+0x118>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d017      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a2b      	ldr	r2, [pc, #172]	; (80048f8 <TIM_Base_SetConfig+0x11c>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d013      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a2a      	ldr	r2, [pc, #168]	; (80048fc <TIM_Base_SetConfig+0x120>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00f      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a29      	ldr	r2, [pc, #164]	; (8004900 <TIM_Base_SetConfig+0x124>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d00b      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a28      	ldr	r2, [pc, #160]	; (8004904 <TIM_Base_SetConfig+0x128>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d007      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a27      	ldr	r2, [pc, #156]	; (8004908 <TIM_Base_SetConfig+0x12c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d003      	beq.n	8004876 <TIM_Base_SetConfig+0x9a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a26      	ldr	r2, [pc, #152]	; (800490c <TIM_Base_SetConfig+0x130>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d108      	bne.n	8004888 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4313      	orrs	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a10      	ldr	r2, [pc, #64]	; (80048f0 <TIM_Base_SetConfig+0x114>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00f      	beq.n	80048d4 <TIM_Base_SetConfig+0xf8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a12      	ldr	r2, [pc, #72]	; (8004900 <TIM_Base_SetConfig+0x124>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d00b      	beq.n	80048d4 <TIM_Base_SetConfig+0xf8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a11      	ldr	r2, [pc, #68]	; (8004904 <TIM_Base_SetConfig+0x128>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d007      	beq.n	80048d4 <TIM_Base_SetConfig+0xf8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a10      	ldr	r2, [pc, #64]	; (8004908 <TIM_Base_SetConfig+0x12c>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d003      	beq.n	80048d4 <TIM_Base_SetConfig+0xf8>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a0f      	ldr	r2, [pc, #60]	; (800490c <TIM_Base_SetConfig+0x130>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d103      	bne.n	80048dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	615a      	str	r2, [r3, #20]
}
 80048e2:	bf00      	nop
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40010000 	.word	0x40010000
 80048f4:	40000400 	.word	0x40000400
 80048f8:	40000800 	.word	0x40000800
 80048fc:	40000c00 	.word	0x40000c00
 8004900:	40010400 	.word	0x40010400
 8004904:	40014000 	.word	0x40014000
 8004908:	40014400 	.word	0x40014400
 800490c:	40014800 	.word	0x40014800

08004910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004910:	b480      	push	{r7}
 8004912:	b087      	sub	sp, #28
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	f023 0201 	bic.w	r2, r3, #1
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800493a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f023 030a 	bic.w	r3, r3, #10
 800494c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4313      	orrs	r3, r2
 8004954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	693a      	ldr	r2, [r7, #16]
 800495a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	621a      	str	r2, [r3, #32]
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800496e:	b480      	push	{r7}
 8004970:	b087      	sub	sp, #28
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	f023 0210 	bic.w	r2, r3, #16
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004998:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	031b      	lsls	r3, r3, #12
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	697a      	ldr	r2, [r7, #20]
 80049ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	621a      	str	r2, [r3, #32]
}
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
	...

080049d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <TIM_ITRx_SetConfig+0x38>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f043 0307 	orr.w	r3, r3, #7
 80049f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	609a      	str	r2, [r3, #8]
}
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	ffcfff8f 	.word	0xffcfff8f

08004a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	021a      	lsls	r2, r3, #8
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	431a      	orrs	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	609a      	str	r2, [r3, #8]
}
 8004a40:	bf00      	nop
 8004a42:	371c      	adds	r7, #28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e068      	b.n	8004b36 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2202      	movs	r2, #2
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2e      	ldr	r2, [pc, #184]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d004      	beq.n	8004a98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2d      	ldr	r2, [pc, #180]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d108      	bne.n	8004aaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d01d      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad6:	d018      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d013      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1a      	ldr	r2, [pc, #104]	; (8004b50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a18      	ldr	r2, [pc, #96]	; (8004b54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d009      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a13      	ldr	r2, [pc, #76]	; (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a14      	ldr	r2, [pc, #80]	; (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d10c      	bne.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	68ba      	ldr	r2, [r7, #8]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40010000 	.word	0x40010000
 8004b48:	40010400 	.word	0x40010400
 8004b4c:	40000400 	.word	0x40000400
 8004b50:	40000800 	.word	0x40000800
 8004b54:	40000c00 	.word	0x40000c00
 8004b58:	40001800 	.word	0x40001800

08004b5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b5c:	b084      	sub	sp, #16
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	f107 001c 	add.w	r0, r7, #28
 8004b6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d120      	bne.n	8004bb6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	4b2a      	ldr	r3, [pc, #168]	; (8004c30 <USB_CoreInit+0xd4>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d105      	bne.n	8004baa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa60 	bl	8005070 <USB_CoreReset>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	73fb      	strb	r3, [r7, #15]
 8004bb4:	e01a      	b.n	8004bec <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa54 	bl	8005070 <USB_CoreReset>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d106      	bne.n	8004be0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	639a      	str	r2, [r3, #56]	; 0x38
 8004bde:	e005      	b.n	8004bec <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d116      	bne.n	8004c20 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <USB_CoreInit+0xd8>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f043 0206 	orr.w	r2, r3, #6
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f043 0220 	orr.w	r2, r3, #32
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c2c:	b004      	add	sp, #16
 8004c2e:	4770      	bx	lr
 8004c30:	ffbdffbf 	.word	0xffbdffbf
 8004c34:	03ee0000 	.word	0x03ee0000

08004c38 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f023 0201 	bic.w	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b082      	sub	sp, #8
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	460b      	mov	r3, r1
 8004c64:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d106      	bne.n	8004c86 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	60da      	str	r2, [r3, #12]
 8004c84:	e00b      	b.n	8004c9e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c86:	78fb      	ldrb	r3, [r7, #3]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	60da      	str	r2, [r3, #12]
 8004c98:	e001      	b.n	8004c9e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e003      	b.n	8004ca6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004c9e:	2032      	movs	r0, #50	; 0x32
 8004ca0:	f7fc f962 	bl	8000f68 <HAL_Delay>

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3708      	adds	r7, #8
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
	...

08004cb0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	b580      	push	{r7, lr}
 8004cb4:	b086      	sub	sp, #24
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
 8004cba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004cca:	2300      	movs	r3, #0
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	e009      	b.n	8004ce4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	3340      	adds	r3, #64	; 0x40
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	2200      	movs	r2, #0
 8004cdc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	2b0e      	cmp	r3, #14
 8004ce8:	d9f2      	bls.n	8004cd0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d11c      	bne.n	8004d2a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cfe:	f043 0302 	orr.w	r3, r3, #2
 8004d02:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	e005      	b.n	8004d36 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	2300      	movs	r3, #0
 8004d40:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d48:	4619      	mov	r1, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d50:	461a      	mov	r2, r3
 8004d52:	680b      	ldr	r3, [r1, #0]
 8004d54:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d10c      	bne.n	8004d76 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d104      	bne.n	8004d6c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d62:	2100      	movs	r1, #0
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f949 	bl	8004ffc <USB_SetDevSpeed>
 8004d6a:	e008      	b.n	8004d7e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f944 	bl	8004ffc <USB_SetDevSpeed>
 8004d74:	e003      	b.n	8004d7e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d76:	2103      	movs	r1, #3
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f93f 	bl	8004ffc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d7e:	2110      	movs	r1, #16
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f000 f8f3 	bl	8004f6c <USB_FlushTxFifo>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f911 	bl	8004fb8 <USB_FlushRxFifo>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da6:	461a      	mov	r2, r3
 8004da8:	2300      	movs	r3, #0
 8004daa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db2:	461a      	mov	r2, r3
 8004db4:	2300      	movs	r3, #0
 8004db6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	e043      	b.n	8004e52 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004de0:	d118      	bne.n	8004e14 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df4:	461a      	mov	r2, r3
 8004df6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dfa:	6013      	str	r3, [r2, #0]
 8004dfc:	e013      	b.n	8004e26 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	e008      	b.n	8004e26 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e20:	461a      	mov	r2, r3
 8004e22:	2300      	movs	r3, #0
 8004e24:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e32:	461a      	mov	r2, r3
 8004e34:	2300      	movs	r3, #0
 8004e36:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	461a      	mov	r2, r3
 8004e46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	613b      	str	r3, [r7, #16]
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d3b7      	bcc.n	8004dca <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	e043      	b.n	8004ee8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e76:	d118      	bne.n	8004eaa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10a      	bne.n	8004e94 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e013      	b.n	8004ebc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	e008      	b.n	8004ebc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	2300      	movs	r3, #0
 8004eba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec8:	461a      	mov	r2, r3
 8004eca:	2300      	movs	r3, #0
 8004ecc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eda:	461a      	mov	r2, r3
 8004edc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ee0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	613b      	str	r3, [r7, #16]
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d3b7      	bcc.n	8004e60 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	68fa      	ldr	r2, [r7, #12]
 8004efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004efe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f02:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f10:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d105      	bne.n	8004f24 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f043 0210 	orr.w	r2, r3, #16
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699a      	ldr	r2, [r3, #24]
 8004f28:	4b0e      	ldr	r3, [pc, #56]	; (8004f64 <USB_DevInit+0x2b4>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d005      	beq.n	8004f42 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f043 0208 	orr.w	r2, r3, #8
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d105      	bne.n	8004f54 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699a      	ldr	r2, [r3, #24]
 8004f4c:	4b06      	ldr	r3, [pc, #24]	; (8004f68 <USB_DevInit+0x2b8>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f60:	b004      	add	sp, #16
 8004f62:	4770      	bx	lr
 8004f64:	803c3800 	.word	0x803c3800
 8004f68:	40000004 	.word	0x40000004

08004f6c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	019b      	lsls	r3, r3, #6
 8004f7e:	f043 0220 	orr.w	r2, r3, #32
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4a09      	ldr	r2, [pc, #36]	; (8004fb4 <USB_FlushTxFifo+0x48>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d901      	bls.n	8004f98 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e006      	b.n	8004fa6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b20      	cmp	r3, #32
 8004fa2:	d0f0      	beq.n	8004f86 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	00030d40 	.word	0x00030d40

08004fb8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2210      	movs	r2, #16
 8004fc8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3301      	adds	r3, #1
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <USB_FlushRxFifo+0x40>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d901      	bls.n	8004fdc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e006      	b.n	8004fea <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	2b10      	cmp	r3, #16
 8004fe6:	d0f0      	beq.n	8004fca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	00030d40 	.word	0x00030d40

08004ffc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	460b      	mov	r3, r1
 8005006:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	68f9      	ldr	r1, [r7, #12]
 8005018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800501c:	4313      	orrs	r3, r2
 800501e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800502e:	b480      	push	{r7}
 8005030:	b085      	sub	sp, #20
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005048:	f023 0303 	bic.w	r3, r3, #3
 800504c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800505c:	f043 0302 	orr.w	r3, r3, #2
 8005060:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	3301      	adds	r3, #1
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4a13      	ldr	r2, [pc, #76]	; (80050d4 <USB_CoreReset+0x64>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d901      	bls.n	800508e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e01b      	b.n	80050c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	daf2      	bge.n	800507c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f043 0201 	orr.w	r2, r3, #1
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3301      	adds	r3, #1
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	4a09      	ldr	r2, [pc, #36]	; (80050d4 <USB_CoreReset+0x64>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d901      	bls.n	80050b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e006      	b.n	80050c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d0f0      	beq.n	80050a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	00030d40 	.word	0x00030d40

080050d8 <__libc_init_array>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	4d0d      	ldr	r5, [pc, #52]	; (8005110 <__libc_init_array+0x38>)
 80050dc:	4c0d      	ldr	r4, [pc, #52]	; (8005114 <__libc_init_array+0x3c>)
 80050de:	1b64      	subs	r4, r4, r5
 80050e0:	10a4      	asrs	r4, r4, #2
 80050e2:	2600      	movs	r6, #0
 80050e4:	42a6      	cmp	r6, r4
 80050e6:	d109      	bne.n	80050fc <__libc_init_array+0x24>
 80050e8:	4d0b      	ldr	r5, [pc, #44]	; (8005118 <__libc_init_array+0x40>)
 80050ea:	4c0c      	ldr	r4, [pc, #48]	; (800511c <__libc_init_array+0x44>)
 80050ec:	f000 f820 	bl	8005130 <_init>
 80050f0:	1b64      	subs	r4, r4, r5
 80050f2:	10a4      	asrs	r4, r4, #2
 80050f4:	2600      	movs	r6, #0
 80050f6:	42a6      	cmp	r6, r4
 80050f8:	d105      	bne.n	8005106 <__libc_init_array+0x2e>
 80050fa:	bd70      	pop	{r4, r5, r6, pc}
 80050fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005100:	4798      	blx	r3
 8005102:	3601      	adds	r6, #1
 8005104:	e7ee      	b.n	80050e4 <__libc_init_array+0xc>
 8005106:	f855 3b04 	ldr.w	r3, [r5], #4
 800510a:	4798      	blx	r3
 800510c:	3601      	adds	r6, #1
 800510e:	e7f2      	b.n	80050f6 <__libc_init_array+0x1e>
 8005110:	08005170 	.word	0x08005170
 8005114:	08005170 	.word	0x08005170
 8005118:	08005170 	.word	0x08005170
 800511c:	08005174 	.word	0x08005174

08005120 <memset>:
 8005120:	4402      	add	r2, r0
 8005122:	4603      	mov	r3, r0
 8005124:	4293      	cmp	r3, r2
 8005126:	d100      	bne.n	800512a <memset+0xa>
 8005128:	4770      	bx	lr
 800512a:	f803 1b01 	strb.w	r1, [r3], #1
 800512e:	e7f9      	b.n	8005124 <memset+0x4>

08005130 <_init>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr

0800513c <_fini>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	bf00      	nop
 8005140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005142:	bc08      	pop	{r3}
 8005144:	469e      	mov	lr, r3
 8005146:	4770      	bx	lr
