
Practica_3_1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047c0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a90  08004a90  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004a90  08004a90  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a90  08004a90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a90  08004a90  00014a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a94  08004a94  00014a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08004a98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  24000010  08004aa8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240004e0  08004aa8  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022955  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003854  00000000  00000000  00042993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  000461e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  000475c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a004  00000000  00000000  00048870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018057  00000000  00000000  00082874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017e3ab  00000000  00000000  0009a8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00218c76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d8  00000000  00000000  00218ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004a40 	.word	0x08004a40

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004a40 	.word	0x08004a40

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3f      	ldr	r3, [pc, #252]	; (80003dc <SystemInit+0x104>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3e      	ldr	r2, [pc, #248]	; (80003dc <SystemInit+0x104>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b3b      	ldr	r3, [pc, #236]	; (80003dc <SystemInit+0x104>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a3a      	ldr	r2, [pc, #232]	; (80003dc <SystemInit+0x104>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <SystemInit+0x108>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <SystemInit+0x108>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a34      	ldr	r2, [pc, #208]	; (80003e0 <SystemInit+0x108>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b33      	ldr	r3, [pc, #204]	; (80003e4 <SystemInit+0x10c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a32      	ldr	r2, [pc, #200]	; (80003e4 <SystemInit+0x10c>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <SystemInit+0x10c>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2f      	ldr	r3, [pc, #188]	; (80003e4 <SystemInit+0x10c>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492e      	ldr	r1, [pc, #184]	; (80003e4 <SystemInit+0x10c>)
 800032c:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <SystemInit+0x110>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b2b      	ldr	r3, [pc, #172]	; (80003e0 <SystemInit+0x108>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b28      	ldr	r3, [pc, #160]	; (80003e0 <SystemInit+0x108>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a26      	ldr	r2, [pc, #152]	; (80003e0 <SystemInit+0x108>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b25      	ldr	r3, [pc, #148]	; (80003e4 <SystemInit+0x10c>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b23      	ldr	r3, [pc, #140]	; (80003e4 <SystemInit+0x10c>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <SystemInit+0x10c>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b20      	ldr	r3, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000362:	4a22      	ldr	r2, [pc, #136]	; (80003ec <SystemInit+0x114>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <SystemInit+0x10c>)
 8000368:	4a21      	ldr	r2, [pc, #132]	; (80003f0 <SystemInit+0x118>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1d      	ldr	r3, [pc, #116]	; (80003e4 <SystemInit+0x10c>)
 800036e:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <SystemInit+0x11c>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <SystemInit+0x10c>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b1a      	ldr	r3, [pc, #104]	; (80003e4 <SystemInit+0x10c>)
 800037a:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <SystemInit+0x11c>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <SystemInit+0x10c>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <SystemInit+0x10c>)
 8000386:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <SystemInit+0x11c>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <SystemInit+0x10c>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <SystemInit+0x10c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a13      	ldr	r2, [pc, #76]	; (80003e4 <SystemInit+0x10c>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <SystemInit+0x10c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b15      	ldr	r3, [pc, #84]	; (80003f8 <SystemInit+0x120>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <SystemInit+0x120>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b13      	ldr	r3, [pc, #76]	; (80003fc <SystemInit+0x124>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <SystemInit+0x128>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b11      	ldr	r3, [pc, #68]	; (8000404 <SystemInit+0x12c>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b11      	ldr	r3, [pc, #68]	; (8000408 <SystemInit+0x130>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80003ca:	4b04      	ldr	r3, [pc, #16]	; (80003dc <SystemInit+0x104>)
 80003cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003d0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	e000ed00 	.word	0xe000ed00
 80003e0:	52002000 	.word	0x52002000
 80003e4:	58024400 	.word	0x58024400
 80003e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80003ec:	02020200 	.word	0x02020200
 80003f0:	01ff0000 	.word	0x01ff0000
 80003f4:	01010280 	.word	0x01010280
 80003f8:	580000c0 	.word	0x580000c0
 80003fc:	5c001000 	.word	0x5c001000
 8000400:	ffff0000 	.word	0xffff0000
 8000404:	51008108 	.word	0x51008108
 8000408:	52004000 	.word	0x52004000

0800040c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c4;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af02      	add	r7, sp, #8
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000416:	79fb      	ldrb	r3, [r7, #7]
 8000418:	f023 030f 	bic.w	r3, r3, #15
 800041c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	011b      	lsls	r3, r3, #4
 8000422:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000424:	7bfb      	ldrb	r3, [r7, #15]
 8000426:	f043 030c 	orr.w	r3, r3, #12
 800042a:	b2db      	uxtb	r3, r3
 800042c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800042e:	7bfb      	ldrb	r3, [r7, #15]
 8000430:	f043 0308 	orr.w	r3, r3, #8
 8000434:	b2db      	uxtb	r3, r3
 8000436:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000438:	7bbb      	ldrb	r3, [r7, #14]
 800043a:	f043 030c 	orr.w	r3, r3, #12
 800043e:	b2db      	uxtb	r3, r3
 8000440:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000442:	7bbb      	ldrb	r3, [r7, #14]
 8000444:	f043 0308 	orr.w	r3, r3, #8
 8000448:	b2db      	uxtb	r3, r3
 800044a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800044c:	f107 0208 	add.w	r2, r7, #8
 8000450:	2364      	movs	r3, #100	; 0x64
 8000452:	9300      	str	r3, [sp, #0]
 8000454:	2304      	movs	r3, #4
 8000456:	214e      	movs	r1, #78	; 0x4e
 8000458:	4803      	ldr	r0, [pc, #12]	; (8000468 <lcd_send_cmd+0x5c>)
 800045a:	f001 f865 	bl	8001528 <HAL_I2C_Master_Transmit>
}
 800045e:	bf00      	nop
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	2400002c 	.word	0x2400002c

0800046c <lcd_send_data>:

void lcd_send_data (char data)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af02      	add	r7, sp, #8
 8000472:	4603      	mov	r3, r0
 8000474:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000476:	79fb      	ldrb	r3, [r7, #7]
 8000478:	f023 030f 	bic.w	r3, r3, #15
 800047c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800047e:	79fb      	ldrb	r3, [r7, #7]
 8000480:	011b      	lsls	r3, r3, #4
 8000482:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	f043 030d 	orr.w	r3, r3, #13
 800048a:	b2db      	uxtb	r3, r3
 800048c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	f043 0309 	orr.w	r3, r3, #9
 8000494:	b2db      	uxtb	r3, r3
 8000496:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000498:	7bbb      	ldrb	r3, [r7, #14]
 800049a:	f043 030d 	orr.w	r3, r3, #13
 800049e:	b2db      	uxtb	r3, r3
 80004a0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80004a2:	7bbb      	ldrb	r3, [r7, #14]
 80004a4:	f043 0309 	orr.w	r3, r3, #9
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004ac:	f107 0208 	add.w	r2, r7, #8
 80004b0:	2364      	movs	r3, #100	; 0x64
 80004b2:	9300      	str	r3, [sp, #0]
 80004b4:	2304      	movs	r3, #4
 80004b6:	214e      	movs	r1, #78	; 0x4e
 80004b8:	4803      	ldr	r0, [pc, #12]	; (80004c8 <lcd_send_data+0x5c>)
 80004ba:	f001 f835 	bl	8001528 <HAL_I2C_Master_Transmit>
}
 80004be:	bf00      	nop
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	2400002c 	.word	0x2400002c

080004cc <lcd_clear>:

void lcd_clear (void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80004d2:	2080      	movs	r0, #128	; 0x80
 80004d4:	f7ff ff9a 	bl	800040c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80004d8:	2300      	movs	r3, #0
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	e005      	b.n	80004ea <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80004de:	2020      	movs	r0, #32
 80004e0:	f7ff ffc4 	bl	800046c <lcd_send_data>
	for (int i=0; i<70; i++)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	3301      	adds	r3, #1
 80004e8:	607b      	str	r3, [r7, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2b45      	cmp	r3, #69	; 0x45
 80004ee:	ddf6      	ble.n	80004de <lcd_clear+0x12>
	}
}
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80004fa:	b580      	push	{r7, lr}
 80004fc:	b082      	sub	sp, #8
 80004fe:	af00      	add	r7, sp, #0
 8000500:	6078      	str	r0, [r7, #4]
 8000502:	6039      	str	r1, [r7, #0]
    switch (row)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d003      	beq.n	8000512 <lcd_put_cur+0x18>
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d005      	beq.n	800051c <lcd_put_cur+0x22>
 8000510:	e009      	b.n	8000526 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000518:	603b      	str	r3, [r7, #0]
            break;
 800051a:	e004      	b.n	8000526 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000522:	603b      	str	r3, [r7, #0]
            break;
 8000524:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f7ff ff6e 	bl	800040c <lcd_send_cmd>
}
 8000530:	bf00      	nop
 8000532:	3708      	adds	r7, #8
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}

08000538 <lcd_init>:


void lcd_init (void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800053c:	2032      	movs	r0, #50	; 0x32
 800053e:	f000 fc71 	bl	8000e24 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000542:	2030      	movs	r0, #48	; 0x30
 8000544:	f7ff ff62 	bl	800040c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000548:	2005      	movs	r0, #5
 800054a:	f000 fc6b 	bl	8000e24 <HAL_Delay>
	lcd_send_cmd (0x30);
 800054e:	2030      	movs	r0, #48	; 0x30
 8000550:	f7ff ff5c 	bl	800040c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000554:	2001      	movs	r0, #1
 8000556:	f000 fc65 	bl	8000e24 <HAL_Delay>
	lcd_send_cmd (0x30);
 800055a:	2030      	movs	r0, #48	; 0x30
 800055c:	f7ff ff56 	bl	800040c <lcd_send_cmd>
	HAL_Delay(10);
 8000560:	200a      	movs	r0, #10
 8000562:	f000 fc5f 	bl	8000e24 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000566:	2020      	movs	r0, #32
 8000568:	f7ff ff50 	bl	800040c <lcd_send_cmd>
	HAL_Delay(10);
 800056c:	200a      	movs	r0, #10
 800056e:	f000 fc59 	bl	8000e24 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000572:	2028      	movs	r0, #40	; 0x28
 8000574:	f7ff ff4a 	bl	800040c <lcd_send_cmd>
	HAL_Delay(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f000 fc53 	bl	8000e24 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800057e:	2008      	movs	r0, #8
 8000580:	f7ff ff44 	bl	800040c <lcd_send_cmd>
	HAL_Delay(1);
 8000584:	2001      	movs	r0, #1
 8000586:	f000 fc4d 	bl	8000e24 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800058a:	2001      	movs	r0, #1
 800058c:	f7ff ff3e 	bl	800040c <lcd_send_cmd>
	HAL_Delay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f000 fc47 	bl	8000e24 <HAL_Delay>
	HAL_Delay(1);
 8000596:	2001      	movs	r0, #1
 8000598:	f000 fc44 	bl	8000e24 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800059c:	2006      	movs	r0, #6
 800059e:	f7ff ff35 	bl	800040c <lcd_send_cmd>
	HAL_Delay(1);
 80005a2:	2001      	movs	r0, #1
 80005a4:	f000 fc3e 	bl	8000e24 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80005a8:	200c      	movs	r0, #12
 80005aa:	f7ff ff2f 	bl	800040c <lcd_send_cmd>
}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	b082      	sub	sp, #8
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80005ba:	e006      	b.n	80005ca <lcd_send_string+0x18>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	1c5a      	adds	r2, r3, #1
 80005c0:	607a      	str	r2, [r7, #4]
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f7ff ff51 	bl	800046c <lcd_send_data>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d1f4      	bne.n	80005bc <lcd_send_string+0xa>
}
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80005e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80005e8:	bf00      	nop
 80005ea:	4b38      	ldr	r3, [pc, #224]	; (80006cc <main+0xf0>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d004      	beq.n	8000600 <main+0x24>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	1e5a      	subs	r2, r3, #1
 80005fa:	607a      	str	r2, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	dcf4      	bgt.n	80005ea <main+0xe>
  if ( timeout < 0 )
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	da01      	bge.n	800060a <main+0x2e>
  {
  Error_Handler();
 8000606:	f000 f9f7 	bl	80009f8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fb79 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f865 	bl	80006dc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000612:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <main+0xf0>)
 8000614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000618:	4a2c      	ldr	r2, [pc, #176]	; (80006cc <main+0xf0>)
 800061a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000622:	4b2a      	ldr	r3, [pc, #168]	; (80006cc <main+0xf0>)
 8000624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000630:	2000      	movs	r0, #0
 8000632:	f000 febb 	bl	80013ac <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000636:	2100      	movs	r1, #0
 8000638:	2000      	movs	r0, #0
 800063a:	f000 fed1 	bl	80013e0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800063e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000642:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000644:	bf00      	nop
 8000646:	4b21      	ldr	r3, [pc, #132]	; (80006cc <main+0xf0>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800064e:	2b00      	cmp	r3, #0
 8000650:	d104      	bne.n	800065c <main+0x80>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	1e5a      	subs	r2, r3, #1
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	2b00      	cmp	r3, #0
 800065a:	dcf4      	bgt.n	8000646 <main+0x6a>
if ( timeout < 0 )
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	da01      	bge.n	8000666 <main+0x8a>
{
Error_Handler();
 8000662:	f000 f9c9 	bl	80009f8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000666:	f000 f97f 	bl	8000968 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 800066a:	f000 f94b 	bl	8000904 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C4_Init();
 800066e:	f000 f8b9 	bl	80007e4 <MX_I2C4_Init>
  MX_TIM5_Init();
 8000672:	f000 f8f7 	bl	8000864 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000676:	f7ff ff5f 	bl	8000538 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_put_cur(0,0);
 800067a:	2100      	movs	r1, #0
 800067c:	2000      	movs	r0, #0
 800067e:	f7ff ff3c 	bl	80004fa <lcd_put_cur>
	  lcd_send_string("Raul Navarro Guevara");
 8000682:	4813      	ldr	r0, [pc, #76]	; (80006d0 <main+0xf4>)
 8000684:	f7ff ff95 	bl	80005b2 <lcd_send_string>
	  HAL_Delay(1000);
 8000688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800068c:	f000 fbca 	bl	8000e24 <HAL_Delay>
	  lcd_put_cur(0,5);
 8000690:	2105      	movs	r1, #5
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff ff31 	bl	80004fa <lcd_put_cur>
	  lcd_send_string("Frank");
 8000698:	480e      	ldr	r0, [pc, #56]	; (80006d4 <main+0xf8>)
 800069a:	f7ff ff8a 	bl	80005b2 <lcd_send_string>
	  lcd_put_cur(1,0);
 800069e:	2100      	movs	r1, #0
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff ff2a 	bl	80004fa <lcd_put_cur>
	  HAL_Delay(1000);
 80006a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006aa:	f000 fbbb 	bl	8000e24 <HAL_Delay>
	  lcd_send_string("Alex");
 80006ae:	480a      	ldr	r0, [pc, #40]	; (80006d8 <main+0xfc>)
 80006b0:	f7ff ff7f 	bl	80005b2 <lcd_send_string>
	  HAL_Delay(1000);
 80006b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b8:	f000 fbb4 	bl	8000e24 <HAL_Delay>
	  lcd_clear();
 80006bc:	f7ff ff06 	bl	80004cc <lcd_clear>
	  HAL_Delay(1000);
 80006c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006c4:	f000 fbae 	bl	8000e24 <HAL_Delay>
	  lcd_put_cur(0,0);
 80006c8:	e7d7      	b.n	800067a <main+0x9e>
 80006ca:	bf00      	nop
 80006cc:	58024400 	.word	0x58024400
 80006d0:	08004a58 	.word	0x08004a58
 80006d4:	08004a70 	.word	0x08004a70
 80006d8:	08004a78 	.word	0x08004a78

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b09c      	sub	sp, #112	; 0x70
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	224c      	movs	r2, #76	; 0x4c
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 f9a0 	bl	8004a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2220      	movs	r2, #32
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f004 f99a 	bl	8004a30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80006fc:	2004      	movs	r0, #4
 80006fe:	f001 fb5b 	bl	8001db8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000702:	2300      	movs	r3, #0
 8000704:	603b      	str	r3, [r7, #0]
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <SystemClock_Config+0xfc>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a33      	ldr	r2, [pc, #204]	; (80007d8 <SystemClock_Config+0xfc>)
 800070c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000710:	6193      	str	r3, [r2, #24]
 8000712:	4b31      	ldr	r3, [pc, #196]	; (80007d8 <SystemClock_Config+0xfc>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	4b2f      	ldr	r3, [pc, #188]	; (80007dc <SystemClock_Config+0x100>)
 800071e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000720:	4a2e      	ldr	r2, [pc, #184]	; (80007dc <SystemClock_Config+0x100>)
 8000722:	f043 0301 	orr.w	r3, r3, #1
 8000726:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000728:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <SystemClock_Config+0x100>)
 800072a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072c:	f003 0301 	and.w	r3, r3, #1
 8000730:	603b      	str	r3, [r7, #0]
 8000732:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000734:	bf00      	nop
 8000736:	4b28      	ldr	r3, [pc, #160]	; (80007d8 <SystemClock_Config+0xfc>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000742:	d1f8      	bne.n	8000736 <SystemClock_Config+0x5a>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000744:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <SystemClock_Config+0x104>)
 8000746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000748:	f023 0303 	bic.w	r3, r3, #3
 800074c:	4a24      	ldr	r2, [pc, #144]	; (80007e0 <SystemClock_Config+0x104>)
 800074e:	f043 0302 	orr.w	r3, r3, #2
 8000752:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000754:	2301      	movs	r3, #1
 8000756:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000758:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	2302      	movs	r3, #2
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000766:	2301      	movs	r3, #1
 8000768:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800076a:	2378      	movs	r3, #120	; 0x78
 800076c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800076e:	2302      	movs	r3, #2
 8000770:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000772:	2302      	movs	r3, #2
 8000774:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000776:	2302      	movs	r3, #2
 8000778:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800077a:	230c      	movs	r3, #12
 800077c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077e:	2300      	movs	r3, #0
 8000780:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fb7e 	bl	8001e8c <HAL_RCC_OscConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000796:	f000 f92f 	bl	80009f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079a:	233f      	movs	r3, #63	; 0x3f
 800079c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079e:	2303      	movs	r3, #3
 80007a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007a6:	2308      	movs	r3, #8
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007aa:	2340      	movs	r3, #64	; 0x40
 80007ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007ae:	2340      	movs	r3, #64	; 0x40
 80007b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007b8:	2340      	movs	r3, #64	; 0x40
 80007ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2104      	movs	r1, #4
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 ff73 	bl	80026ac <HAL_RCC_ClockConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80007cc:	f000 f914 	bl	80009f8 <Error_Handler>
  }
}
 80007d0:	bf00      	nop
 80007d2:	3770      	adds	r7, #112	; 0x70
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	58024800 	.word	0x58024800
 80007dc:	58000400 	.word	0x58000400
 80007e0:	58024400 	.word	0x58024400

080007e4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_I2C4_Init+0x74>)
 80007ea:	4a1c      	ldr	r2, [pc, #112]	; (800085c <MX_I2C4_Init+0x78>)
 80007ec:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x307075B1;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <MX_I2C4_Init+0x74>)
 80007f0:	4a1b      	ldr	r2, [pc, #108]	; (8000860 <MX_I2C4_Init+0x7c>)
 80007f2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80007f4:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_I2C4_Init+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007fa:	4b17      	ldr	r3, [pc, #92]	; (8000858 <MX_I2C4_Init+0x74>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000800:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_I2C4_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000806:	4b14      	ldr	r3, [pc, #80]	; (8000858 <MX_I2C4_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <MX_I2C4_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <MX_I2C4_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000818:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <MX_I2C4_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800081e:	480e      	ldr	r0, [pc, #56]	; (8000858 <MX_I2C4_Init+0x74>)
 8000820:	f000 fdf2 	bl	8001408 <HAL_I2C_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800082a:	f000 f8e5 	bl	80009f8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800082e:	2100      	movs	r1, #0
 8000830:	4809      	ldr	r0, [pc, #36]	; (8000858 <MX_I2C4_Init+0x74>)
 8000832:	f001 f8e1 	bl	80019f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800083c:	f000 f8dc 	bl	80009f8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000840:	2100      	movs	r1, #0
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_I2C4_Init+0x74>)
 8000844:	f001 f923 	bl	8001a8e <HAL_I2CEx_ConfigDigitalFilter>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800084e:	f000 f8d3 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	2400002c 	.word	0x2400002c
 800085c:	58001c00 	.word	0x58001c00
 8000860:	307075b1 	.word	0x307075b1

08000864 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000882:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <MX_TIM5_Init+0x98>)
 8000884:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <MX_TIM5_Init+0x9c>)
 8000886:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47999;
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_TIM5_Init+0x98>)
 800088a:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 800088e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_TIM5_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 5000;
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_TIM5_Init+0x98>)
 8000898:	f241 3288 	movw	r2, #5000	; 0x1388
 800089c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_TIM5_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_TIM5_Init+0x98>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_TIM5_Init+0x98>)
 80008ac:	f003 fad2 	bl	8003e54 <HAL_TIM_Base_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80008b6:	f000 f89f 	bl	80009f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4619      	mov	r1, r3
 80008c6:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_TIM5_Init+0x98>)
 80008c8:	f003 fb1c 	bl	8003f04 <HAL_TIM_ConfigClockSource>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80008d2:	f000 f891 	bl	80009f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <MX_TIM5_Init+0x98>)
 80008e4:	f003 fd3a 	bl	800435c <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80008ee:	f000 f883 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	24000480 	.word	0x24000480
 8000900:	40000c00 	.word	0x40000c00

08000904 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090a:	4a16      	ldr	r2, [pc, #88]	; (8000964 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800090c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000910:	2209      	movs	r2, #9
 8000912:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000914:	4b12      	ldr	r3, [pc, #72]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000916:	2202      	movs	r2, #2
 8000918:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000922:	2202      	movs	r2, #2
 8000924:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800093a:	2201      	movs	r2, #1
 800093c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000940:	2201      	movs	r2, #1
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000946:	2200      	movs	r2, #0
 8000948:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800094c:	f001 f8eb 	bl	8001b26 <HAL_PCD_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000956:	f000 f84f 	bl	80009f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	24000078 	.word	0x24000078
 8000964:	40080000 	.word	0x40080000

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_GPIO_Init+0x8c>)
 8000970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000974:	4a1f      	ldr	r2, [pc, #124]	; (80009f4 <MX_GPIO_Init+0x8c>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800097e:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_GPIO_Init+0x8c>)
 8000980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098c:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_GPIO_Init+0x8c>)
 800098e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000992:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <MX_GPIO_Init+0x8c>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000998:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_GPIO_Init+0x8c>)
 800099e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_GPIO_Init+0x8c>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b0:	4a10      	ldr	r2, [pc, #64]	; (80009f4 <MX_GPIO_Init+0x8c>)
 80009b2:	f043 0320 	orr.w	r3, r3, #32
 80009b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_GPIO_Init+0x8c>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c0:	f003 0320 	and.w	r3, r3, #32
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <MX_GPIO_Init+0x8c>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ce:	4a09      	ldr	r2, [pc, #36]	; (80009f4 <MX_GPIO_Init+0x8c>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_GPIO_Init+0x8c>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

}
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	58024400 	.word	0x58024400

080009f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fc:	b672      	cpsid	i
}
 80009fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <Error_Handler+0x8>
	...

08000a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <HAL_MspInit+0x30>)
 8000a0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a10:	4a08      	ldr	r2, [pc, #32]	; (8000a34 <HAL_MspInit+0x30>)
 8000a12:	f043 0302 	orr.w	r3, r3, #2
 8000a16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_MspInit+0x30>)
 8000a1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a20:	f003 0302 	and.w	r3, r3, #2
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	58024400 	.word	0x58024400

08000a38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b0b8      	sub	sp, #224	; 0xe0
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	22bc      	movs	r2, #188	; 0xbc
 8000a56:	2100      	movs	r1, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f003 ffe9 	bl	8004a30 <memset>
  if(hi2c->Instance==I2C4)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a25      	ldr	r2, [pc, #148]	; (8000af8 <HAL_I2C_MspInit+0xc0>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d142      	bne.n	8000aee <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8000a68:	2310      	movs	r3, #16
 8000a6a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a72:	f107 0310 	add.w	r3, r7, #16
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 f948 	bl	8002d0c <HAL_RCCEx_PeriphCLKConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a82:	f7ff ffb9 	bl	80009f8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <HAL_I2C_MspInit+0xc4>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	4a1b      	ldr	r2, [pc, #108]	; (8000afc <HAL_I2C_MspInit+0xc4>)
 8000a8e:	f043 0320 	orr.w	r3, r3, #32
 8000a92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a96:	4b19      	ldr	r3, [pc, #100]	; (8000afc <HAL_I2C_MspInit+0xc4>)
 8000a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9c:	f003 0320 	and.w	r3, r3, #32
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000aa4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000aa8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aac:	2312      	movs	r3, #18
 8000aae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ac4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ac8:	4619      	mov	r1, r3
 8000aca:	480d      	ldr	r0, [pc, #52]	; (8000b00 <HAL_I2C_MspInit+0xc8>)
 8000acc:	f000 fabe 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_I2C_MspInit+0xc4>)
 8000ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ad6:	4a09      	ldr	r2, [pc, #36]	; (8000afc <HAL_I2C_MspInit+0xc4>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <HAL_I2C_MspInit+0xc4>)
 8000ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aea:	60bb      	str	r3, [r7, #8]
 8000aec:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	37e0      	adds	r7, #224	; 0xe0
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	58001c00 	.word	0x58001c00
 8000afc:	58024400 	.word	0x58024400
 8000b00:	58021400 	.word	0x58021400

08000b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <HAL_TIM_Base_MspInit+0x3c>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d10e      	bne.n	8000b34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <HAL_TIM_Base_MspInit+0x40>)
 8000b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b1c:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <HAL_TIM_Base_MspInit+0x40>)
 8000b1e:	f043 0308 	orr.w	r3, r3, #8
 8000b22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <HAL_TIM_Base_MspInit+0x40>)
 8000b28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b2c:	f003 0308 	and.w	r3, r3, #8
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	40000c00 	.word	0x40000c00
 8000b44:	58024400 	.word	0x58024400

08000b48 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0b8      	sub	sp, #224	; 0xe0
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	22bc      	movs	r2, #188	; 0xbc
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f003 ff61 	bl	8004a30 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a36      	ldr	r2, [pc, #216]	; (8000c4c <HAL_PCD_MspInit+0x104>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d165      	bne.n	8000c44 <HAL_PCD_MspInit+0xfc>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000b78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000b7c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000b82:	2318      	movs	r3, #24
 8000b84:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000b86:	2302      	movs	r3, #2
 8000b88:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000b92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b96:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000b9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ba0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 f8af 	bl	8002d0c <HAL_RCCEx_PeriphCLKConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000bb4:	f7ff ff20 	bl	80009f8 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000bb8:	f001 f958 	bl	8001e6c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b24      	ldr	r3, [pc, #144]	; (8000c50 <HAL_PCD_MspInit+0x108>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc2:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <HAL_PCD_MspInit+0x108>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bcc:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <HAL_PCD_MspInit+0x108>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000bda:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000bde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bf4:	230a      	movs	r3, #10
 8000bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4814      	ldr	r0, [pc, #80]	; (8000c54 <HAL_PCD_MspInit+0x10c>)
 8000c02:	f000 fa23 	bl	800104c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <HAL_PCD_MspInit+0x10c>)
 8000c22:	f000 fa13 	bl	800104c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_PCD_MspInit+0x108>)
 8000c28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c2c:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_PCD_MspInit+0x108>)
 8000c2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_PCD_MspInit+0x108>)
 8000c38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000c40:	60bb      	str	r3, [r7, #8]
 8000c42:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c44:	bf00      	nop
 8000c46:	37e0      	adds	r7, #224	; 0xe0
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40080000 	.word	0x40080000
 8000c50:	58024400 	.word	0x58024400
 8000c54:	58020000 	.word	0x58020000

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 f89e 	bl	8000de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb0:	f7ff fb12 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480c      	ldr	r0, [pc, #48]	; (8000ce8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cb6:	490d      	ldr	r1, [pc, #52]	; (8000cec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	; (8000cf0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	; (8000cf8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cda:	f003 fe85 	bl	80049e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cde:	f7ff fc7d 	bl	80005dc <main>
  bx  lr
 8000ce2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ce4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ce8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cec:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000cf0:	08004a98 	.word	0x08004a98
  ldr r2, =_sbss
 8000cf4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000cf8:	240004e0 	.word	0x240004e0

08000cfc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC3_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d06:	2003      	movs	r0, #3
 8000d08:	f000 f96e 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d0c:	f001 fe84 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 8000d10:	4602      	mov	r2, r0
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_Init+0x68>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	0a1b      	lsrs	r3, r3, #8
 8000d18:	f003 030f 	and.w	r3, r3, #15
 8000d1c:	4913      	ldr	r1, [pc, #76]	; (8000d6c <HAL_Init+0x6c>)
 8000d1e:	5ccb      	ldrb	r3, [r1, r3]
 8000d20:	f003 031f 	and.w	r3, r3, #31
 8000d24:	fa22 f303 	lsr.w	r3, r2, r3
 8000d28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HAL_Init+0x68>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	4a0e      	ldr	r2, [pc, #56]	; (8000d6c <HAL_Init+0x6c>)
 8000d34:	5cd3      	ldrb	r3, [r2, r3]
 8000d36:	f003 031f 	and.w	r3, r3, #31
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d40:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <HAL_Init+0x70>)
 8000d42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d44:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <HAL_Init+0x74>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 f814 	bl	8000d78 <HAL_InitTick>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e002      	b.n	8000d60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d5a:	f7ff fe53 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	08004a80 	.word	0x08004a80
 8000d70:	24000004 	.word	0x24000004
 8000d74:	24000000 	.word	0x24000000

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d80:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_InitTick+0x60>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d101      	bne.n	8000d8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e021      	b.n	8000dd0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <HAL_InitTick+0x64>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_InitTick+0x60>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	4619      	mov	r1, r3
 8000d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 f945 	bl	8001032 <HAL_SYSTICK_Config>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00e      	b.n	8000dd0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d80a      	bhi.n	8000dce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db8:	2200      	movs	r2, #0
 8000dba:	6879      	ldr	r1, [r7, #4]
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f000 f91d 	bl	8000ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc4:	4a06      	ldr	r2, [pc, #24]	; (8000de0 <HAL_InitTick+0x68>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e000      	b.n	8000dd0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	2400000c 	.word	0x2400000c
 8000ddc:	24000000 	.word	0x24000000
 8000de0:	24000008 	.word	0x24000008

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	; (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	2400000c 	.word	0x2400000c
 8000e08:	240004dc 	.word	0x240004dc

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	240004dc 	.word	0x240004dc

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff ffee 	bl	8000e0c <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d005      	beq.n	8000e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_Delay+0x44>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4a:	bf00      	nop
 8000e4c:	f7ff ffde 	bl	8000e0c <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d8f7      	bhi.n	8000e4c <HAL_Delay+0x28>
  {
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	2400000c 	.word	0x2400000c

08000e6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e70:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <HAL_GetREVID+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	0c1b      	lsrs	r3, r3, #16
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	5c001000 	.word	0x5c001000

08000e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000ed00 	.word	0xe000ed00
 8000ec8:	05fa0000 	.word	0x05fa0000

08000ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	f003 0307 	and.w	r3, r3, #7
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	88fb      	ldrh	r3, [r7, #6]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f7ff ff8e 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff47 	bl	8000e84 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800100c:	f7ff ff5e 	bl	8000ecc <__NVIC_GetPriorityGrouping>
 8001010:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	68b9      	ldr	r1, [r7, #8]
 8001016:	6978      	ldr	r0, [r7, #20]
 8001018:	f7ff ff90 	bl	8000f3c <NVIC_EncodePriority>
 800101c:	4602      	mov	r2, r0
 800101e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff5f 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffb2 	bl	8000fa4 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800105a:	4b89      	ldr	r3, [pc, #548]	; (8001280 <HAL_GPIO_Init+0x234>)
 800105c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800105e:	e194      	b.n	800138a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	2101      	movs	r1, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa01 f303 	lsl.w	r3, r1, r3
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 8186 	beq.w	8001384 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d00b      	beq.n	8001098 <HAL_GPIO_Init+0x4c>
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b02      	cmp	r3, #2
 8001086:	d007      	beq.n	8001098 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108c:	2b11      	cmp	r3, #17
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b12      	cmp	r3, #18
 8001096:	d130      	bne.n	80010fa <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	2203      	movs	r2, #3
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68da      	ldr	r2, [r3, #12]
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ce:	2201      	movs	r2, #1
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	091b      	lsrs	r3, r3, #4
 80010e4:	f003 0201 	and.w	r2, r3, #1
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2203      	movs	r2, #3
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0xee>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b12      	cmp	r3, #18
 8001138:	d123      	bne.n	8001182 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	08da      	lsrs	r2, r3, #3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3208      	adds	r2, #8
 8001142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	220f      	movs	r2, #15
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	691a      	ldr	r2, [r3, #16]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4313      	orrs	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	08da      	lsrs	r2, r3, #3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	69b9      	ldr	r1, [r7, #24]
 800117e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	2203      	movs	r2, #3
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0203 	and.w	r2, r3, #3
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 80e0 	beq.w	8001384 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c4:	4b2f      	ldr	r3, [pc, #188]	; (8001284 <HAL_GPIO_Init+0x238>)
 80011c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011ca:	4a2e      	ldr	r2, [pc, #184]	; (8001284 <HAL_GPIO_Init+0x238>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011d4:	4b2b      	ldr	r3, [pc, #172]	; (8001284 <HAL_GPIO_Init+0x238>)
 80011d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e2:	4a29      	ldr	r2, [pc, #164]	; (8001288 <HAL_GPIO_Init+0x23c>)
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3302      	adds	r3, #2
 80011ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	220f      	movs	r2, #15
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a20      	ldr	r2, [pc, #128]	; (800128c <HAL_GPIO_Init+0x240>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d052      	beq.n	80012b4 <HAL_GPIO_Init+0x268>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <HAL_GPIO_Init+0x244>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d031      	beq.n	800127a <HAL_GPIO_Init+0x22e>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a1e      	ldr	r2, [pc, #120]	; (8001294 <HAL_GPIO_Init+0x248>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d02b      	beq.n	8001276 <HAL_GPIO_Init+0x22a>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a1d      	ldr	r2, [pc, #116]	; (8001298 <HAL_GPIO_Init+0x24c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d025      	beq.n	8001272 <HAL_GPIO_Init+0x226>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a1c      	ldr	r2, [pc, #112]	; (800129c <HAL_GPIO_Init+0x250>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d01f      	beq.n	800126e <HAL_GPIO_Init+0x222>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <HAL_GPIO_Init+0x254>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d019      	beq.n	800126a <HAL_GPIO_Init+0x21e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a1a      	ldr	r2, [pc, #104]	; (80012a4 <HAL_GPIO_Init+0x258>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0x21a>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a19      	ldr	r2, [pc, #100]	; (80012a8 <HAL_GPIO_Init+0x25c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00d      	beq.n	8001262 <HAL_GPIO_Init+0x216>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a18      	ldr	r2, [pc, #96]	; (80012ac <HAL_GPIO_Init+0x260>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x212>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <HAL_GPIO_Init+0x264>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_GPIO_Init+0x20e>
 8001256:	2309      	movs	r3, #9
 8001258:	e02d      	b.n	80012b6 <HAL_GPIO_Init+0x26a>
 800125a:	230a      	movs	r3, #10
 800125c:	e02b      	b.n	80012b6 <HAL_GPIO_Init+0x26a>
 800125e:	2308      	movs	r3, #8
 8001260:	e029      	b.n	80012b6 <HAL_GPIO_Init+0x26a>
 8001262:	2307      	movs	r3, #7
 8001264:	e027      	b.n	80012b6 <HAL_GPIO_Init+0x26a>
 8001266:	2306      	movs	r3, #6
 8001268:	e025      	b.n	80012b6 <HAL_GPIO_Init+0x26a>
 800126a:	2305      	movs	r3, #5
 800126c:	e023      	b.n	80012b6 <HAL_GPIO_Init+0x26a>
 800126e:	2304      	movs	r3, #4
 8001270:	e021      	b.n	80012b6 <HAL_GPIO_Init+0x26a>
 8001272:	2303      	movs	r3, #3
 8001274:	e01f      	b.n	80012b6 <HAL_GPIO_Init+0x26a>
 8001276:	2302      	movs	r3, #2
 8001278:	e01d      	b.n	80012b6 <HAL_GPIO_Init+0x26a>
 800127a:	2301      	movs	r3, #1
 800127c:	e01b      	b.n	80012b6 <HAL_GPIO_Init+0x26a>
 800127e:	bf00      	nop
 8001280:	58000080 	.word	0x58000080
 8001284:	58024400 	.word	0x58024400
 8001288:	58000400 	.word	0x58000400
 800128c:	58020000 	.word	0x58020000
 8001290:	58020400 	.word	0x58020400
 8001294:	58020800 	.word	0x58020800
 8001298:	58020c00 	.word	0x58020c00
 800129c:	58021000 	.word	0x58021000
 80012a0:	58021400 	.word	0x58021400
 80012a4:	58021800 	.word	0x58021800
 80012a8:	58021c00 	.word	0x58021c00
 80012ac:	58022000 	.word	0x58022000
 80012b0:	58022400 	.word	0x58022400
 80012b4:	2300      	movs	r3, #0
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	f002 0203 	and.w	r2, r2, #3
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	4093      	lsls	r3, r2
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012c6:	4938      	ldr	r1, [pc, #224]	; (80013a8 <HAL_GPIO_Init+0x35c>)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800134e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800137c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	3301      	adds	r3, #1
 8001388:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	f47f ae63 	bne.w	8001060 <HAL_GPIO_Init+0x14>
  }
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	3724      	adds	r7, #36	; 0x24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	58000400 	.word	0x58000400

080013ac <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80013b4:	4a08      	ldr	r2, [pc, #32]	; (80013d8 <HAL_HSEM_FastTake+0x2c>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3320      	adds	r3, #32
 80013ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013be:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_HSEM_FastTake+0x30>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e000      	b.n	80013ca <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	58026400 	.word	0x58026400
 80013dc:	80000300 	.word	0x80000300

080013e0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80013ea:	4906      	ldr	r1, [pc, #24]	; (8001404 <HAL_HSEM_Release+0x24>)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	58026400 	.word	0x58026400

08001408 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d101      	bne.n	800141a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e07f      	b.n	800151a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d106      	bne.n	8001434 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fb02 	bl	8000a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2224      	movs	r2, #36	; 0x24
 8001438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0201 	bic.w	r2, r2, #1
 800144a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001458:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001468:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	68db      	ldr	r3, [r3, #12]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d107      	bne.n	8001482 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689a      	ldr	r2, [r3, #8]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	e006      	b.n	8001490 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800148e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d104      	bne.n	80014a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6859      	ldr	r1, [r3, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_I2C_Init+0x11c>)
 80014ae:	430b      	orrs	r3, r1
 80014b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	ea42 0103 	orr.w	r1, r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	021a      	lsls	r2, r3, #8
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	69d9      	ldr	r1, [r3, #28]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1a      	ldr	r2, [r3, #32]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2200      	movs	r2, #0
 8001500:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2220      	movs	r2, #32
 8001506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	02008000 	.word	0x02008000

08001528 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af02      	add	r7, sp, #8
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	461a      	mov	r2, r3
 8001534:	460b      	mov	r3, r1
 8001536:	817b      	strh	r3, [r7, #10]
 8001538:	4613      	mov	r3, r2
 800153a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b20      	cmp	r3, #32
 8001546:	f040 80da 	bne.w	80016fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_I2C_Master_Transmit+0x30>
 8001554:	2302      	movs	r3, #2
 8001556:	e0d3      	b.n	8001700 <HAL_I2C_Master_Transmit+0x1d8>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001560:	f7ff fc54 	bl	8000e0c <HAL_GetTick>
 8001564:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	2319      	movs	r3, #25
 800156c:	2201      	movs	r2, #1
 800156e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001572:	68f8      	ldr	r0, [r7, #12]
 8001574:	f000 f8f0 	bl	8001758 <I2C_WaitOnFlagUntilTimeout>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e0be      	b.n	8001700 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2221      	movs	r2, #33	; 0x21
 8001586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2210      	movs	r2, #16
 800158e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2200      	movs	r2, #0
 8001596:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	893a      	ldrh	r2, [r7, #8]
 80015a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	2bff      	cmp	r3, #255	; 0xff
 80015b2:	d90e      	bls.n	80015d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	22ff      	movs	r2, #255	; 0xff
 80015b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	8979      	ldrh	r1, [r7, #10]
 80015c2:	4b51      	ldr	r3, [pc, #324]	; (8001708 <HAL_I2C_Master_Transmit+0x1e0>)
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f9e6 	bl	800199c <I2C_TransferConfig>
 80015d0:	e06c      	b.n	80016ac <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	8979      	ldrh	r1, [r7, #10]
 80015e4:	4b48      	ldr	r3, [pc, #288]	; (8001708 <HAL_I2C_Master_Transmit+0x1e0>)
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 f9d5 	bl	800199c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80015f2:	e05b      	b.n	80016ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	6a39      	ldr	r1, [r7, #32]
 80015f8:	68f8      	ldr	r0, [r7, #12]
 80015fa:	f000 f8ed 	bl	80017d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e07b      	b.n	8001700 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160c:	781a      	ldrb	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	1c5a      	adds	r2, r3, #1
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001622:	b29b      	uxth	r3, r3
 8001624:	3b01      	subs	r3, #1
 8001626:	b29a      	uxth	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001630:	3b01      	subs	r3, #1
 8001632:	b29a      	uxth	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800163c:	b29b      	uxth	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d034      	beq.n	80016ac <HAL_I2C_Master_Transmit+0x184>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001646:	2b00      	cmp	r3, #0
 8001648:	d130      	bne.n	80016ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	2200      	movs	r2, #0
 8001652:	2180      	movs	r1, #128	; 0x80
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 f87f 	bl	8001758 <I2C_WaitOnFlagUntilTimeout>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e04d      	b.n	8001700 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001668:	b29b      	uxth	r3, r3
 800166a:	2bff      	cmp	r3, #255	; 0xff
 800166c:	d90e      	bls.n	800168c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	22ff      	movs	r2, #255	; 0xff
 8001672:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001678:	b2da      	uxtb	r2, r3
 800167a:	8979      	ldrh	r1, [r7, #10]
 800167c:	2300      	movs	r3, #0
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 f989 	bl	800199c <I2C_TransferConfig>
 800168a:	e00f      	b.n	80016ac <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001690:	b29a      	uxth	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800169a:	b2da      	uxtb	r2, r3
 800169c:	8979      	ldrh	r1, [r7, #10]
 800169e:	2300      	movs	r3, #0
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016a6:	68f8      	ldr	r0, [r7, #12]
 80016a8:	f000 f978 	bl	800199c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d19e      	bne.n	80015f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	6a39      	ldr	r1, [r7, #32]
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f000 f8cc 	bl	8001858 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e01a      	b.n	8001700 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	2220      	movs	r2, #32
 80016d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6859      	ldr	r1, [r3, #4]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b0b      	ldr	r3, [pc, #44]	; (800170c <HAL_I2C_Master_Transmit+0x1e4>)
 80016de:	400b      	ands	r3, r1
 80016e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2220      	movs	r2, #32
 80016e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80016fe:	2302      	movs	r3, #2
  }
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	80002000 	.word	0x80002000
 800170c:	fe00e800 	.word	0xfe00e800

08001710 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	699b      	ldr	r3, [r3, #24]
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b02      	cmp	r3, #2
 8001724:	d103      	bne.n	800172e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2200      	movs	r2, #0
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	f003 0301 	and.w	r3, r3, #1
 8001738:	2b01      	cmp	r3, #1
 800173a:	d007      	beq.n	800174c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	699a      	ldr	r2, [r3, #24]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0201 	orr.w	r2, r2, #1
 800174a:	619a      	str	r2, [r3, #24]
  }
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	4613      	mov	r3, r2
 8001766:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001768:	e022      	b.n	80017b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001770:	d01e      	beq.n	80017b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001772:	f7ff fb4b 	bl	8000e0c <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	683a      	ldr	r2, [r7, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d302      	bcc.n	8001788 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d113      	bne.n	80017b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178c:	f043 0220 	orr.w	r2, r3, #32
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2220      	movs	r2, #32
 8001798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e00f      	b.n	80017d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	699a      	ldr	r2, [r3, #24]
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	4013      	ands	r3, r2
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	429a      	cmp	r2, r3
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	79fb      	ldrb	r3, [r7, #7]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d0cd      	beq.n	800176a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017e4:	e02c      	b.n	8001840 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	68b9      	ldr	r1, [r7, #8]
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f870 	bl	80018d0 <I2C_IsAcknowledgeFailed>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e02a      	b.n	8001850 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001800:	d01e      	beq.n	8001840 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001802:	f7ff fb03 	bl	8000e0c <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	68ba      	ldr	r2, [r7, #8]
 800180e:	429a      	cmp	r2, r3
 8001810:	d302      	bcc.n	8001818 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d113      	bne.n	8001840 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	f043 0220 	orr.w	r2, r3, #32
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2220      	movs	r2, #32
 8001828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e007      	b.n	8001850 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b02      	cmp	r3, #2
 800184c:	d1cb      	bne.n	80017e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001864:	e028      	b.n	80018b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 f830 	bl	80018d0 <I2C_IsAcknowledgeFailed>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e026      	b.n	80018c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800187a:	f7ff fac7 	bl	8000e0c <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	429a      	cmp	r2, r3
 8001888:	d302      	bcc.n	8001890 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d113      	bne.n	80018b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	f043 0220 	orr.w	r2, r3, #32
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2220      	movs	r2, #32
 80018a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e007      	b.n	80018c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	2b20      	cmp	r3, #32
 80018c4:	d1cf      	bne.n	8001866 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	2b10      	cmp	r3, #16
 80018e8:	d151      	bne.n	800198e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018ea:	e022      	b.n	8001932 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f2:	d01e      	beq.n	8001932 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f4:	f7ff fa8a 	bl	8000e0c <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	429a      	cmp	r2, r3
 8001902:	d302      	bcc.n	800190a <I2C_IsAcknowledgeFailed+0x3a>
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d113      	bne.n	8001932 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f043 0220 	orr.w	r2, r3, #32
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2220      	movs	r2, #32
 800191a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e02e      	b.n	8001990 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	f003 0320 	and.w	r3, r3, #32
 800193c:	2b20      	cmp	r3, #32
 800193e:	d1d5      	bne.n	80018ec <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2210      	movs	r2, #16
 8001946:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2220      	movs	r2, #32
 800194e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f7ff fedd 	bl	8001710 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b0d      	ldr	r3, [pc, #52]	; (8001998 <I2C_IsAcknowledgeFailed+0xc8>)
 8001962:	400b      	ands	r3, r1
 8001964:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	f043 0204 	orr.w	r2, r3, #4
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2220      	movs	r2, #32
 8001976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	3710      	adds	r7, #16
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	fe00e800 	.word	0xfe00e800

0800199c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	460b      	mov	r3, r1
 80019a8:	817b      	strh	r3, [r7, #10]
 80019aa:	4613      	mov	r3, r2
 80019ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	0d5b      	lsrs	r3, r3, #21
 80019b8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <I2C_TransferConfig+0x58>)
 80019be:	430b      	orrs	r3, r1
 80019c0:	43db      	mvns	r3, r3
 80019c2:	ea02 0103 	and.w	r1, r2, r3
 80019c6:	897b      	ldrh	r3, [r7, #10]
 80019c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019cc:	7a7b      	ldrb	r3, [r7, #9]
 80019ce:	041b      	lsls	r3, r3, #16
 80019d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	431a      	orrs	r2, r3
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	431a      	orrs	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	03ff63ff 	.word	0x03ff63ff

080019f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b20      	cmp	r3, #32
 8001a0c:	d138      	bne.n	8001a80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e032      	b.n	8001a82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2224      	movs	r2, #36	; 0x24
 8001a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6819      	ldr	r1, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f042 0201 	orr.w	r2, r2, #1
 8001a6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	e000      	b.n	8001a82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a80:	2302      	movs	r3, #2
  }
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b085      	sub	sp, #20
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b20      	cmp	r3, #32
 8001aa2:	d139      	bne.n	8001b18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001aae:	2302      	movs	r3, #2
 8001ab0:	e033      	b.n	8001b1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2224      	movs	r2, #36	; 0x24
 8001abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ae0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68fa      	ldr	r2, [r7, #12]
 8001af2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2220      	movs	r2, #32
 8001b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e000      	b.n	8001b1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b18:	2302      	movs	r3, #2
  }
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b28:	b08f      	sub	sp, #60	; 0x3c
 8001b2a:	af0a      	add	r7, sp, #40	; 0x28
 8001b2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e116      	b.n	8001d66 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d106      	bne.n	8001b58 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7fe fff8 	bl	8000b48 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f002 fce6 	bl	8004548 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	687e      	ldr	r6, [r7, #4]
 8001b84:	466d      	mov	r5, sp
 8001b86:	f106 0410 	add.w	r4, r6, #16
 8001b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b96:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b9a:	1d33      	adds	r3, r6, #4
 8001b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b9e:	6838      	ldr	r0, [r7, #0]
 8001ba0:	f002 fc64 	bl	800446c <USB_CoreInit>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d005      	beq.n	8001bb6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2202      	movs	r2, #2
 8001bae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0d7      	b.n	8001d66 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fcd4 	bl	800456a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
 8001bc6:	e04a      	b.n	8001c5e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	333d      	adds	r3, #61	; 0x3d
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	1a9b      	subs	r3, r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	333c      	adds	r3, #60	; 0x3c
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	b298      	uxth	r0, r3
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	1a9b      	subs	r3, r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	3342      	adds	r3, #66	; 0x42
 8001c04:	4602      	mov	r2, r0
 8001c06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	1a9b      	subs	r3, r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	333f      	adds	r3, #63	; 0x3f
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	1a9b      	subs	r3, r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	3344      	adds	r3, #68	; 0x44
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3348      	adds	r3, #72	; 0x48
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	3350      	adds	r3, #80	; 0x50
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d3af      	bcc.n	8001bc8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e044      	b.n	8001cf8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	1a9b      	subs	r3, r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	1a9b      	subs	r3, r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	1a9b      	subs	r3, r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3b5      	bcc.n	8001c6e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	687e      	ldr	r6, [r7, #4]
 8001d0a:	466d      	mov	r5, sp
 8001d0c:	f106 0410 	add.w	r4, r6, #16
 8001d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d20:	1d33      	adds	r3, r6, #4
 8001d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d24:	6838      	ldr	r0, [r7, #0]
 8001d26:	f002 fc4b 	bl	80045c0 <USB_DevInit>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e014      	b.n	8001d66 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d102      	bne.n	8001d5a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f80b 	bl	8001d70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f002 fded 	bl	800493e <USB_DevDisconnect>

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3714      	adds	r7, #20
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2201      	movs	r2, #1
 8001d82:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001d9e:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_PCDEx_ActivateLPM+0x44>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	10000003 	.word	0x10000003

08001db8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001dc0:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <HAL_PWREx_ConfigSupply+0xb0>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	2b06      	cmp	r3, #6
 8001dca:	d00a      	beq.n	8001de2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001dcc:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <HAL_PWREx_ConfigSupply+0xb0>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d001      	beq.n	8001dde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e040      	b.n	8001e60 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e03e      	b.n	8001e60 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <HAL_PWREx_ConfigSupply+0xb0>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001dea:	491f      	ldr	r1, [pc, #124]	; (8001e68 <HAL_PWREx_ConfigSupply+0xb0>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001df2:	f7ff f80b 	bl	8000e0c <HAL_GetTick>
 8001df6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001df8:	e009      	b.n	8001e0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001dfa:	f7ff f807 	bl	8000e0c <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e08:	d901      	bls.n	8001e0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e028      	b.n	8001e60 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e1a:	d1ee      	bne.n	8001dfa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b1e      	cmp	r3, #30
 8001e20:	d008      	beq.n	8001e34 <HAL_PWREx_ConfigSupply+0x7c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b2e      	cmp	r3, #46	; 0x2e
 8001e26:	d005      	beq.n	8001e34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b1d      	cmp	r3, #29
 8001e2c:	d002      	beq.n	8001e34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b2d      	cmp	r3, #45	; 0x2d
 8001e32:	d114      	bne.n	8001e5e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001e34:	f7fe ffea 	bl	8000e0c <HAL_GetTick>
 8001e38:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001e3a:	e009      	b.n	8001e50 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001e3c:	f7fe ffe6 	bl	8000e0c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e4a:	d901      	bls.n	8001e50 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e007      	b.n	8001e60 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_PWREx_ConfigSupply+0xb0>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e5c:	d1ee      	bne.n	8001e3c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	58024800 	.word	0x58024800

08001e6c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8001e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7a:	60d3      	str	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	58024800 	.word	0x58024800

08001e8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08c      	sub	sp, #48	; 0x30
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e3ff      	b.n	800269e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 8087 	beq.w	8001fba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eac:	4b99      	ldr	r3, [pc, #612]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001eb6:	4b97      	ldr	r3, [pc, #604]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ebe:	2b10      	cmp	r3, #16
 8001ec0:	d007      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x46>
 8001ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec4:	2b18      	cmp	r3, #24
 8001ec6:	d110      	bne.n	8001eea <HAL_RCC_OscConfig+0x5e>
 8001ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d10b      	bne.n	8001eea <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed2:	4b90      	ldr	r3, [pc, #576]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d06c      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x12c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d168      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e3d9      	b.n	800269e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef2:	d106      	bne.n	8001f02 <HAL_RCC_OscConfig+0x76>
 8001ef4:	4b87      	ldr	r3, [pc, #540]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a86      	ldr	r2, [pc, #536]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efe:	6013      	str	r3, [r2, #0]
 8001f00:	e02e      	b.n	8001f60 <HAL_RCC_OscConfig+0xd4>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x98>
 8001f0a:	4b82      	ldr	r3, [pc, #520]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a81      	ldr	r2, [pc, #516]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	4b7f      	ldr	r3, [pc, #508]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a7e      	ldr	r2, [pc, #504]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e01d      	b.n	8001f60 <HAL_RCC_OscConfig+0xd4>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0xbc>
 8001f2e:	4b79      	ldr	r3, [pc, #484]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a78      	ldr	r2, [pc, #480]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b76      	ldr	r3, [pc, #472]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a75      	ldr	r2, [pc, #468]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e00b      	b.n	8001f60 <HAL_RCC_OscConfig+0xd4>
 8001f48:	4b72      	ldr	r3, [pc, #456]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a71      	ldr	r2, [pc, #452]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	4b6f      	ldr	r3, [pc, #444]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a6e      	ldr	r2, [pc, #440]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d013      	beq.n	8001f90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7fe ff50 	bl	8000e0c <HAL_GetTick>
 8001f6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f70:	f7fe ff4c 	bl	8000e0c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e38d      	b.n	800269e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f82:	4b64      	ldr	r3, [pc, #400]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0xe4>
 8001f8e:	e014      	b.n	8001fba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7fe ff3c 	bl	8000e0c <HAL_GetTick>
 8001f94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f96:	e008      	b.n	8001faa <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f98:	f7fe ff38 	bl	8000e0c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	2b64      	cmp	r3, #100	; 0x64
 8001fa4:	d901      	bls.n	8001faa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e379      	b.n	800269e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001faa:	4b5a      	ldr	r3, [pc, #360]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <HAL_RCC_OscConfig+0x10c>
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f000 80ae 	beq.w	8002124 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc8:	4b52      	ldr	r3, [pc, #328]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fd0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fd2:	4b50      	ldr	r3, [pc, #320]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d007      	beq.n	8001fee <HAL_RCC_OscConfig+0x162>
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	2b18      	cmp	r3, #24
 8001fe2:	d13a      	bne.n	800205a <HAL_RCC_OscConfig+0x1ce>
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d135      	bne.n	800205a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fee:	4b49      	ldr	r3, [pc, #292]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_RCC_OscConfig+0x17a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e34b      	b.n	800269e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002006:	f7fe ff31 	bl	8000e6c <HAL_GetREVID>
 800200a:	4603      	mov	r3, r0
 800200c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002010:	4293      	cmp	r3, r2
 8002012:	d817      	bhi.n	8002044 <HAL_RCC_OscConfig+0x1b8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	2b40      	cmp	r3, #64	; 0x40
 800201a:	d108      	bne.n	800202e <HAL_RCC_OscConfig+0x1a2>
 800201c:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002024:	4a3b      	ldr	r2, [pc, #236]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8002026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800202a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800202c:	e07a      	b.n	8002124 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202e:	4b39      	ldr	r3, [pc, #228]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	031b      	lsls	r3, r3, #12
 800203c:	4935      	ldr	r1, [pc, #212]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 800203e:	4313      	orrs	r3, r2
 8002040:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002042:	e06f      	b.n	8002124 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002044:	4b33      	ldr	r3, [pc, #204]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	061b      	lsls	r3, r3, #24
 8002052:	4930      	ldr	r1, [pc, #192]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002058:	e064      	b.n	8002124 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d045      	beq.n	80020ee <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002062:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 0219 	bic.w	r2, r3, #25
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	4929      	ldr	r1, [pc, #164]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8002070:	4313      	orrs	r3, r2
 8002072:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002074:	f7fe feca 	bl	8000e0c <HAL_GetTick>
 8002078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800207c:	f7fe fec6 	bl	8000e0c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e307      	b.n	800269e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209a:	f7fe fee7 	bl	8000e6c <HAL_GetREVID>
 800209e:	4603      	mov	r3, r0
 80020a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d817      	bhi.n	80020d8 <HAL_RCC_OscConfig+0x24c>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	2b40      	cmp	r3, #64	; 0x40
 80020ae:	d108      	bne.n	80020c2 <HAL_RCC_OscConfig+0x236>
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80020b8:	4a16      	ldr	r2, [pc, #88]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 80020ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020be:	6053      	str	r3, [r2, #4]
 80020c0:	e030      	b.n	8002124 <HAL_RCC_OscConfig+0x298>
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	031b      	lsls	r3, r3, #12
 80020d0:	4910      	ldr	r1, [pc, #64]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
 80020d6:	e025      	b.n	8002124 <HAL_RCC_OscConfig+0x298>
 80020d8:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	061b      	lsls	r3, r3, #24
 80020e6:	490b      	ldr	r1, [pc, #44]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
 80020ec:	e01a      	b.n	8002124 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a08      	ldr	r2, [pc, #32]	; (8002114 <HAL_RCC_OscConfig+0x288>)
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fa:	f7fe fe87 	bl	8000e0c <HAL_GetTick>
 80020fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002100:	e00a      	b.n	8002118 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002102:	f7fe fe83 	bl	8000e0c <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d903      	bls.n	8002118 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e2c4      	b.n	800269e <HAL_RCC_OscConfig+0x812>
 8002114:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002118:	4ba4      	ldr	r3, [pc, #656]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1ee      	bne.n	8002102 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0310 	and.w	r3, r3, #16
 800212c:	2b00      	cmp	r3, #0
 800212e:	f000 80a9 	beq.w	8002284 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002132:	4b9e      	ldr	r3, [pc, #632]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800213a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800213c:	4b9b      	ldr	r3, [pc, #620]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2b08      	cmp	r3, #8
 8002146:	d007      	beq.n	8002158 <HAL_RCC_OscConfig+0x2cc>
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b18      	cmp	r3, #24
 800214c:	d13a      	bne.n	80021c4 <HAL_RCC_OscConfig+0x338>
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b01      	cmp	r3, #1
 8002156:	d135      	bne.n	80021c4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002158:	4b94      	ldr	r3, [pc, #592]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_OscConfig+0x2e4>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	2b80      	cmp	r3, #128	; 0x80
 800216a:	d001      	beq.n	8002170 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e296      	b.n	800269e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002170:	f7fe fe7c 	bl	8000e6c <HAL_GetREVID>
 8002174:	4603      	mov	r3, r0
 8002176:	f241 0203 	movw	r2, #4099	; 0x1003
 800217a:	4293      	cmp	r3, r2
 800217c:	d817      	bhi.n	80021ae <HAL_RCC_OscConfig+0x322>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	2b20      	cmp	r3, #32
 8002184:	d108      	bne.n	8002198 <HAL_RCC_OscConfig+0x30c>
 8002186:	4b89      	ldr	r3, [pc, #548]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800218e:	4a87      	ldr	r2, [pc, #540]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 8002190:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002194:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002196:	e075      	b.n	8002284 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002198:	4b84      	ldr	r3, [pc, #528]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	069b      	lsls	r3, r3, #26
 80021a6:	4981      	ldr	r1, [pc, #516]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021ac:	e06a      	b.n	8002284 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021ae:	4b7f      	ldr	r3, [pc, #508]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	061b      	lsls	r3, r3, #24
 80021bc:	497b      	ldr	r1, [pc, #492]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80021c2:	e05f      	b.n	8002284 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d042      	beq.n	8002252 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80021cc:	4b77      	ldr	r3, [pc, #476]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a76      	ldr	r2, [pc, #472]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 80021d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe fe18 	bl	8000e0c <HAL_GetTick>
 80021dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80021e0:	f7fe fe14 	bl	8000e0c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e255      	b.n	800269e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021f2:	4b6e      	ldr	r3, [pc, #440]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021fe:	f7fe fe35 	bl	8000e6c <HAL_GetREVID>
 8002202:	4603      	mov	r3, r0
 8002204:	f241 0203 	movw	r2, #4099	; 0x1003
 8002208:	4293      	cmp	r3, r2
 800220a:	d817      	bhi.n	800223c <HAL_RCC_OscConfig+0x3b0>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	2b20      	cmp	r3, #32
 8002212:	d108      	bne.n	8002226 <HAL_RCC_OscConfig+0x39a>
 8002214:	4b65      	ldr	r3, [pc, #404]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800221c:	4a63      	ldr	r2, [pc, #396]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 800221e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002222:	6053      	str	r3, [r2, #4]
 8002224:	e02e      	b.n	8002284 <HAL_RCC_OscConfig+0x3f8>
 8002226:	4b61      	ldr	r3, [pc, #388]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	069b      	lsls	r3, r3, #26
 8002234:	495d      	ldr	r1, [pc, #372]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 8002236:	4313      	orrs	r3, r2
 8002238:	604b      	str	r3, [r1, #4]
 800223a:	e023      	b.n	8002284 <HAL_RCC_OscConfig+0x3f8>
 800223c:	4b5b      	ldr	r3, [pc, #364]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	061b      	lsls	r3, r3, #24
 800224a:	4958      	ldr	r1, [pc, #352]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 800224c:	4313      	orrs	r3, r2
 800224e:	60cb      	str	r3, [r1, #12]
 8002250:	e018      	b.n	8002284 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002252:	4b56      	ldr	r3, [pc, #344]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a55      	ldr	r2, [pc, #340]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 8002258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800225c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225e:	f7fe fdd5 	bl	8000e0c <HAL_GetTick>
 8002262:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002266:	f7fe fdd1 	bl	8000e0c <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e212      	b.n	800269e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002278:	4b4c      	ldr	r3, [pc, #304]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1f0      	bne.n	8002266 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0308 	and.w	r3, r3, #8
 800228c:	2b00      	cmp	r3, #0
 800228e:	d036      	beq.n	80022fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d019      	beq.n	80022cc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002298:	4b44      	ldr	r3, [pc, #272]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 800229a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800229c:	4a43      	ldr	r2, [pc, #268]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a4:	f7fe fdb2 	bl	8000e0c <HAL_GetTick>
 80022a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022aa:	e008      	b.n	80022be <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ac:	f7fe fdae 	bl	8000e0c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e1ef      	b.n	800269e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022be:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 80022c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0f0      	beq.n	80022ac <HAL_RCC_OscConfig+0x420>
 80022ca:	e018      	b.n	80022fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022cc:	4b37      	ldr	r3, [pc, #220]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 80022ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d0:	4a36      	ldr	r2, [pc, #216]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 80022d2:	f023 0301 	bic.w	r3, r3, #1
 80022d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022d8:	f7fe fd98 	bl	8000e0c <HAL_GetTick>
 80022dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e0:	f7fe fd94 	bl	8000e0c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e1d5      	b.n	800269e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022f2:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 80022f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0320 	and.w	r3, r3, #32
 8002306:	2b00      	cmp	r3, #0
 8002308:	d036      	beq.n	8002378 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d019      	beq.n	8002346 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002312:	4b26      	ldr	r3, [pc, #152]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a25      	ldr	r2, [pc, #148]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 8002318:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800231c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800231e:	f7fe fd75 	bl	8000e0c <HAL_GetTick>
 8002322:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002326:	f7fe fd71 	bl	8000e0c <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e1b2      	b.n	800269e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002338:	4b1c      	ldr	r3, [pc, #112]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x49a>
 8002344:	e018      	b.n	8002378 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002346:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a18      	ldr	r2, [pc, #96]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 800234c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002350:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002352:	f7fe fd5b 	bl	8000e0c <HAL_GetTick>
 8002356:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800235a:	f7fe fd57 	bl	8000e0c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e198      	b.n	800269e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800236c:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_RCC_OscConfig+0x520>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 8085 	beq.w	8002490 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_RCC_OscConfig+0x524>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_RCC_OscConfig+0x524>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002392:	f7fe fd3b 	bl	8000e0c <HAL_GetTick>
 8002396:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002398:	e00c      	b.n	80023b4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800239a:	f7fe fd37 	bl	8000e0c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b64      	cmp	r3, #100	; 0x64
 80023a6:	d905      	bls.n	80023b4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e178      	b.n	800269e <HAL_RCC_OscConfig+0x812>
 80023ac:	58024400 	.word	0x58024400
 80023b0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023b4:	4b96      	ldr	r3, [pc, #600]	; (8002610 <HAL_RCC_OscConfig+0x784>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0ec      	beq.n	800239a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d106      	bne.n	80023d6 <HAL_RCC_OscConfig+0x54a>
 80023c8:	4b92      	ldr	r3, [pc, #584]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80023ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023cc:	4a91      	ldr	r2, [pc, #580]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	6713      	str	r3, [r2, #112]	; 0x70
 80023d4:	e02d      	b.n	8002432 <HAL_RCC_OscConfig+0x5a6>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x56c>
 80023de:	4b8d      	ldr	r3, [pc, #564]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	4a8c      	ldr	r2, [pc, #560]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	6713      	str	r3, [r2, #112]	; 0x70
 80023ea:	4b8a      	ldr	r3, [pc, #552]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80023ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ee:	4a89      	ldr	r2, [pc, #548]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80023f0:	f023 0304 	bic.w	r3, r3, #4
 80023f4:	6713      	str	r3, [r2, #112]	; 0x70
 80023f6:	e01c      	b.n	8002432 <HAL_RCC_OscConfig+0x5a6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b05      	cmp	r3, #5
 80023fe:	d10c      	bne.n	800241a <HAL_RCC_OscConfig+0x58e>
 8002400:	4b84      	ldr	r3, [pc, #528]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002404:	4a83      	ldr	r2, [pc, #524]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002406:	f043 0304 	orr.w	r3, r3, #4
 800240a:	6713      	str	r3, [r2, #112]	; 0x70
 800240c:	4b81      	ldr	r3, [pc, #516]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	4a80      	ldr	r2, [pc, #512]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	6713      	str	r3, [r2, #112]	; 0x70
 8002418:	e00b      	b.n	8002432 <HAL_RCC_OscConfig+0x5a6>
 800241a:	4b7e      	ldr	r3, [pc, #504]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	4a7d      	ldr	r2, [pc, #500]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	6713      	str	r3, [r2, #112]	; 0x70
 8002426:	4b7b      	ldr	r3, [pc, #492]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800242a:	4a7a      	ldr	r2, [pc, #488]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d015      	beq.n	8002466 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243a:	f7fe fce7 	bl	8000e0c <HAL_GetTick>
 800243e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002440:	e00a      	b.n	8002458 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7fe fce3 	bl	8000e0c <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e122      	b.n	800269e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002458:	4b6e      	ldr	r3, [pc, #440]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 800245a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0ee      	beq.n	8002442 <HAL_RCC_OscConfig+0x5b6>
 8002464:	e014      	b.n	8002490 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7fe fcd1 	bl	8000e0c <HAL_GetTick>
 800246a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800246c:	e00a      	b.n	8002484 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7fe fccd 	bl	8000e0c <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	; 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e10c      	b.n	800269e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002484:	4b63      	ldr	r3, [pc, #396]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1ee      	bne.n	800246e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 8101 	beq.w	800269c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800249a:	4b5e      	ldr	r3, [pc, #376]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024a2:	2b18      	cmp	r3, #24
 80024a4:	f000 80bc 	beq.w	8002620 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	f040 8095 	bne.w	80025dc <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	4b58      	ldr	r3, [pc, #352]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a57      	ldr	r2, [pc, #348]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80024b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7fe fca5 	bl	8000e0c <HAL_GetTick>
 80024c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c6:	f7fe fca1 	bl	8000e0c <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e0e2      	b.n	800269e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024d8:	4b4e      	ldr	r3, [pc, #312]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1f0      	bne.n	80024c6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e4:	4b4b      	ldr	r3, [pc, #300]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80024e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024e8:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <HAL_RCC_OscConfig+0x78c>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80024f4:	0112      	lsls	r2, r2, #4
 80024f6:	430a      	orrs	r2, r1
 80024f8:	4946      	ldr	r1, [pc, #280]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	628b      	str	r3, [r1, #40]	; 0x28
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	3b01      	subs	r3, #1
 8002504:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250c:	3b01      	subs	r3, #1
 800250e:	025b      	lsls	r3, r3, #9
 8002510:	b29b      	uxth	r3, r3
 8002512:	431a      	orrs	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002518:	3b01      	subs	r3, #1
 800251a:	041b      	lsls	r3, r3, #16
 800251c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002520:	431a      	orrs	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	3b01      	subs	r3, #1
 8002528:	061b      	lsls	r3, r3, #24
 800252a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800252e:	4939      	ldr	r1, [pc, #228]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002530:	4313      	orrs	r3, r2
 8002532:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002534:	4b37      	ldr	r3, [pc, #220]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	4a36      	ldr	r2, [pc, #216]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002540:	4b34      	ldr	r3, [pc, #208]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002544:	4b35      	ldr	r3, [pc, #212]	; (800261c <HAL_RCC_OscConfig+0x790>)
 8002546:	4013      	ands	r3, r2
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800254c:	00d2      	lsls	r2, r2, #3
 800254e:	4931      	ldr	r1, [pc, #196]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002550:	4313      	orrs	r3, r2
 8002552:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002554:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002558:	f023 020c 	bic.w	r2, r3, #12
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	492c      	ldr	r1, [pc, #176]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002562:	4313      	orrs	r3, r2
 8002564:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002566:	4b2b      	ldr	r3, [pc, #172]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	f023 0202 	bic.w	r2, r3, #2
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	4928      	ldr	r1, [pc, #160]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002574:	4313      	orrs	r3, r2
 8002576:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002578:	4b26      	ldr	r3, [pc, #152]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	4a25      	ldr	r2, [pc, #148]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 800257e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002582:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002584:	4b23      	ldr	r3, [pc, #140]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002588:	4a22      	ldr	r2, [pc, #136]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 800258a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800258e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002590:	4b20      	ldr	r3, [pc, #128]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	4a1f      	ldr	r2, [pc, #124]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002596:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800259a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	4a1c      	ldr	r2, [pc, #112]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025a8:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a19      	ldr	r2, [pc, #100]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80025ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe fc2a 	bl	8000e0c <HAL_GetTick>
 80025b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025bc:	f7fe fc26 	bl	8000e0c <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e067      	b.n	800269e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x730>
 80025da:	e05f      	b.n	800269c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0c      	ldr	r2, [pc, #48]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 80025e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e8:	f7fe fc10 	bl	8000e0c <HAL_GetTick>
 80025ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025f0:	f7fe fc0c 	bl	8000e0c <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b02      	cmp	r3, #2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e04d      	b.n	800269e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002602:	4b04      	ldr	r3, [pc, #16]	; (8002614 <HAL_RCC_OscConfig+0x788>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1f0      	bne.n	80025f0 <HAL_RCC_OscConfig+0x764>
 800260e:	e045      	b.n	800269c <HAL_RCC_OscConfig+0x810>
 8002610:	58024800 	.word	0x58024800
 8002614:	58024400 	.word	0x58024400
 8002618:	fffffc0c 	.word	0xfffffc0c
 800261c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002620:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <HAL_RCC_OscConfig+0x81c>)
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002626:	4b20      	ldr	r3, [pc, #128]	; (80026a8 <HAL_RCC_OscConfig+0x81c>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	2b01      	cmp	r3, #1
 8002632:	d031      	beq.n	8002698 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f003 0203 	and.w	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800263e:	429a      	cmp	r2, r3
 8002640:	d12a      	bne.n	8002698 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264e:	429a      	cmp	r2, r3
 8002650:	d122      	bne.n	8002698 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800265e:	429a      	cmp	r2, r3
 8002660:	d11a      	bne.n	8002698 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	0a5b      	lsrs	r3, r3, #9
 8002666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d111      	bne.n	8002698 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	0c1b      	lsrs	r3, r3, #16
 8002678:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002680:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d108      	bne.n	8002698 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	0e1b      	lsrs	r3, r3, #24
 800268a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002692:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3730      	adds	r7, #48	; 0x30
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	58024400 	.word	0x58024400

080026ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e19c      	b.n	80029fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c0:	4b8a      	ldr	r3, [pc, #552]	; (80028ec <HAL_RCC_ClockConfig+0x240>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 030f 	and.w	r3, r3, #15
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d910      	bls.n	80026f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b87      	ldr	r3, [pc, #540]	; (80028ec <HAL_RCC_ClockConfig+0x240>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 020f 	bic.w	r2, r3, #15
 80026d6:	4985      	ldr	r1, [pc, #532]	; (80028ec <HAL_RCC_ClockConfig+0x240>)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026de:	4b83      	ldr	r3, [pc, #524]	; (80028ec <HAL_RCC_ClockConfig+0x240>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d001      	beq.n	80026f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e184      	b.n	80029fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d010      	beq.n	800271e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691a      	ldr	r2, [r3, #16]
 8002700:	4b7b      	ldr	r3, [pc, #492]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002708:	429a      	cmp	r2, r3
 800270a:	d908      	bls.n	800271e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800270c:	4b78      	ldr	r3, [pc, #480]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	4975      	ldr	r1, [pc, #468]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 800271a:	4313      	orrs	r3, r2
 800271c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d010      	beq.n	800274c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	4b70      	ldr	r3, [pc, #448]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002736:	429a      	cmp	r2, r3
 8002738:	d908      	bls.n	800274c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800273a:	4b6d      	ldr	r3, [pc, #436]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	496a      	ldr	r1, [pc, #424]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 8002748:	4313      	orrs	r3, r2
 800274a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b00      	cmp	r3, #0
 8002756:	d010      	beq.n	800277a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699a      	ldr	r2, [r3, #24]
 800275c:	4b64      	ldr	r3, [pc, #400]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002764:	429a      	cmp	r2, r3
 8002766:	d908      	bls.n	800277a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002768:	4b61      	ldr	r3, [pc, #388]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 800276a:	69db      	ldr	r3, [r3, #28]
 800276c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	495e      	ldr	r1, [pc, #376]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 8002776:	4313      	orrs	r3, r2
 8002778:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0320 	and.w	r3, r3, #32
 8002782:	2b00      	cmp	r3, #0
 8002784:	d010      	beq.n	80027a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69da      	ldr	r2, [r3, #28]
 800278a:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002792:	429a      	cmp	r2, r3
 8002794:	d908      	bls.n	80027a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002796:	4b56      	ldr	r3, [pc, #344]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	4953      	ldr	r1, [pc, #332]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d010      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	4b4d      	ldr	r3, [pc, #308]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d908      	bls.n	80027d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c4:	4b4a      	ldr	r3, [pc, #296]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f023 020f 	bic.w	r2, r3, #15
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4947      	ldr	r1, [pc, #284]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d055      	beq.n	800288e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80027e2:	4b43      	ldr	r3, [pc, #268]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	4940      	ldr	r1, [pc, #256]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d107      	bne.n	800280c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027fc:	4b3c      	ldr	r3, [pc, #240]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d121      	bne.n	800284c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0f6      	b.n	80029fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d107      	bne.n	8002824 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002814:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d115      	bne.n	800284c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0ea      	b.n	80029fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d107      	bne.n	800283c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800282c:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d109      	bne.n	800284c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0de      	b.n	80029fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800283c:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0d6      	b.n	80029fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800284c:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	f023 0207 	bic.w	r2, r3, #7
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4925      	ldr	r1, [pc, #148]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 800285a:	4313      	orrs	r3, r2
 800285c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285e:	f7fe fad5 	bl	8000e0c <HAL_GetTick>
 8002862:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002864:	e00a      	b.n	800287c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002866:	f7fe fad1 	bl	8000e0c <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	; 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e0be      	b.n	80029fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287c:	4b1c      	ldr	r3, [pc, #112]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	00db      	lsls	r3, r3, #3
 800288a:	429a      	cmp	r2, r3
 800288c:	d1eb      	bne.n	8002866 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d010      	beq.n	80028bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68da      	ldr	r2, [r3, #12]
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d208      	bcs.n	80028bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028aa:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	f023 020f 	bic.w	r2, r3, #15
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	490e      	ldr	r1, [pc, #56]	; (80028f0 <HAL_RCC_ClockConfig+0x244>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028bc:	4b0b      	ldr	r3, [pc, #44]	; (80028ec <HAL_RCC_ClockConfig+0x240>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d214      	bcs.n	80028f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_RCC_ClockConfig+0x240>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 020f 	bic.w	r2, r3, #15
 80028d2:	4906      	ldr	r1, [pc, #24]	; (80028ec <HAL_RCC_ClockConfig+0x240>)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b04      	ldr	r3, [pc, #16]	; (80028ec <HAL_RCC_ClockConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e086      	b.n	80029fa <HAL_RCC_ClockConfig+0x34e>
 80028ec:	52002000 	.word	0x52002000
 80028f0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0304 	and.w	r3, r3, #4
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d010      	beq.n	8002922 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <HAL_RCC_ClockConfig+0x358>)
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800290c:	429a      	cmp	r2, r3
 800290e:	d208      	bcs.n	8002922 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002910:	4b3c      	ldr	r3, [pc, #240]	; (8002a04 <HAL_RCC_ClockConfig+0x358>)
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	4939      	ldr	r1, [pc, #228]	; (8002a04 <HAL_RCC_ClockConfig+0x358>)
 800291e:	4313      	orrs	r3, r2
 8002920:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	2b00      	cmp	r3, #0
 800292c:	d010      	beq.n	8002950 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695a      	ldr	r2, [r3, #20]
 8002932:	4b34      	ldr	r3, [pc, #208]	; (8002a04 <HAL_RCC_ClockConfig+0x358>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800293a:	429a      	cmp	r2, r3
 800293c:	d208      	bcs.n	8002950 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800293e:	4b31      	ldr	r3, [pc, #196]	; (8002a04 <HAL_RCC_ClockConfig+0x358>)
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	492e      	ldr	r1, [pc, #184]	; (8002a04 <HAL_RCC_ClockConfig+0x358>)
 800294c:	4313      	orrs	r3, r2
 800294e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b00      	cmp	r3, #0
 800295a:	d010      	beq.n	800297e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699a      	ldr	r2, [r3, #24]
 8002960:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <HAL_RCC_ClockConfig+0x358>)
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002968:	429a      	cmp	r2, r3
 800296a:	d208      	bcs.n	800297e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800296c:	4b25      	ldr	r3, [pc, #148]	; (8002a04 <HAL_RCC_ClockConfig+0x358>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	4922      	ldr	r1, [pc, #136]	; (8002a04 <HAL_RCC_ClockConfig+0x358>)
 800297a:	4313      	orrs	r3, r2
 800297c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0320 	and.w	r3, r3, #32
 8002986:	2b00      	cmp	r3, #0
 8002988:	d010      	beq.n	80029ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69da      	ldr	r2, [r3, #28]
 800298e:	4b1d      	ldr	r3, [pc, #116]	; (8002a04 <HAL_RCC_ClockConfig+0x358>)
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002996:	429a      	cmp	r2, r3
 8002998:	d208      	bcs.n	80029ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800299a:	4b1a      	ldr	r3, [pc, #104]	; (8002a04 <HAL_RCC_ClockConfig+0x358>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	4917      	ldr	r1, [pc, #92]	; (8002a04 <HAL_RCC_ClockConfig+0x358>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029ac:	f000 f834 	bl	8002a18 <HAL_RCC_GetSysClockFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <HAL_RCC_ClockConfig+0x358>)
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	f003 030f 	and.w	r3, r3, #15
 80029bc:	4912      	ldr	r1, [pc, #72]	; (8002a08 <HAL_RCC_ClockConfig+0x35c>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
 80029c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_RCC_ClockConfig+0x358>)
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	4a0d      	ldr	r2, [pc, #52]	; (8002a08 <HAL_RCC_ClockConfig+0x35c>)
 80029d4:	5cd3      	ldrb	r3, [r2, r3]
 80029d6:	f003 031f 	and.w	r3, r3, #31
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
 80029e0:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <HAL_RCC_ClockConfig+0x360>)
 80029e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029e4:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <HAL_RCC_ClockConfig+0x364>)
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80029ea:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_RCC_ClockConfig+0x368>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe f9c2 	bl	8000d78 <HAL_InitTick>
 80029f4:	4603      	mov	r3, r0
 80029f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80029f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	58024400 	.word	0x58024400
 8002a08:	08004a80 	.word	0x08004a80
 8002a0c:	24000004 	.word	0x24000004
 8002a10:	24000000 	.word	0x24000000
 8002a14:	24000008 	.word	0x24000008

08002a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	; 0x24
 8002a1c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a1e:	4bb3      	ldr	r3, [pc, #716]	; (8002cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a26:	2b18      	cmp	r3, #24
 8002a28:	f200 8155 	bhi.w	8002cd6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002a2c:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a32:	bf00      	nop
 8002a34:	08002a99 	.word	0x08002a99
 8002a38:	08002cd7 	.word	0x08002cd7
 8002a3c:	08002cd7 	.word	0x08002cd7
 8002a40:	08002cd7 	.word	0x08002cd7
 8002a44:	08002cd7 	.word	0x08002cd7
 8002a48:	08002cd7 	.word	0x08002cd7
 8002a4c:	08002cd7 	.word	0x08002cd7
 8002a50:	08002cd7 	.word	0x08002cd7
 8002a54:	08002abf 	.word	0x08002abf
 8002a58:	08002cd7 	.word	0x08002cd7
 8002a5c:	08002cd7 	.word	0x08002cd7
 8002a60:	08002cd7 	.word	0x08002cd7
 8002a64:	08002cd7 	.word	0x08002cd7
 8002a68:	08002cd7 	.word	0x08002cd7
 8002a6c:	08002cd7 	.word	0x08002cd7
 8002a70:	08002cd7 	.word	0x08002cd7
 8002a74:	08002ac5 	.word	0x08002ac5
 8002a78:	08002cd7 	.word	0x08002cd7
 8002a7c:	08002cd7 	.word	0x08002cd7
 8002a80:	08002cd7 	.word	0x08002cd7
 8002a84:	08002cd7 	.word	0x08002cd7
 8002a88:	08002cd7 	.word	0x08002cd7
 8002a8c:	08002cd7 	.word	0x08002cd7
 8002a90:	08002cd7 	.word	0x08002cd7
 8002a94:	08002acb 	.word	0x08002acb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a98:	4b94      	ldr	r3, [pc, #592]	; (8002cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d009      	beq.n	8002ab8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002aa4:	4b91      	ldr	r3, [pc, #580]	; (8002cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	08db      	lsrs	r3, r3, #3
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	4a90      	ldr	r2, [pc, #576]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002ab6:	e111      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ab8:	4b8d      	ldr	r3, [pc, #564]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002aba:	61bb      	str	r3, [r7, #24]
    break;
 8002abc:	e10e      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002abe:	4b8d      	ldr	r3, [pc, #564]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ac0:	61bb      	str	r3, [r7, #24]
    break;
 8002ac2:	e10b      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002ac4:	4b8c      	ldr	r3, [pc, #560]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ac6:	61bb      	str	r3, [r7, #24]
    break;
 8002ac8:	e108      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002aca:	4b88      	ldr	r3, [pc, #544]	; (8002cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002ad4:	4b85      	ldr	r3, [pc, #532]	; (8002cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ade:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ae0:	4b82      	ldr	r3, [pc, #520]	; (8002cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002aea:	4b80      	ldr	r3, [pc, #512]	; (8002cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aee:	08db      	lsrs	r3, r3, #3
 8002af0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	fb02 f303 	mul.w	r3, r2, r3
 8002afa:	ee07 3a90 	vmov	s15, r3
 8002afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b02:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80e1 	beq.w	8002cd0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	f000 8083 	beq.w	8002c1c <HAL_RCC_GetSysClockFreq+0x204>
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	f200 80a1 	bhi.w	8002c60 <HAL_RCC_GetSysClockFreq+0x248>
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_RCC_GetSysClockFreq+0x114>
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d056      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002b2a:	e099      	b.n	8002c60 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b2c:	4b6f      	ldr	r3, [pc, #444]	; (8002cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0320 	and.w	r3, r3, #32
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d02d      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b38:	4b6c      	ldr	r3, [pc, #432]	; (8002cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	08db      	lsrs	r3, r3, #3
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	4a6b      	ldr	r2, [pc, #428]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
 8002b48:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	ee07 3a90 	vmov	s15, r3
 8002b50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	ee07 3a90 	vmov	s15, r3
 8002b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b62:	4b62      	ldr	r3, [pc, #392]	; (8002cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b6a:	ee07 3a90 	vmov	s15, r3
 8002b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b76:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002cfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002b92:	e087      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	ee07 3a90 	vmov	s15, r3
 8002b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002d00 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ba6:	4b51      	ldr	r3, [pc, #324]	; (8002cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bae:	ee07 3a90 	vmov	s15, r3
 8002bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bba:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002cfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bd6:	e065      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	ee07 3a90 	vmov	s15, r3
 8002bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002d04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bea:	4b40      	ldr	r3, [pc, #256]	; (8002cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf2:	ee07 3a90 	vmov	s15, r3
 8002bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bfe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002cfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c1a:	e043      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	ee07 3a90 	vmov	s15, r3
 8002c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c26:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002d08 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c2e:	4b2f      	ldr	r3, [pc, #188]	; (8002cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c36:	ee07 3a90 	vmov	s15, r3
 8002c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002cfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c5e:	e021      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c6a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002d04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c72:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c82:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002cfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ca2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	0a5b      	lsrs	r3, r3, #9
 8002caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cae:	3301      	adds	r3, #1
 8002cb0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	ee07 3a90 	vmov	s15, r3
 8002cb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc8:	ee17 3a90 	vmov	r3, s15
 8002ccc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002cce:	e005      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61bb      	str	r3, [r7, #24]
    break;
 8002cd4:	e002      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002cd6:	4b07      	ldr	r3, [pc, #28]	; (8002cf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002cd8:	61bb      	str	r3, [r7, #24]
    break;
 8002cda:	bf00      	nop
  }

  return sysclockfreq;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3724      	adds	r7, #36	; 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	58024400 	.word	0x58024400
 8002cf0:	03d09000 	.word	0x03d09000
 8002cf4:	003d0900 	.word	0x003d0900
 8002cf8:	007a1200 	.word	0x007a1200
 8002cfc:	46000000 	.word	0x46000000
 8002d00:	4c742400 	.word	0x4c742400
 8002d04:	4a742400 	.word	0x4a742400
 8002d08:	4af42400 	.word	0x4af42400

08002d0c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d14:	2300      	movs	r3, #0
 8002d16:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d18:	2300      	movs	r3, #0
 8002d1a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d03f      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d30:	d02a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002d36:	d824      	bhi.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d3c:	d018      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d42:	d81e      	bhi.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4c:	d007      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d4e:	e018      	b.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d50:	4bab      	ldr	r3, [pc, #684]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	4aaa      	ldr	r2, [pc, #680]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d5c:	e015      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	3304      	adds	r3, #4
 8002d62:	2102      	movs	r1, #2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f000 ff11 	bl	8003b8c <RCCEx_PLL2_Config>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d6e:	e00c      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3324      	adds	r3, #36	; 0x24
 8002d74:	2102      	movs	r1, #2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 ffba 	bl	8003cf0 <RCCEx_PLL3_Config>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002d80:	e003      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	75fb      	strb	r3, [r7, #23]
      break;
 8002d86:	e000      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d109      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d90:	4b9b      	ldr	r3, [pc, #620]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d9c:	4998      	ldr	r1, [pc, #608]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	650b      	str	r3, [r1, #80]	; 0x50
 8002da2:	e001      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d03d      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d826      	bhi.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002dbc:	a201      	add	r2, pc, #4	; (adr r2, 8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc2:	bf00      	nop
 8002dc4:	08002dd9 	.word	0x08002dd9
 8002dc8:	08002de7 	.word	0x08002de7
 8002dcc:	08002df9 	.word	0x08002df9
 8002dd0:	08002e11 	.word	0x08002e11
 8002dd4:	08002e11 	.word	0x08002e11
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd8:	4b89      	ldr	r3, [pc, #548]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	4a88      	ldr	r2, [pc, #544]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002de4:	e015      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	3304      	adds	r3, #4
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fecd 	bl	8003b8c <RCCEx_PLL2_Config>
 8002df2:	4603      	mov	r3, r0
 8002df4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002df6:	e00c      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3324      	adds	r3, #36	; 0x24
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 ff76 	bl	8003cf0 <RCCEx_PLL3_Config>
 8002e04:	4603      	mov	r3, r0
 8002e06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002e08:	e003      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e0e:	e000      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002e10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e12:	7dfb      	ldrb	r3, [r7, #23]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d109      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e18:	4b79      	ldr	r3, [pc, #484]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1c:	f023 0207 	bic.w	r2, r3, #7
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e24:	4976      	ldr	r1, [pc, #472]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	650b      	str	r3, [r1, #80]	; 0x50
 8002e2a:	e001      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d042      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e44:	d02b      	beq.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e4a:	d825      	bhi.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e4c:	2bc0      	cmp	r3, #192	; 0xc0
 8002e4e:	d028      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002e50:	2bc0      	cmp	r3, #192	; 0xc0
 8002e52:	d821      	bhi.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e54:	2b80      	cmp	r3, #128	; 0x80
 8002e56:	d016      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002e58:	2b80      	cmp	r3, #128	; 0x80
 8002e5a:	d81d      	bhi.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002e60:	2b40      	cmp	r3, #64	; 0x40
 8002e62:	d007      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002e64:	e018      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e66:	4b66      	ldr	r3, [pc, #408]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	4a65      	ldr	r2, [pc, #404]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e70:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e72:	e017      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3304      	adds	r3, #4
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fe86 	bl	8003b8c <RCCEx_PLL2_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e84:	e00e      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3324      	adds	r3, #36	; 0x24
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 ff2f 	bl	8003cf0 <RCCEx_PLL3_Config>
 8002e92:	4603      	mov	r3, r0
 8002e94:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002e96:	e005      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e9c:	e002      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e000      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002ea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ea4:	7dfb      	ldrb	r3, [r7, #23]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002eaa:	4b55      	ldr	r3, [pc, #340]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	4952      	ldr	r1, [pc, #328]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	650b      	str	r3, [r1, #80]	; 0x50
 8002ebc:	e001      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ebe:	7dfb      	ldrb	r3, [r7, #23]
 8002ec0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d049      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002ed4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ed8:	d030      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002eda:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ede:	d82a      	bhi.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ee0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ee4:	d02c      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002ee6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002eea:	d824      	bhi.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002eec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef0:	d018      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002ef2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef6:	d81e      	bhi.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002efc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f00:	d007      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002f02:	e018      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f04:	4b3e      	ldr	r3, [pc, #248]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	4a3d      	ldr	r2, [pc, #244]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f10:	e017      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3304      	adds	r3, #4
 8002f16:	2100      	movs	r1, #0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 fe37 	bl	8003b8c <RCCEx_PLL2_Config>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002f22:	e00e      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3324      	adds	r3, #36	; 0x24
 8002f28:	2100      	movs	r1, #0
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fee0 	bl	8003cf0 <RCCEx_PLL3_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002f34:	e005      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	75fb      	strb	r3, [r7, #23]
      break;
 8002f3a:	e002      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002f3c:	bf00      	nop
 8002f3e:	e000      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10a      	bne.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f48:	4b2d      	ldr	r3, [pc, #180]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f4c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002f56:	492a      	ldr	r1, [pc, #168]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	658b      	str	r3, [r1, #88]	; 0x58
 8002f5c:	e001      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5e:	7dfb      	ldrb	r3, [r7, #23]
 8002f60:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d04c      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f78:	d030      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002f7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f7e:	d82a      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f80:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f84:	d02c      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002f86:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002f8a:	d824      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f90:	d018      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002f92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f96:	d81e      	bhi.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa0:	d007      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002fa2:	e018      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fa4:	4b16      	ldr	r3, [pc, #88]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	4a15      	ldr	r2, [pc, #84]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fb0:	e017      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fde7 	bl	8003b8c <RCCEx_PLL2_Config>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002fc2:	e00e      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3324      	adds	r3, #36	; 0x24
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f000 fe90 	bl	8003cf0 <RCCEx_PLL3_Config>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002fd4:	e005      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8002fda:	e002      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002fdc:	bf00      	nop
 8002fde:	e000      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002fe0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fe2:	7dfb      	ldrb	r3, [r7, #23]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10d      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ff6:	4902      	ldr	r1, [pc, #8]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	658b      	str	r3, [r1, #88]	; 0x58
 8002ffc:	e004      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002ffe:	bf00      	nop
 8003000:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003004:	7dfb      	ldrb	r3, [r7, #23]
 8003006:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d032      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003018:	2b30      	cmp	r3, #48	; 0x30
 800301a:	d01c      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800301c:	2b30      	cmp	r3, #48	; 0x30
 800301e:	d817      	bhi.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003020:	2b20      	cmp	r3, #32
 8003022:	d00c      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003024:	2b20      	cmp	r3, #32
 8003026:	d813      	bhi.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003028:	2b00      	cmp	r3, #0
 800302a:	d016      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800302c:	2b10      	cmp	r3, #16
 800302e:	d10f      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003030:	4baf      	ldr	r3, [pc, #700]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	4aae      	ldr	r2, [pc, #696]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800303a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800303c:	e00e      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	3304      	adds	r3, #4
 8003042:	2102      	movs	r1, #2
 8003044:	4618      	mov	r0, r3
 8003046:	f000 fda1 	bl	8003b8c <RCCEx_PLL2_Config>
 800304a:	4603      	mov	r3, r0
 800304c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800304e:	e005      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	75fb      	strb	r3, [r7, #23]
      break;
 8003054:	e002      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003056:	bf00      	nop
 8003058:	e000      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800305a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800305c:	7dfb      	ldrb	r3, [r7, #23]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003062:	4ba3      	ldr	r3, [pc, #652]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003066:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800306e:	49a0      	ldr	r1, [pc, #640]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003070:	4313      	orrs	r3, r2
 8003072:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003074:	e001      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003076:	7dfb      	ldrb	r3, [r7, #23]
 8003078:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d047      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800308a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800308e:	d030      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003094:	d82a      	bhi.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8003096:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800309a:	d02c      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800309c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80030a0:	d824      	bhi.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80030a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a6:	d018      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80030a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ac:	d81e      	bhi.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80030b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b6:	d007      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80030b8:	e018      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ba:	4b8d      	ldr	r3, [pc, #564]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	4a8c      	ldr	r2, [pc, #560]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80030c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80030c6:	e017      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	3304      	adds	r3, #4
 80030cc:	2100      	movs	r1, #0
 80030ce:	4618      	mov	r0, r3
 80030d0:	f000 fd5c 	bl	8003b8c <RCCEx_PLL2_Config>
 80030d4:	4603      	mov	r3, r0
 80030d6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80030d8:	e00e      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3324      	adds	r3, #36	; 0x24
 80030de:	2100      	movs	r1, #0
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 fe05 	bl	8003cf0 <RCCEx_PLL3_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80030ea:	e005      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	75fb      	strb	r3, [r7, #23]
      break;
 80030f0:	e002      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80030f2:	bf00      	nop
 80030f4:	e000      	b.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80030f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030f8:	7dfb      	ldrb	r3, [r7, #23]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80030fe:	4b7c      	ldr	r3, [pc, #496]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003102:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310a:	4979      	ldr	r1, [pc, #484]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800310c:	4313      	orrs	r3, r2
 800310e:	650b      	str	r3, [r1, #80]	; 0x50
 8003110:	e001      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003112:	7dfb      	ldrb	r3, [r7, #23]
 8003114:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d049      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003126:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800312a:	d02e      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800312c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003130:	d828      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003132:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003136:	d02a      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800313c:	d822      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800313e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003142:	d026      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003144:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003148:	d81c      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800314a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800314e:	d010      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003154:	d816      	bhi.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01d      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800315a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800315e:	d111      	bne.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	3304      	adds	r3, #4
 8003164:	2101      	movs	r1, #1
 8003166:	4618      	mov	r0, r3
 8003168:	f000 fd10 	bl	8003b8c <RCCEx_PLL2_Config>
 800316c:	4603      	mov	r3, r0
 800316e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003170:	e012      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3324      	adds	r3, #36	; 0x24
 8003176:	2101      	movs	r1, #1
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fdb9 	bl	8003cf0 <RCCEx_PLL3_Config>
 800317e:	4603      	mov	r3, r0
 8003180:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003182:	e009      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	75fb      	strb	r3, [r7, #23]
      break;
 8003188:	e006      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800318a:	bf00      	nop
 800318c:	e004      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800318e:	bf00      	nop
 8003190:	e002      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003192:	bf00      	nop
 8003194:	e000      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003196:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003198:	7dfb      	ldrb	r3, [r7, #23]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800319e:	4b54      	ldr	r3, [pc, #336]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80031a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031aa:	4951      	ldr	r1, [pc, #324]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	650b      	str	r3, [r1, #80]	; 0x50
 80031b0:	e001      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d04b      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031cc:	d02e      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80031ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80031d2:	d828      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d8:	d02a      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80031da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031de:	d822      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031e4:	d026      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80031e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80031ea:	d81c      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031f0:	d010      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80031f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031f6:	d816      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01d      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80031fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003200:	d111      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3304      	adds	r3, #4
 8003206:	2101      	movs	r1, #1
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fcbf 	bl	8003b8c <RCCEx_PLL2_Config>
 800320e:	4603      	mov	r3, r0
 8003210:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003212:	e012      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3324      	adds	r3, #36	; 0x24
 8003218:	2101      	movs	r1, #1
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fd68 	bl	8003cf0 <RCCEx_PLL3_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003224:	e009      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	75fb      	strb	r3, [r7, #23]
      break;
 800322a:	e006      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800322c:	bf00      	nop
 800322e:	e004      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003230:	bf00      	nop
 8003232:	e002      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003234:	bf00      	nop
 8003236:	e000      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003240:	4b2b      	ldr	r3, [pc, #172]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003244:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800324e:	4928      	ldr	r1, [pc, #160]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003250:	4313      	orrs	r3, r2
 8003252:	658b      	str	r3, [r1, #88]	; 0x58
 8003254:	e001      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003256:	7dfb      	ldrb	r3, [r7, #23]
 8003258:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d02f      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800326a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800326e:	d00e      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003274:	d814      	bhi.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003276:	2b00      	cmp	r3, #0
 8003278:	d015      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800327a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800327e:	d10f      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003280:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003284:	4a1a      	ldr	r2, [pc, #104]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003286:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800328a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800328c:	e00c      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3304      	adds	r3, #4
 8003292:	2101      	movs	r1, #1
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fc79 	bl	8003b8c <RCCEx_PLL2_Config>
 800329a:	4603      	mov	r3, r0
 800329c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800329e:	e003      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	75fb      	strb	r3, [r7, #23]
      break;
 80032a4:	e000      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80032a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032a8:	7dfb      	ldrb	r3, [r7, #23]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80032b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ba:	490d      	ldr	r1, [pc, #52]	; (80032f0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	650b      	str	r3, [r1, #80]	; 0x50
 80032c0:	e001      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
 80032c4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d033      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d81c      	bhi.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80032da:	a201      	add	r2, pc, #4	; (adr r2, 80032e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80032dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e0:	0800331b 	.word	0x0800331b
 80032e4:	080032f5 	.word	0x080032f5
 80032e8:	08003303 	.word	0x08003303
 80032ec:	0800331b 	.word	0x0800331b
 80032f0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032f4:	4bb8      	ldr	r3, [pc, #736]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	4ab7      	ldr	r2, [pc, #732]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80032fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003300:	e00c      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	3304      	adds	r3, #4
 8003306:	2102      	movs	r1, #2
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fc3f 	bl	8003b8c <RCCEx_PLL2_Config>
 800330e:	4603      	mov	r3, r0
 8003310:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003312:	e003      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	75fb      	strb	r3, [r7, #23]
      break;
 8003318:	e000      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800331a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800331c:	7dfb      	ldrb	r3, [r7, #23]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003322:	4bad      	ldr	r3, [pc, #692]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003326:	f023 0203 	bic.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	49aa      	ldr	r1, [pc, #680]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003330:	4313      	orrs	r3, r2
 8003332:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003334:	e001      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003336:	7dfb      	ldrb	r3, [r7, #23]
 8003338:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8086 	beq.w	8003454 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003348:	4ba4      	ldr	r3, [pc, #656]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4aa3      	ldr	r2, [pc, #652]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800334e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003352:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003354:	f7fd fd5a 	bl	8000e0c <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800335a:	e009      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335c:	f7fd fd56 	bl	8000e0c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d902      	bls.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	75fb      	strb	r3, [r7, #23]
        break;
 800336e:	e005      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003370:	4b9a      	ldr	r3, [pc, #616]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ef      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800337c:	7dfb      	ldrb	r3, [r7, #23]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d166      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003382:	4b95      	ldr	r3, [pc, #596]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003384:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800338c:	4053      	eors	r3, r2
 800338e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003392:	2b00      	cmp	r3, #0
 8003394:	d013      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003396:	4b90      	ldr	r3, [pc, #576]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800339e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033a0:	4b8d      	ldr	r3, [pc, #564]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	4a8c      	ldr	r2, [pc, #560]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033ac:	4b8a      	ldr	r3, [pc, #552]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	4a89      	ldr	r2, [pc, #548]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80033b8:	4a87      	ldr	r2, [pc, #540]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c8:	d115      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ca:	f7fd fd1f 	bl	8000e0c <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033d0:	e00b      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d2:	f7fd fd1b 	bl	8000e0c <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d902      	bls.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	75fb      	strb	r3, [r7, #23]
            break;
 80033e8:	e005      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033ea:	4b7b      	ldr	r3, [pc, #492]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0ed      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80033f6:	7dfb      	ldrb	r3, [r7, #23]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d126      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003402:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800340a:	d10d      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800340c:	4b72      	ldr	r3, [pc, #456]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800341a:	0919      	lsrs	r1, r3, #4
 800341c:	4b70      	ldr	r3, [pc, #448]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800341e:	400b      	ands	r3, r1
 8003420:	496d      	ldr	r1, [pc, #436]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	610b      	str	r3, [r1, #16]
 8003426:	e005      	b.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003428:	4b6b      	ldr	r3, [pc, #428]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	4a6a      	ldr	r2, [pc, #424]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800342e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003432:	6113      	str	r3, [r2, #16]
 8003434:	4b68      	ldr	r3, [pc, #416]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003436:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800343e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003442:	4965      	ldr	r1, [pc, #404]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003444:	4313      	orrs	r3, r2
 8003446:	670b      	str	r3, [r1, #112]	; 0x70
 8003448:	e004      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800344a:	7dfb      	ldrb	r3, [r7, #23]
 800344c:	75bb      	strb	r3, [r7, #22]
 800344e:	e001      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d07e      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003464:	2b28      	cmp	r3, #40	; 0x28
 8003466:	d867      	bhi.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003468:	a201      	add	r2, pc, #4	; (adr r2, 8003470 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800346a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346e:	bf00      	nop
 8003470:	0800353f 	.word	0x0800353f
 8003474:	08003539 	.word	0x08003539
 8003478:	08003539 	.word	0x08003539
 800347c:	08003539 	.word	0x08003539
 8003480:	08003539 	.word	0x08003539
 8003484:	08003539 	.word	0x08003539
 8003488:	08003539 	.word	0x08003539
 800348c:	08003539 	.word	0x08003539
 8003490:	08003515 	.word	0x08003515
 8003494:	08003539 	.word	0x08003539
 8003498:	08003539 	.word	0x08003539
 800349c:	08003539 	.word	0x08003539
 80034a0:	08003539 	.word	0x08003539
 80034a4:	08003539 	.word	0x08003539
 80034a8:	08003539 	.word	0x08003539
 80034ac:	08003539 	.word	0x08003539
 80034b0:	08003527 	.word	0x08003527
 80034b4:	08003539 	.word	0x08003539
 80034b8:	08003539 	.word	0x08003539
 80034bc:	08003539 	.word	0x08003539
 80034c0:	08003539 	.word	0x08003539
 80034c4:	08003539 	.word	0x08003539
 80034c8:	08003539 	.word	0x08003539
 80034cc:	08003539 	.word	0x08003539
 80034d0:	0800353f 	.word	0x0800353f
 80034d4:	08003539 	.word	0x08003539
 80034d8:	08003539 	.word	0x08003539
 80034dc:	08003539 	.word	0x08003539
 80034e0:	08003539 	.word	0x08003539
 80034e4:	08003539 	.word	0x08003539
 80034e8:	08003539 	.word	0x08003539
 80034ec:	08003539 	.word	0x08003539
 80034f0:	0800353f 	.word	0x0800353f
 80034f4:	08003539 	.word	0x08003539
 80034f8:	08003539 	.word	0x08003539
 80034fc:	08003539 	.word	0x08003539
 8003500:	08003539 	.word	0x08003539
 8003504:	08003539 	.word	0x08003539
 8003508:	08003539 	.word	0x08003539
 800350c:	08003539 	.word	0x08003539
 8003510:	0800353f 	.word	0x0800353f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3304      	adds	r3, #4
 8003518:	2101      	movs	r1, #1
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fb36 	bl	8003b8c <RCCEx_PLL2_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003524:	e00c      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3324      	adds	r3, #36	; 0x24
 800352a:	2101      	movs	r1, #1
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fbdf 	bl	8003cf0 <RCCEx_PLL3_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003536:	e003      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	75fb      	strb	r3, [r7, #23]
      break;
 800353c:	e000      	b.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800353e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003540:	7dfb      	ldrb	r3, [r7, #23]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003546:	4b24      	ldr	r3, [pc, #144]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800354a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003552:	4921      	ldr	r1, [pc, #132]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003554:	4313      	orrs	r3, r2
 8003556:	654b      	str	r3, [r1, #84]	; 0x54
 8003558:	e001      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d03e      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356e:	2b05      	cmp	r3, #5
 8003570:	d820      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003572:	a201      	add	r2, pc, #4	; (adr r2, 8003578 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	080035bb 	.word	0x080035bb
 800357c:	08003591 	.word	0x08003591
 8003580:	080035a3 	.word	0x080035a3
 8003584:	080035bb 	.word	0x080035bb
 8003588:	080035bb 	.word	0x080035bb
 800358c:	080035bb 	.word	0x080035bb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	2101      	movs	r1, #1
 8003596:	4618      	mov	r0, r3
 8003598:	f000 faf8 	bl	8003b8c <RCCEx_PLL2_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80035a0:	e00c      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3324      	adds	r3, #36	; 0x24
 80035a6:	2101      	movs	r1, #1
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 fba1 	bl	8003cf0 <RCCEx_PLL3_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80035b2:	e003      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	75fb      	strb	r3, [r7, #23]
      break;
 80035b8:	e000      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80035ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d110      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035c2:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80035c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c6:	f023 0207 	bic.w	r2, r3, #7
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ce:	4902      	ldr	r1, [pc, #8]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	654b      	str	r3, [r1, #84]	; 0x54
 80035d4:	e008      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80035d6:	bf00      	nop
 80035d8:	58024400 	.word	0x58024400
 80035dc:	58024800 	.word	0x58024800
 80035e0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	7dfb      	ldrb	r3, [r7, #23]
 80035e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d039      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d820      	bhi.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003647 	.word	0x08003647
 8003608:	0800361d 	.word	0x0800361d
 800360c:	0800362f 	.word	0x0800362f
 8003610:	08003647 	.word	0x08003647
 8003614:	08003647 	.word	0x08003647
 8003618:	08003647 	.word	0x08003647
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3304      	adds	r3, #4
 8003620:	2101      	movs	r1, #1
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fab2 	bl	8003b8c <RCCEx_PLL2_Config>
 8003628:	4603      	mov	r3, r0
 800362a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800362c:	e00c      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	3324      	adds	r3, #36	; 0x24
 8003632:	2101      	movs	r1, #1
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fb5b 	bl	8003cf0 <RCCEx_PLL3_Config>
 800363a:	4603      	mov	r3, r0
 800363c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800363e:	e003      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	75fb      	strb	r3, [r7, #23]
      break;
 8003644:	e000      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003646:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003648:	7dfb      	ldrb	r3, [r7, #23]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800364e:	4bb7      	ldr	r3, [pc, #732]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003652:	f023 0207 	bic.w	r2, r3, #7
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365c:	49b3      	ldr	r1, [pc, #716]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800365e:	4313      	orrs	r3, r2
 8003660:	658b      	str	r3, [r1, #88]	; 0x58
 8003662:	e001      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d04b      	beq.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800367a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800367e:	d02e      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003684:	d828      	bhi.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368a:	d02a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003690:	d822      	bhi.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003692:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003696:	d026      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003698:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800369c:	d81c      	bhi.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800369e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a2:	d010      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80036a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a8:	d816      	bhi.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d01d      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80036ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036b2:	d111      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fa66 	bl	8003b8c <RCCEx_PLL2_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80036c4:	e012      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3324      	adds	r3, #36	; 0x24
 80036ca:	2102      	movs	r1, #2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fb0f 	bl	8003cf0 <RCCEx_PLL3_Config>
 80036d2:	4603      	mov	r3, r0
 80036d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80036d6:	e009      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	75fb      	strb	r3, [r7, #23]
      break;
 80036dc:	e006      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80036de:	bf00      	nop
 80036e0:	e004      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80036e2:	bf00      	nop
 80036e4:	e002      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80036e6:	bf00      	nop
 80036e8:	e000      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80036ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ec:	7dfb      	ldrb	r3, [r7, #23]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036f2:	4b8e      	ldr	r3, [pc, #568]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80036f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003700:	498a      	ldr	r1, [pc, #552]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003702:	4313      	orrs	r3, r2
 8003704:	654b      	str	r3, [r1, #84]	; 0x54
 8003706:	e001      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003714:	2b00      	cmp	r3, #0
 8003716:	d04b      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800371e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003722:	d02e      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003724:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003728:	d828      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800372a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372e:	d02a      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003734:	d822      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800373a:	d026      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800373c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003740:	d81c      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003746:	d010      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800374c:	d816      	bhi.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01d      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003756:	d111      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3304      	adds	r3, #4
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fa14 	bl	8003b8c <RCCEx_PLL2_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003768:	e012      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3324      	adds	r3, #36	; 0x24
 800376e:	2102      	movs	r1, #2
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fabd 	bl	8003cf0 <RCCEx_PLL3_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800377a:	e009      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	75fb      	strb	r3, [r7, #23]
      break;
 8003780:	e006      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003782:	bf00      	nop
 8003784:	e004      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003786:	bf00      	nop
 8003788:	e002      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800378e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003790:	7dfb      	ldrb	r3, [r7, #23]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003796:	4b65      	ldr	r3, [pc, #404]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800379a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a4:	4961      	ldr	r1, [pc, #388]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	658b      	str	r3, [r1, #88]	; 0x58
 80037aa:	e001      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d04b      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037c2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80037c6:	d02e      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80037c8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80037cc:	d828      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80037ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d2:	d02a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80037d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d8:	d822      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80037da:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80037de:	d026      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80037e0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80037e4:	d81c      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80037e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ea:	d010      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80037ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037f0:	d816      	bhi.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01d      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80037f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037fa:	d111      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3304      	adds	r3, #4
 8003800:	2100      	movs	r1, #0
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f9c2 	bl	8003b8c <RCCEx_PLL2_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800380c:	e012      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	3324      	adds	r3, #36	; 0x24
 8003812:	2102      	movs	r1, #2
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fa6b 	bl	8003cf0 <RCCEx_PLL3_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800381e:	e009      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	75fb      	strb	r3, [r7, #23]
      break;
 8003824:	e006      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003826:	bf00      	nop
 8003828:	e004      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800382a:	bf00      	nop
 800382c:	e002      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800382e:	bf00      	nop
 8003830:	e000      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003834:	7dfb      	ldrb	r3, [r7, #23]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10a      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800383a:	4b3c      	ldr	r3, [pc, #240]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800383c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003848:	4938      	ldr	r1, [pc, #224]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800384a:	4313      	orrs	r3, r2
 800384c:	658b      	str	r3, [r1, #88]	; 0x58
 800384e:	e001      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800386a:	d10a      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3324      	adds	r3, #36	; 0x24
 8003870:	2102      	movs	r1, #2
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fa3c 	bl	8003cf0 <RCCEx_PLL3_Config>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003882:	4b2a      	ldr	r3, [pc, #168]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003886:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003890:	4926      	ldr	r1, [pc, #152]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003892:	4313      	orrs	r3, r2
 8003894:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0310 	and.w	r3, r3, #16
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d01a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ac:	d10a      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	3324      	adds	r3, #36	; 0x24
 80038b2:	2102      	movs	r1, #2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fa1b 	bl	8003cf0 <RCCEx_PLL3_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80038c4:	4b19      	ldr	r3, [pc, #100]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80038c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038d2:	4916      	ldr	r1, [pc, #88]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d036      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80038ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038ee:	d01f      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80038f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038f4:	d817      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80038fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fe:	d009      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003900:	e011      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3304      	adds	r3, #4
 8003906:	2100      	movs	r1, #0
 8003908:	4618      	mov	r0, r3
 800390a:	f000 f93f 	bl	8003b8c <RCCEx_PLL2_Config>
 800390e:	4603      	mov	r3, r0
 8003910:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003912:	e00e      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3324      	adds	r3, #36	; 0x24
 8003918:	2102      	movs	r1, #2
 800391a:	4618      	mov	r0, r3
 800391c:	f000 f9e8 	bl	8003cf0 <RCCEx_PLL3_Config>
 8003920:	4603      	mov	r3, r0
 8003922:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003924:	e005      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	75fb      	strb	r3, [r7, #23]
      break;
 800392a:	e002      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800392c:	58024400 	.word	0x58024400
      break;
 8003930:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003932:	7dfb      	ldrb	r3, [r7, #23]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003938:	4b93      	ldr	r3, [pc, #588]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003946:	4990      	ldr	r1, [pc, #576]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003948:	4313      	orrs	r3, r2
 800394a:	658b      	str	r3, [r1, #88]	; 0x58
 800394c:	e001      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394e:	7dfb      	ldrb	r3, [r7, #23]
 8003950:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d033      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003964:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003968:	d01c      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800396a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800396e:	d816      	bhi.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003974:	d003      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003976:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800397a:	d007      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800397c:	e00f      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800397e:	4b82      	ldr	r3, [pc, #520]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	4a81      	ldr	r2, [pc, #516]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003988:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800398a:	e00c      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3324      	adds	r3, #36	; 0x24
 8003990:	2101      	movs	r1, #1
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f9ac 	bl	8003cf0 <RCCEx_PLL3_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800399c:	e003      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	75fb      	strb	r3, [r7, #23]
      break;
 80039a2:	e000      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80039a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10a      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80039ac:	4b76      	ldr	r3, [pc, #472]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80039ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039ba:	4973      	ldr	r1, [pc, #460]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	654b      	str	r3, [r1, #84]	; 0x54
 80039c0:	e001      	b.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c2:	7dfb      	ldrb	r3, [r7, #23]
 80039c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d029      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80039da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039de:	d007      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80039e0:	e00f      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e2:	4b69      	ldr	r3, [pc, #420]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	4a68      	ldr	r2, [pc, #416]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80039e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80039ee:	e00b      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3304      	adds	r3, #4
 80039f4:	2102      	movs	r1, #2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 f8c8 	bl	8003b8c <RCCEx_PLL2_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003a00:	e002      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	75fb      	strb	r3, [r7, #23]
      break;
 8003a06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003a0e:	4b5e      	ldr	r3, [pc, #376]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a1a:	495b      	ldr	r1, [pc, #364]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a20:	e001      	b.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	3324      	adds	r3, #36	; 0x24
 8003a36:	2102      	movs	r1, #2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f000 f959 	bl	8003cf0 <RCCEx_PLL3_Config>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d030      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a5c:	d017      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a62:	d811      	bhi.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a68:	d013      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003a6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a6e:	d80b      	bhi.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d010      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003a74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a78:	d106      	bne.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7a:	4b43      	ldr	r3, [pc, #268]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a7e:	4a42      	ldr	r2, [pc, #264]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003a80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003a86:	e007      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8c:	e004      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e002      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003a92:	bf00      	nop
 8003a94:	e000      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a98:	7dfb      	ldrb	r3, [r7, #23]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a9e:	4b3a      	ldr	r3, [pc, #232]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003aaa:	4937      	ldr	r1, [pc, #220]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	654b      	str	r3, [r1, #84]	; 0x54
 8003ab0:	e001      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab2:	7dfb      	ldrb	r3, [r7, #23]
 8003ab4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d008      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ac2:	4b31      	ldr	r3, [pc, #196]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ace:	492e      	ldr	r1, [pc, #184]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d009      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003ae0:	4b29      	ldr	r3, [pc, #164]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003aee:	4926      	ldr	r1, [pc, #152]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b00:	4b21      	ldr	r3, [pc, #132]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b0c:	491e      	ldr	r1, [pc, #120]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00d      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b1e:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	4a19      	ldr	r2, [pc, #100]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b24:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b28:	6113      	str	r3, [r2, #16]
 8003b2a:	4b17      	ldr	r3, [pc, #92]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b2c:	691a      	ldr	r2, [r3, #16]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003b34:	4914      	ldr	r1, [pc, #80]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	da08      	bge.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003b42:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b46:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b4e:	490e      	ldr	r1, [pc, #56]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d009      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6e:	4906      	ldr	r1, [pc, #24]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003b74:	7dbb      	ldrb	r3, [r7, #22]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e000      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	58024400 	.word	0x58024400

08003b8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b9a:	4b53      	ldr	r3, [pc, #332]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d101      	bne.n	8003baa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e099      	b.n	8003cde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003baa:	4b4f      	ldr	r3, [pc, #316]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a4e      	ldr	r2, [pc, #312]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003bb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb6:	f7fd f929 	bl	8000e0c <HAL_GetTick>
 8003bba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bbc:	e008      	b.n	8003bd0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003bbe:	f7fd f925 	bl	8000e0c <HAL_GetTick>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d901      	bls.n	8003bd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e086      	b.n	8003cde <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bd0:	4b45      	ldr	r3, [pc, #276]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f0      	bne.n	8003bbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003bdc:	4b42      	ldr	r3, [pc, #264]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	031b      	lsls	r3, r3, #12
 8003bea:	493f      	ldr	r1, [pc, #252]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	628b      	str	r3, [r1, #40]	; 0x28
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	025b      	lsls	r3, r3, #9
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	061b      	lsls	r3, r3, #24
 8003c1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c20:	4931      	ldr	r1, [pc, #196]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c26:	4b30      	ldr	r3, [pc, #192]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	492d      	ldr	r1, [pc, #180]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c38:	4b2b      	ldr	r3, [pc, #172]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	f023 0220 	bic.w	r2, r3, #32
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	4928      	ldr	r1, [pc, #160]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c4a:	4b27      	ldr	r3, [pc, #156]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	4a26      	ldr	r2, [pc, #152]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003c50:	f023 0310 	bic.w	r3, r3, #16
 8003c54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c56:	4b24      	ldr	r3, [pc, #144]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003c58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c5a:	4b24      	ldr	r3, [pc, #144]	; (8003cec <RCCEx_PLL2_Config+0x160>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	69d2      	ldr	r2, [r2, #28]
 8003c62:	00d2      	lsls	r2, r2, #3
 8003c64:	4920      	ldr	r1, [pc, #128]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6e:	4a1e      	ldr	r2, [pc, #120]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003c70:	f043 0310 	orr.w	r3, r3, #16
 8003c74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c7c:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c80:	4a19      	ldr	r2, [pc, #100]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003c82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c88:	e00f      	b.n	8003caa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d106      	bne.n	8003c9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c90:	4b15      	ldr	r3, [pc, #84]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	4a14      	ldr	r2, [pc, #80]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c9c:	e005      	b.n	8003caa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c9e:	4b12      	ldr	r3, [pc, #72]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	4a11      	ldr	r2, [pc, #68]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003ca4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ca8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003caa:	4b0f      	ldr	r3, [pc, #60]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a0e      	ldr	r2, [pc, #56]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003cb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb6:	f7fd f8a9 	bl	8000e0c <HAL_GetTick>
 8003cba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cbc:	e008      	b.n	8003cd0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003cbe:	f7fd f8a5 	bl	8000e0c <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e006      	b.n	8003cde <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cd0:	4b05      	ldr	r3, [pc, #20]	; (8003ce8 <RCCEx_PLL2_Config+0x15c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	58024400 	.word	0x58024400
 8003cec:	ffff0007 	.word	0xffff0007

08003cf0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cfe:	4b53      	ldr	r3, [pc, #332]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d101      	bne.n	8003d0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e099      	b.n	8003e42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003d0e:	4b4f      	ldr	r3, [pc, #316]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a4e      	ldr	r2, [pc, #312]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1a:	f7fd f877 	bl	8000e0c <HAL_GetTick>
 8003d1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d20:	e008      	b.n	8003d34 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d22:	f7fd f873 	bl	8000e0c <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e086      	b.n	8003e42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d34:	4b45      	ldr	r3, [pc, #276]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1f0      	bne.n	8003d22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d40:	4b42      	ldr	r3, [pc, #264]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	051b      	lsls	r3, r3, #20
 8003d4e:	493f      	ldr	r1, [pc, #252]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	628b      	str	r3, [r1, #40]	; 0x28
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	025b      	lsls	r3, r3, #9
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	431a      	orrs	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	041b      	lsls	r3, r3, #16
 8003d72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d76:	431a      	orrs	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	691b      	ldr	r3, [r3, #16]
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	061b      	lsls	r3, r3, #24
 8003d80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d84:	4931      	ldr	r1, [pc, #196]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d8a:	4b30      	ldr	r3, [pc, #192]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	492d      	ldr	r1, [pc, #180]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d9c:	4b2b      	ldr	r3, [pc, #172]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	4928      	ldr	r1, [pc, #160]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003dae:	4b27      	ldr	r3, [pc, #156]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	4a26      	ldr	r2, [pc, #152]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003db4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003dba:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dbe:	4b24      	ldr	r3, [pc, #144]	; (8003e50 <RCCEx_PLL3_Config+0x160>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	69d2      	ldr	r2, [r2, #28]
 8003dc6:	00d2      	lsls	r2, r2, #3
 8003dc8:	4920      	ldr	r1, [pc, #128]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003dce:	4b1f      	ldr	r3, [pc, #124]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd2:	4a1e      	ldr	r2, [pc, #120]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d106      	bne.n	8003dee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003de0:	4b1a      	ldr	r3, [pc, #104]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de4:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003de6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dec:	e00f      	b.n	8003e0e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d106      	bne.n	8003e02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003df4:	4b15      	ldr	r3, [pc, #84]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003dfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e00:	e005      	b.n	8003e0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003e02:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	4a11      	ldr	r2, [pc, #68]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003e08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003e0e:	4b0f      	ldr	r3, [pc, #60]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e1a:	f7fc fff7 	bl	8000e0c <HAL_GetTick>
 8003e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e20:	e008      	b.n	8003e34 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e22:	f7fc fff3 	bl	8000e0c <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e006      	b.n	8003e42 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e34:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <RCCEx_PLL3_Config+0x15c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	58024400 	.word	0x58024400
 8003e50:	ffff0007 	.word	0xffff0007

08003e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e049      	b.n	8003efa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d106      	bne.n	8003e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7fc fe42 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	4619      	mov	r1, r3
 8003e92:	4610      	mov	r0, r2
 8003e94:	f000 f92a 	bl	80040ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_TIM_ConfigClockSource+0x18>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e0db      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x1d0>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4b69      	ldr	r3, [pc, #420]	; (80040dc <HAL_TIM_ConfigClockSource+0x1d8>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a63      	ldr	r2, [pc, #396]	; (80040e0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	f000 80a9 	beq.w	80040aa <HAL_TIM_ConfigClockSource+0x1a6>
 8003f58:	4a61      	ldr	r2, [pc, #388]	; (80040e0 <HAL_TIM_ConfigClockSource+0x1dc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	f200 80ae 	bhi.w	80040bc <HAL_TIM_ConfigClockSource+0x1b8>
 8003f60:	4a60      	ldr	r2, [pc, #384]	; (80040e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	f000 80a1 	beq.w	80040aa <HAL_TIM_ConfigClockSource+0x1a6>
 8003f68:	4a5e      	ldr	r2, [pc, #376]	; (80040e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	f200 80a6 	bhi.w	80040bc <HAL_TIM_ConfigClockSource+0x1b8>
 8003f70:	4a5d      	ldr	r2, [pc, #372]	; (80040e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	f000 8099 	beq.w	80040aa <HAL_TIM_ConfigClockSource+0x1a6>
 8003f78:	4a5b      	ldr	r2, [pc, #364]	; (80040e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	f200 809e 	bhi.w	80040bc <HAL_TIM_ConfigClockSource+0x1b8>
 8003f80:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003f84:	f000 8091 	beq.w	80040aa <HAL_TIM_ConfigClockSource+0x1a6>
 8003f88:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003f8c:	f200 8096 	bhi.w	80040bc <HAL_TIM_ConfigClockSource+0x1b8>
 8003f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f94:	f000 8089 	beq.w	80040aa <HAL_TIM_ConfigClockSource+0x1a6>
 8003f98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f9c:	f200 808e 	bhi.w	80040bc <HAL_TIM_ConfigClockSource+0x1b8>
 8003fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa4:	d03e      	beq.n	8004024 <HAL_TIM_ConfigClockSource+0x120>
 8003fa6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003faa:	f200 8087 	bhi.w	80040bc <HAL_TIM_ConfigClockSource+0x1b8>
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb2:	f000 8085 	beq.w	80040c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8003fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fba:	d87f      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x1b8>
 8003fbc:	2b70      	cmp	r3, #112	; 0x70
 8003fbe:	d01a      	beq.n	8003ff6 <HAL_TIM_ConfigClockSource+0xf2>
 8003fc0:	2b70      	cmp	r3, #112	; 0x70
 8003fc2:	d87b      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x1b8>
 8003fc4:	2b60      	cmp	r3, #96	; 0x60
 8003fc6:	d050      	beq.n	800406a <HAL_TIM_ConfigClockSource+0x166>
 8003fc8:	2b60      	cmp	r3, #96	; 0x60
 8003fca:	d877      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x1b8>
 8003fcc:	2b50      	cmp	r3, #80	; 0x50
 8003fce:	d03c      	beq.n	800404a <HAL_TIM_ConfigClockSource+0x146>
 8003fd0:	2b50      	cmp	r3, #80	; 0x50
 8003fd2:	d873      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x1b8>
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d058      	beq.n	800408a <HAL_TIM_ConfigClockSource+0x186>
 8003fd8:	2b40      	cmp	r3, #64	; 0x40
 8003fda:	d86f      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x1b8>
 8003fdc:	2b30      	cmp	r3, #48	; 0x30
 8003fde:	d064      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x1a6>
 8003fe0:	2b30      	cmp	r3, #48	; 0x30
 8003fe2:	d86b      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x1b8>
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d060      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x1a6>
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d867      	bhi.n	80040bc <HAL_TIM_ConfigClockSource+0x1b8>
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d05c      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x1a6>
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	d05a      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ff4:	e062      	b.n	80040bc <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6818      	ldr	r0, [r3, #0]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	6899      	ldr	r1, [r3, #8]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685a      	ldr	r2, [r3, #4]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f000 f989 	bl	800431c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004018:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	609a      	str	r2, [r3, #8]
      break;
 8004022:	e04e      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	6899      	ldr	r1, [r3, #8]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f000 f972 	bl	800431c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004046:	609a      	str	r2, [r3, #8]
      break;
 8004048:	e03b      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	6859      	ldr	r1, [r3, #4]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	461a      	mov	r2, r3
 8004058:	f000 f8e2 	bl	8004220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2150      	movs	r1, #80	; 0x50
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f93c 	bl	80042e0 <TIM_ITRx_SetConfig>
      break;
 8004068:	e02b      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	6859      	ldr	r1, [r3, #4]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	461a      	mov	r2, r3
 8004078:	f000 f901 	bl	800427e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2160      	movs	r1, #96	; 0x60
 8004082:	4618      	mov	r0, r3
 8004084:	f000 f92c 	bl	80042e0 <TIM_ITRx_SetConfig>
      break;
 8004088:	e01b      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6859      	ldr	r1, [r3, #4]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	461a      	mov	r2, r3
 8004098:	f000 f8c2 	bl	8004220 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2140      	movs	r1, #64	; 0x40
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f91c 	bl	80042e0 <TIM_ITRx_SetConfig>
      break;
 80040a8:	e00b      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4619      	mov	r1, r3
 80040b4:	4610      	mov	r0, r2
 80040b6:	f000 f913 	bl	80042e0 <TIM_ITRx_SetConfig>
        break;
 80040ba:	e002      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80040bc:	bf00      	nop
 80040be:	e000      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80040c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	ffceff88 	.word	0xffceff88
 80040e0:	00100040 	.word	0x00100040
 80040e4:	00100030 	.word	0x00100030
 80040e8:	00100020 	.word	0x00100020

080040ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a40      	ldr	r2, [pc, #256]	; (8004200 <TIM_Base_SetConfig+0x114>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d013      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410a:	d00f      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a3d      	ldr	r2, [pc, #244]	; (8004204 <TIM_Base_SetConfig+0x118>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d00b      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a3c      	ldr	r2, [pc, #240]	; (8004208 <TIM_Base_SetConfig+0x11c>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d007      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a3b      	ldr	r2, [pc, #236]	; (800420c <TIM_Base_SetConfig+0x120>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d003      	beq.n	800412c <TIM_Base_SetConfig+0x40>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a3a      	ldr	r2, [pc, #232]	; (8004210 <TIM_Base_SetConfig+0x124>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d108      	bne.n	800413e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a2f      	ldr	r2, [pc, #188]	; (8004200 <TIM_Base_SetConfig+0x114>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d01f      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414c:	d01b      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a2c      	ldr	r2, [pc, #176]	; (8004204 <TIM_Base_SetConfig+0x118>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d017      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <TIM_Base_SetConfig+0x11c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d013      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a2a      	ldr	r2, [pc, #168]	; (800420c <TIM_Base_SetConfig+0x120>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00f      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a29      	ldr	r2, [pc, #164]	; (8004210 <TIM_Base_SetConfig+0x124>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d00b      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a28      	ldr	r2, [pc, #160]	; (8004214 <TIM_Base_SetConfig+0x128>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d007      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a27      	ldr	r2, [pc, #156]	; (8004218 <TIM_Base_SetConfig+0x12c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d003      	beq.n	8004186 <TIM_Base_SetConfig+0x9a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a26      	ldr	r2, [pc, #152]	; (800421c <TIM_Base_SetConfig+0x130>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d108      	bne.n	8004198 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a10      	ldr	r2, [pc, #64]	; (8004200 <TIM_Base_SetConfig+0x114>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00f      	beq.n	80041e4 <TIM_Base_SetConfig+0xf8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a12      	ldr	r2, [pc, #72]	; (8004210 <TIM_Base_SetConfig+0x124>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00b      	beq.n	80041e4 <TIM_Base_SetConfig+0xf8>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a11      	ldr	r2, [pc, #68]	; (8004214 <TIM_Base_SetConfig+0x128>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d007      	beq.n	80041e4 <TIM_Base_SetConfig+0xf8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a10      	ldr	r2, [pc, #64]	; (8004218 <TIM_Base_SetConfig+0x12c>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d003      	beq.n	80041e4 <TIM_Base_SetConfig+0xf8>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a0f      	ldr	r2, [pc, #60]	; (800421c <TIM_Base_SetConfig+0x130>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d103      	bne.n	80041ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	615a      	str	r2, [r3, #20]
}
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40010000 	.word	0x40010000
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	40000c00 	.word	0x40000c00
 8004210:	40010400 	.word	0x40010400
 8004214:	40014000 	.word	0x40014000
 8004218:	40014400 	.word	0x40014400
 800421c:	40014800 	.word	0x40014800

08004220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f023 0201 	bic.w	r2, r3, #1
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800424a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f023 030a 	bic.w	r3, r3, #10
 800425c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	621a      	str	r2, [r3, #32]
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800427e:	b480      	push	{r7}
 8004280:	b087      	sub	sp, #28
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f023 0210 	bic.w	r2, r3, #16
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	031b      	lsls	r3, r3, #12
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <TIM_ITRx_SetConfig+0x38>)
 80042f4:	4013      	ands	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	f043 0307 	orr.w	r3, r3, #7
 8004302:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	609a      	str	r2, [r3, #8]
}
 800430a:	bf00      	nop
 800430c:	3714      	adds	r7, #20
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	ffcfff8f 	.word	0xffcfff8f

0800431c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004336:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	021a      	lsls	r2, r3, #8
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	431a      	orrs	r2, r3
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4313      	orrs	r3, r2
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4313      	orrs	r3, r2
 8004348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	609a      	str	r2, [r3, #8]
}
 8004350:	bf00      	nop
 8004352:	371c      	adds	r7, #28
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004370:	2302      	movs	r3, #2
 8004372:	e068      	b.n	8004446 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a2e      	ldr	r2, [pc, #184]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a2d      	ldr	r2, [pc, #180]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d108      	bne.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1e      	ldr	r2, [pc, #120]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d01d      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e6:	d018      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1b      	ldr	r2, [pc, #108]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1a      	ldr	r2, [pc, #104]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d00e      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a18      	ldr	r2, [pc, #96]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a13      	ldr	r2, [pc, #76]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a14      	ldr	r2, [pc, #80]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d10c      	bne.n	8004434 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004420:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	4313      	orrs	r3, r2
 800442a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3714      	adds	r7, #20
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40010000 	.word	0x40010000
 8004458:	40010400 	.word	0x40010400
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40001800 	.word	0x40001800

0800446c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800446c:	b084      	sub	sp, #16
 800446e:	b580      	push	{r7, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	f107 001c 	add.w	r0, r7, #28
 800447a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800447e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004480:	2b01      	cmp	r3, #1
 8004482:	d120      	bne.n	80044c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68da      	ldr	r2, [r3, #12]
 8004494:	4b2a      	ldr	r3, [pc, #168]	; (8004540 <USB_CoreInit+0xd4>)
 8004496:	4013      	ands	r3, r2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d105      	bne.n	80044ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 fa60 	bl	8004980 <USB_CoreReset>
 80044c0:	4603      	mov	r3, r0
 80044c2:	73fb      	strb	r3, [r7, #15]
 80044c4:	e01a      	b.n	80044fc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fa54 	bl	8004980 <USB_CoreReset>
 80044d8:	4603      	mov	r3, r0
 80044da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38
 80044ee:	e005      	b.n	80044fc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d116      	bne.n	8004530 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004506:	b29a      	uxth	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004510:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <USB_CoreInit+0xd8>)
 8004512:	4313      	orrs	r3, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f043 0206 	orr.w	r2, r3, #6
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f043 0220 	orr.w	r2, r3, #32
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800453c:	b004      	add	sp, #16
 800453e:	4770      	bx	lr
 8004540:	ffbdffbf 	.word	0xffbdffbf
 8004544:	03ee0000 	.word	0x03ee0000

08004548 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f023 0201 	bic.w	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b082      	sub	sp, #8
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
 8004572:	460b      	mov	r3, r1
 8004574:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d106      	bne.n	8004596 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	60da      	str	r2, [r3, #12]
 8004594:	e00b      	b.n	80045ae <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d106      	bne.n	80045aa <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	60da      	str	r2, [r3, #12]
 80045a8:	e001      	b.n	80045ae <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e003      	b.n	80045b6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80045ae:	2032      	movs	r0, #50	; 0x32
 80045b0:	f7fc fc38 	bl	8000e24 <HAL_Delay>

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
	...

080045c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045c0:	b084      	sub	sp, #16
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b086      	sub	sp, #24
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
 80045de:	e009      	b.n	80045f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	3340      	adds	r3, #64	; 0x40
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	2200      	movs	r2, #0
 80045ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	3301      	adds	r3, #1
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	2b0e      	cmp	r3, #14
 80045f8:	d9f2      	bls.n	80045e0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d11c      	bne.n	800463a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800460e:	f043 0302 	orr.w	r3, r3, #2
 8004612:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	e005      	b.n	8004646 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800464c:	461a      	mov	r2, r3
 800464e:	2300      	movs	r3, #0
 8004650:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004658:	4619      	mov	r1, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004660:	461a      	mov	r2, r3
 8004662:	680b      	ldr	r3, [r1, #0]
 8004664:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004668:	2b01      	cmp	r3, #1
 800466a:	d10c      	bne.n	8004686 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800466c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466e:	2b00      	cmp	r3, #0
 8004670:	d104      	bne.n	800467c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004672:	2100      	movs	r1, #0
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f949 	bl	800490c <USB_SetDevSpeed>
 800467a:	e008      	b.n	800468e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800467c:	2101      	movs	r1, #1
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f944 	bl	800490c <USB_SetDevSpeed>
 8004684:	e003      	b.n	800468e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004686:	2103      	movs	r1, #3
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f93f 	bl	800490c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800468e:	2110      	movs	r1, #16
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f8f3 	bl	800487c <USB_FlushTxFifo>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f911 	bl	80048c8 <USB_FlushRxFifo>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d001      	beq.n	80046b0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b6:	461a      	mov	r2, r3
 80046b8:	2300      	movs	r3, #0
 80046ba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c2:	461a      	mov	r2, r3
 80046c4:	2300      	movs	r3, #0
 80046c6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ce:	461a      	mov	r2, r3
 80046d0:	2300      	movs	r3, #0
 80046d2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	e043      	b.n	8004762 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046f0:	d118      	bne.n	8004724 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	461a      	mov	r2, r3
 8004706:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	e013      	b.n	8004736 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471a:	461a      	mov	r2, r3
 800471c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e008      	b.n	8004736 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004730:	461a      	mov	r2, r3
 8004732:	2300      	movs	r3, #0
 8004734:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	015a      	lsls	r2, r3, #5
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	4413      	add	r3, r2
 800473e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004742:	461a      	mov	r2, r3
 8004744:	2300      	movs	r3, #0
 8004746:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004754:	461a      	mov	r2, r3
 8004756:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800475a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	3301      	adds	r3, #1
 8004760:	613b      	str	r3, [r7, #16]
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	429a      	cmp	r2, r3
 8004768:	d3b7      	bcc.n	80046da <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
 800476e:	e043      	b.n	80047f8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	015a      	lsls	r2, r3, #5
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4413      	add	r3, r2
 8004778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004786:	d118      	bne.n	80047ba <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10a      	bne.n	80047a4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	461a      	mov	r2, r3
 800479c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	e013      	b.n	80047cc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b0:	461a      	mov	r2, r3
 80047b2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	e008      	b.n	80047cc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c6:	461a      	mov	r2, r3
 80047c8:	2300      	movs	r3, #0
 80047ca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d8:	461a      	mov	r2, r3
 80047da:	2300      	movs	r3, #0
 80047dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ea:	461a      	mov	r2, r3
 80047ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3301      	adds	r3, #1
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d3b7      	bcc.n	8004770 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800480e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004812:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004820:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	2b00      	cmp	r3, #0
 8004826:	d105      	bne.n	8004834 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	699b      	ldr	r3, [r3, #24]
 800482c:	f043 0210 	orr.w	r2, r3, #16
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699a      	ldr	r2, [r3, #24]
 8004838:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <USB_DevInit+0x2b4>)
 800483a:	4313      	orrs	r3, r2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	f043 0208 	orr.w	r2, r3, #8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004854:	2b01      	cmp	r3, #1
 8004856:	d105      	bne.n	8004864 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	4b06      	ldr	r3, [pc, #24]	; (8004878 <USB_DevInit+0x2b8>)
 800485e:	4313      	orrs	r3, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004864:	7dfb      	ldrb	r3, [r7, #23]
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004870:	b004      	add	sp, #16
 8004872:	4770      	bx	lr
 8004874:	803c3800 	.word	0x803c3800
 8004878:	40000004 	.word	0x40000004

0800487c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	019b      	lsls	r3, r3, #6
 800488e:	f043 0220 	orr.w	r2, r3, #32
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3301      	adds	r3, #1
 800489a:	60fb      	str	r3, [r7, #12]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <USB_FlushTxFifo+0x48>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d901      	bls.n	80048a8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80048a4:	2303      	movs	r3, #3
 80048a6:	e006      	b.n	80048b6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d0f0      	beq.n	8004896 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	00030d40 	.word	0x00030d40

080048c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2210      	movs	r2, #16
 80048d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	3301      	adds	r3, #1
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4a09      	ldr	r2, [pc, #36]	; (8004908 <USB_FlushRxFifo+0x40>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d901      	bls.n	80048ec <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e006      	b.n	80048fa <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d0f0      	beq.n	80048da <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	00030d40 	.word	0x00030d40

0800490c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	460b      	mov	r3, r1
 8004916:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	68f9      	ldr	r1, [r7, #12]
 8004928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800493e:	b480      	push	{r7}
 8004940:	b085      	sub	sp, #20
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004958:	f023 0303 	bic.w	r3, r3, #3
 800495c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800496c:	f043 0302 	orr.w	r3, r3, #2
 8004970:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3301      	adds	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <USB_CoreReset+0x64>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e01b      	b.n	80049d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	daf2      	bge.n	800498c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f043 0201 	orr.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3301      	adds	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <USB_CoreReset+0x64>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e006      	b.n	80049d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d0f0      	beq.n	80049b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	00030d40 	.word	0x00030d40

080049e8 <__libc_init_array>:
 80049e8:	b570      	push	{r4, r5, r6, lr}
 80049ea:	4d0d      	ldr	r5, [pc, #52]	; (8004a20 <__libc_init_array+0x38>)
 80049ec:	4c0d      	ldr	r4, [pc, #52]	; (8004a24 <__libc_init_array+0x3c>)
 80049ee:	1b64      	subs	r4, r4, r5
 80049f0:	10a4      	asrs	r4, r4, #2
 80049f2:	2600      	movs	r6, #0
 80049f4:	42a6      	cmp	r6, r4
 80049f6:	d109      	bne.n	8004a0c <__libc_init_array+0x24>
 80049f8:	4d0b      	ldr	r5, [pc, #44]	; (8004a28 <__libc_init_array+0x40>)
 80049fa:	4c0c      	ldr	r4, [pc, #48]	; (8004a2c <__libc_init_array+0x44>)
 80049fc:	f000 f820 	bl	8004a40 <_init>
 8004a00:	1b64      	subs	r4, r4, r5
 8004a02:	10a4      	asrs	r4, r4, #2
 8004a04:	2600      	movs	r6, #0
 8004a06:	42a6      	cmp	r6, r4
 8004a08:	d105      	bne.n	8004a16 <__libc_init_array+0x2e>
 8004a0a:	bd70      	pop	{r4, r5, r6, pc}
 8004a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a10:	4798      	blx	r3
 8004a12:	3601      	adds	r6, #1
 8004a14:	e7ee      	b.n	80049f4 <__libc_init_array+0xc>
 8004a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1a:	4798      	blx	r3
 8004a1c:	3601      	adds	r6, #1
 8004a1e:	e7f2      	b.n	8004a06 <__libc_init_array+0x1e>
 8004a20:	08004a90 	.word	0x08004a90
 8004a24:	08004a90 	.word	0x08004a90
 8004a28:	08004a90 	.word	0x08004a90
 8004a2c:	08004a94 	.word	0x08004a94

08004a30 <memset>:
 8004a30:	4402      	add	r2, r0
 8004a32:	4603      	mov	r3, r0
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d100      	bne.n	8004a3a <memset+0xa>
 8004a38:	4770      	bx	lr
 8004a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a3e:	e7f9      	b.n	8004a34 <memset+0x4>

08004a40 <_init>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr

08004a4c <_fini>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr
